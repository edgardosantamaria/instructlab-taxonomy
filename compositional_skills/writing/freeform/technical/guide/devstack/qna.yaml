created_by: slawqo
seed_examples:
  - question: |

      What is DevStack?
    answer: >

      DevStack is a series of extensible bash scripts used to quickly bring up a

      complete OpenStack environment. It is used interactively as a development

      environment and as the basis for much of the OpenStack project’s

      testing in the CI systems.


      Devstack is an Open Source tool and its source code is available at

      https://opendev.org/openstack/devstack.


      OpenStack has many different components and Devstack scripts can out of
      the

      box deploy only some of the main ones, such as Keystone, Nova, Neutron,

      Cinder, Glance, Tempest or Swift.
  - question: |

      What are plugins in Devstack?
    answer: >

      The OpenStack ecosystem is wide and deep, and only growing more so every

      day. The value of DevStack is that it’s simple enough to understand what

      it’s doing clearly. And yet we’d like to support as much of the OpenStack

      Ecosystem as possible. We do that with plugins.


      DevStack plugins are bits of bash code that live outside the DevStack
      tree.

      They are called through a strong contract, so these plugins can be sure
      that

      they will continue to work in the future as DevStack evolves.
  - question: |

      How to write plugin for DevStack?
    answer: >

      DevStack supports a standard mechanism for including plugins from external

      repositories. The plugin interface assumes that an external git repository

      includes a "devstack/" top level directory. Inside this directory there
      can

      be 3 files:


      * override-defaults - a file containing global variables that will be
        sourced before the lib/* files. This allows the plugin to override the
        defaults that are otherwise set in the lib/* files.
        For example, override-defaults may export CINDER_ENABLED_BACKENDS to
        include the plugin-specific storage backend and thus be able to override
        the default lvm only storage backend for Cinder.

      * settings - a file containing global variables that will be sourced very
        early in the process. This is helpful if other plugins might depend on this
        one, and need access to global variables to do their work.

        Your settings should include any enable_service lines required by your
        plugin. This is especially important if you are kicking off services using
        run_process as it only works with enabled services.

        Be careful to allow users to override global-variables for customizing
        their environment. Usually it is best to provide a default value only if
        the variable is unset or empty; e.g. in bash syntax FOO=${FOO:-default}.

        The file should include a define_plugin line to indicate the plugin’s
        name, which is the name that should be used by users on “enable_plugin”
        lines. It should generally be the last component of the git repo path
        (e.g., if the plugin’s repo is openstack/foo, then the name here should be
        “foo”)

        ```
        define_plugin <YOUR PLUGIN>
        ```

        If your plugin depends on another plugin, indicate it in this file with
        one or more lines like the following:

        ```
        plugin_requires <YOUR PLUGIN> <OTHER PLUGIN>
        ```

        For example, if the plugin “foo” depends on “bar”, the settings file should include:

        ```
        define_plugin foo
        plugin_requires foo bar
        ```

        Devstack does not currently use this dependency information, so it’s
        important that users continue to add enable_plugin lines in the correct
        order in local.conf, however adding this information allows other tools to
        consider dependency information when automatically generating local.conf
        files.

      * plugin.sh - the actual plugin. It is executed by devstack at well
      defined
        points during a stack.sh run. The plugin.sh internal structure is discussed
        below.

        plugin.sh is a bash script that will be called at specific points during
        stack.sh, unstack.sh, and clean.sh. It will be called in the following way:

        ```
        source $PATH/TO/plugin.sh <mode> [phase]
        ```

        'mode' can be thought of as the major mode being called, currently one of:
        'stack', 'unstack', 'clean'.
        'phase' is used by modes which have multiple points
        during their run where it’s necessary to be able to execute code. All
        existing mode and phase points are considered strong contracts and won’t
        be removed without a reasonable deprecation period. Additional new mode
        or phase points may be added at any time if we discover we need them to
        support additional kinds of plugins in devstack.

        The current full list of mode and phase are:
        * stack - Called by stack.sh four times for different phases of its run:
          * pre-install - Called after system (OS) setup is complete and before project source is installed.
          * install - Called after the layer 1 and 2 projects source and their dependencies have been installed.
          * post-config - Called after the layer 1 and 2 services have been configured. All configuration files for enabled services should exist at this point.
          * extra - Called near the end after layer 1 and 2 services have been started.
          * test-config - Called at the end of devstack used to configure tempest or any other test environments
        * unstack - Called by unstack.sh before other services are shut down.
        * clean - Called by clean.sh before other services are cleaned, but after unstack.sh has been called.
  - question: |

      How to enable Devstack plugin?
    answer: >

      Plugins are registered by adding the following to the localrc section of
      local.conf.

      They are added in the following format:


      ```

      [[local|localrc]]

      enable_plugin <NAME> <GITURL> [GITREF]

      ```


      * name - an arbitrary name. (ex: glusterfs, docker, zaqar, congress)

      * giturl - a valid git url that can be cloned

      * gitref - an optional git ref (branch / ref / tag) that will be cloned.
        Defaults to master.

      An example would be as follows:


      ```

      enable_plugin neutron https://opendev.org/openstack/neutron

      ```
task_description: ''
