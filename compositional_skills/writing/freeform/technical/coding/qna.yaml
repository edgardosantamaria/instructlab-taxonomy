created_by: nickclifton
seed_examples:
- answer: "
In C constructor functions are not built-in language features like
they are in some other programming languages, such as Java or
C++.  However some C compilers - including gcc and clang - support an
extension to C using attributes to indicate that a function is a
constructor.  Here is how to do this:

1. **Write a function**: Create a function that performs some kind of
construction.  This could be allocating and initializing memory,
adding a structure to a list, or pretty much anything else.  The
function cannot take any arguments or return any value.

2. **Mark the function as a constructor**: Use the __attribute__
syntax to add the keyword 'constructor' to the function.  This
indicates that the function should be called before main().

Here's an example of how to define a simple constructor function in C:

  int * array = NULL;
  static __attribute__((constructor)) void init_array (void)
  {
    array = malloc (1024);
  }

Some architectures allow the 'constructor' attribute to take a integer
value as an argument.  This indicates the constructor's priority.
Constructors with smaller priority numbers will be run before
constructors with larger priority numbers.  Priorities 0..100 are
reserved for the system and should not be used by ordinary programs.

  static __attribute__((constructor(200))) void init_array (void)

Destructors can also be created in the same way, just using the
'destructor' keyword instead of 'constructor':

  static __attribute__((destructor)) void free_array (void)
  {
    free (array); array = NULL;
  }
"
 question: "How do I write constructor functions in C"
task_description: "Writing constructors in C"
