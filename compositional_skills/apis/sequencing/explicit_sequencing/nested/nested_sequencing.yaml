seq_topv2:
  instruction: "You are given a list of APIs below followed by a Query. Your task is to generate a sequence of API calls that is required to execute the Query. <api list>GET_ESTIMATED_DURATION(METHOD_TRAVEL; DESTINATION; SOURCE; DATE_TIME_DEPARTURE; PATH; DATE_TIME; PATH_AVOID; DATE_TIME_ARRIVAL; ROAD_CONDITION; OBSTRUCTION_AVOID; WAYPOINT_AVOID; WAYPOINT; ROAD_CONDITION_AVOID) : Get estimated duration. GET_LOCATION(POINT_ON_MAP; CATEGORY_LOCATION; SEARCH_RADIUS; LOCATION; LOCATION_MODIFIER; LOCATION_USER) : Get location. GET_ESTIMATED_ARRIVAL(DATE_TIME_DEPARTURE; DESTINATION; SOURCE; DATE_TIME_ARRIVAL; PATH; OBSTRUCTION_AVOID; WAYPOINT; METHOD_TRAVEL; ROAD_CONDITION_AVOID; ROAD_CONDITION; PATH_AVOID; LOCATION) : Get estimated arrival. GET_ESTIMATED_DEPARTURE(SOURCE; DESTINATION; DATE_TIME_ARRIVAL; PATH_AVOID; PATH; DATE_TIME_DEPARTURE; METHOD_TRAVEL; OBSTRUCTION_AVOID; WAYPOINT; ROAD_CONDITION; LOCATION) : Get estimated departure. GET_LOCATION_HOME(TYPE_RELATION; CONTACT; CONTACT_RELATED; LOCATION_CURRENT; LOCATION) : Get location home. GET_INFO_TRAFFIC(DESTINATION; PATH; DATE_TIME; METHOD_TRAVEL; LOCATION; SOURCE; OBSTRUCTION_AVOID; ROAD_CONDITION; WAYPOINT; PATH_AVOID; WAYPOINT_AVOID) : Get info traffic. GET_DIRECTIONS(DESTINATION; DATE_TIME_DEPARTURE; PATH; SOURCE; OBSTRUCTION_AVOID; PATH_AVOID; METHOD_TRAVEL; DATE_TIME_ARRIVAL; ROAD_CONDITION_AVOID; ROAD_CONDITION; LOCATION; WAYPOINT_AVOID; WAYPOINT; AMOUNT) : Get directions. GET_LOCATION_WORK(CONTACT; TYPE_RELATION; CONTACT_RELATED; LOCATION_WORK; LOCATION; LOCATION_CURRENT) : Get location work. GET_INFO_ROAD_CONDITION(LOCATION; ROAD_CONDITION; DESTINATION; DATE_TIME; PATH; METHOD_TRAVEL; SOURCE; DATE_TIME_DEPARTURE; DATE_TIME_ARRIVAL; WAYPOINT) : Get info road condition. GET_EVENT(ORGANIZER_EVENT; DATE_TIME; CATEGORY_EVENT; NAME_EVENT; LOCATION; ATTENDEE_EVENT; ORDINAL; ATTRIBUTE_EVENT; AMOUNT) : Get event. GET_DISTANCE(SOURCE; DESTINATION; UNIT_DISTANCE; METHOD_TRAVEL; WAYPOINT; PATH; DATE_TIME_DEPARTURE; PATH_AVOID; OBSTRUCTION_AVOID; AMOUNT) : Get distance. UPDATE_DIRECTIONS(OBSTRUCTION_AVOID; DESTINATION; PATH; SOURCE; PATH_AVOID; DATE_TIME_DEPARTURE; DATE_TIME_ARRIVAL; WAYPOINT_ADDED; WAYPOINT_AVOID) : Update directions. GET_CONTACT(TYPE_RELATION; CONTACT_RELATED; GROUP; CONTACT; LOCATION_HOME; TYPE_CONTACT; MUTUAL_EMPLOYER; AMOUNT; MUTUAL_SCHOOL; TYPE_INFO; MUTUAL_LOCATION; DATE_TIME; AGE; BIRTHDAY; DATE_TIME_BIRTHDAY; JOB) : Get contact. GET_LOCATION_SCHOOL(CONTACT; TYPE_RELATION; CONTACT_RELATED) : Get location school. GET_INFO_ROUTE(PATH; DESTINATION; WAYPOINT; SOURCE; DATE_TIME_DEPARTURE; METHOD_TRAVEL) : Get info route. GET_LOCATION_HOMETOWN(CONTACT) : Get location hometown. CREATE_ALARM(DATE_TIME; DATE_TIME_RECURRING; DURATION; ALARM_NAME; PERIOD; AMOUNT; ORDINAL; RECURRING_DATE_TIME) : Create alarm. GET_ALARM(AMOUNT; ALARM_NAME; ORDINAL; PERIOD; DATE_TIME_RECURRING; DURATION; DATE_TIME) : Get alarm. GET_TIME(DATE_TIME; TIME_ZONE) : Get time. DELETE_ALARM(ALARM_NAME; AMOUNT; ORDINAL; DATE_TIME_RECURRING; PERIOD; DURATION; DATE_TIME) : Delete alarm. SILENCE_ALARM(ALARM_NAME; ORDINAL; AMOUNT; DATE_TIME_RECURRING; PERIOD; DATE_TIME; DURATION) : Silence alarm. SNOOZE_ALARM(DATE_TIME; AMOUNT; ORDINAL; ALARM_NAME; PERIOD; DATE_TIME_RECURRING; DURATION) : Snooze alarm. UPDATE_ALARM(DATE_TIME; ALARM_NAME; ORDINAL; PERIOD; DURATION; AMOUNT; DATE_TIME_RECURRING) : Update alarm. GET_EVENT_ATTENDEE(ORGANIZER_EVENT; ATTENDEE_EVENT; DATE_TIME; CATEGORY_EVENT; AMOUNT; LOCATION) : Get event attendee. NEGATION() : Negation. GET_EVENT_ORGANIZER(LOCATION; DATE_TIME; CATEGORY_EVENT; ORGANIZER_EVENT) : Get event organizer. GET_EVENT_ATTENDEE_AMOUNT(ORDINAL; CATEGORY_EVENT; LOCATION) : Get event attendee amount. GET_MESSAGE(ORDINAL; RECIPIENT; SENDER; DATE_TIME; CONTENT_EXACT; AMOUNT; TAG_MESSAGE; TYPE_CONTENT; GROUP; RESOURCE) : Get message. SEND_MESSAGE(CONTENT_EXACT; RECIPIENT; CONTENT_EMOJI; AMOUNT; TYPE_CONTENT; GROUP; RESOURCE; DATE_TIME; ORDINAL; CONTACT; SENDER; NAME_APP) : Send message. REACT_MESSAGE(RECIPIENT; TYPE_REACTION; TYPE_CONTENT; ORDINAL; GROUP; AMOUNT; DATE_TIME; TAG_MESSAGE; RESOURCE; CONTENT_EXACT; CONTACT) : React message. CANCEL_MESSAGE(TYPE_CONTENT; AMOUNT) : Cancel message. IGNORE_MESSAGE(CONTENT_EXACT; TYPE_CONTENT) : Ignore message. SEND_TEXT_MESSAGE() : Send text message. SELECT_ITEM() : Select item. LOOP_MUSIC(MUSIC_TYPE; MUSIC_TRACK_TITLE; MUSIC_PROVIDER_NAME; MUSIC_ALBUM_TITLE; MUSIC_ARTIST_NAME; ORDINAL; MUSIC_PLAYLIST_TITLE; MUSIC_GENRE) : Loop music. REPLAY_MUSIC(MUSIC_TYPE; MUSIC_TRACK_TITLE; MUSIC_ALBUM_TITLE; MUSIC_GENRE; MUSIC_ARTIST_NAME; MUSIC_RADIO_ID; MUSIC_PROVIDER_NAME; MUSIC_PLAYLIST_TITLE; ORDINAL) : Replay music. PREVIOUS_TRACK_MUSIC(MUSIC_TYPE; ORDINAL; MUSIC_ARTIST_NAME; MUSIC_PROVIDER_NAME; MUSIC_ALBUM_TITLE) : Previous track music. PLAY_MUSIC(MUSIC_TYPE; MUSIC_PLAYLIST_TITLE; MUSIC_PROVIDER_NAME; MUSIC_GENRE; MUSIC_ARTIST_NAME; MUSIC_TRACK_TITLE; MUSIC_ALBUM_TITLE; MUSIC_RADIO_ID; ORDINAL) : Play music. PAUSE_MUSIC(MUSIC_TYPE; MUSIC_ARTIST_NAME; MUSIC_PROVIDER_NAME; MUSIC_PLAYLIST_TITLE; MUSIC_TRACK_TITLE) : Pause music. SKIP_TRACK_MUSIC(MUSIC_TYPE; ORDINAL; MUSIC_TRACK_TITLE; MUSIC_GENRE; MUSIC_ARTIST_NAME; MUSIC_PROVIDER_NAME; MUSIC_PLAYLIST_TITLE; MUSIC_ALBUM_TITLE) : Skip track music. START_SHUFFLE_MUSIC(MUSIC_ARTIST_NAME; MUSIC_TYPE; MUSIC_PLAYLIST_TITLE; MUSIC_GENRE; MUSIC_PROVIDER_NAME; MUSIC_TRACK_TITLE; MUSIC_ALBUM_TITLE; ORDINAL) : Start shuffle music. DISLIKE_MUSIC(MUSIC_TYPE; MUSIC_GENRE; MUSIC_ARTIST_NAME; MUSIC_PROVIDER_NAME; MUSIC_ALBUM_TITLE; ORDINAL) : Dislike music. REMOVE_FROM_PLAYLIST_MUSIC(MUSIC_TYPE; MUSIC_ARTIST_NAME; MUSIC_GENRE; MUSIC_PROVIDER_NAME; MUSIC_TRACK_TITLE; MUSIC_PLAYLIST_TITLE) : Remove from playlist music. LIKE_MUSIC(MUSIC_TYPE; MUSIC_PLAYLIST_TITLE; MUSIC_PROVIDER_NAME; MUSIC_ARTIST_NAME; MUSIC_GENRE; ORDINAL) : Like music. CREATE_PLAYLIST_MUSIC(MUSIC_TYPE; MUSIC_PLAYLIST_TITLE; MUSIC_PROVIDER_NAME; MUSIC_ARTIST_NAME; MUSIC_GENRE) : Create playlist music. STOP_MUSIC(MUSIC_TYPE; MUSIC_PROVIDER_NAME; MUSIC_GENRE; MUSIC_PLAYLIST_TITLE; MUSIC_ARTIST_NAME; ORDINAL) : Stop music. ADD_TO_PLAYLIST_MUSIC(MUSIC_TYPE; MUSIC_PLAYLIST_TITLE; MUSIC_ARTIST_NAME; MUSIC_TRACK_TITLE; MUSIC_ALBUM_TITLE; MUSIC_PROVIDER_NAME; MUSIC_GENRE; ORDINAL) : Add to playlist music. SET_DEFAULT_PROVIDER_MUSIC(MUSIC_PROVIDER_NAME) : Set default provider music. CREATE_REMINDER(PERSON_REMINDED; TODO; RECURRING_DATE_TIME; DATE_TIME; AMOUNT; ORDINAL) : Create reminder. GET_RECURRING_DATE_TIME(FREQUENCY; DATE_TIME; ORDINAL) : Get recurring date time. DELETE_REMINDER(DATE_TIME; TODO; PERSON_REMINDED; AMOUNT; RECURRING_DATE_TIME; ORDINAL) : Delete reminder. GET_TODO(DATE_TIME; TODO; RECURRING_DATE_TIME; ATTENDEE; AMOUNT) : Get todo. UPDATE_REMINDER(TODO; PERSON_REMINDED; RECURRING_DATE_TIME_NEW; DATE_TIME; PERSON_REMINDED_ADDED; RECURRING_DATE_TIME; AMOUNT; PERSON_REMINDED_REMOVED; ATTENDEE; ATTENDEE_ADDED; ATTENDEE_REMOVED; ORDINAL; DATE_TIME_NEW; TODO_NEW) : Update reminder. UPDATE_REMINDER_TODO(TODO_NEW; DATE_TIME; TODO; PERSON_REMINDED; RECURRING_DATE_TIME; AMOUNT; RECURRING_DATE_TIME_NEW; ATTENDEE) : Update reminder todo. UPDATE_REMINDER_DATE_TIME(DATE_TIME_NEW; DATE_TIME; TODO; PERSON_REMINDED; RECURRING_DATE_TIME; AMOUNT; ATTENDEE; RECURRING_DATE_TIME_NEW; ORDINAL; PERSON_REMINDED_ADDED) : Update reminder date time. GET_REMINDER(PERSON_REMINDED; DATE_TIME; TODO; AMOUNT; METHOD_RETRIEVAL_REMINDER; ORDINAL; RECURRING_DATE_TIME) : Get reminder. REPLY_MESSAGE(CONTENT_EXACT; RECIPIENT; SENDER) : Reply message. GET_REMINDER_DATE_TIME(PERSON_REMINDED; TODO; DATE_TIME; ORDINAL; METHOD_RETRIEVAL_REMINDER; RECURRING_DATE_TIME; AMOUNT) : Get reminder date time. GET_REMINDER_LOCATION(TODO; PERSON_REMINDED; METHOD_RETRIEVAL_REMINDER; DATE_TIME; ORDINAL; AMOUNT) : Get reminder location. GET_REMINDER_AMOUNT(PERSON_REMINDED; DATE_TIME; TODO; METHOD_RETRIEVAL_REMINDER) : Get reminder amount. HELP_REMINDER() : Help reminder. GET_BIRTHDAY() : Get birthday. CREATE_TIMER(METHOD_TIMER; DATE_TIME; TIMER_NAME; ORDINAL; AMOUNT) : Create timer. PAUSE_TIMER(METHOD_TIMER; AMOUNT; ORDINAL; TIMER_NAME; DATE_TIME) : Pause timer. GET_TIMER(TIMER_NAME; METHOD_TIMER; AMOUNT; ORDINAL; DATE_TIME) : Get timer. ADD_TIME_TIMER(METHOD_TIMER; DATE_TIME; TIMER_NAME; ORDINAL; AMOUNT) : Add time timer. RESTART_TIMER(METHOD_TIMER; TIMER_NAME; DATE_TIME; AMOUNT; ORDINAL) : Restart timer. SUBTRACT_TIME_TIMER(METHOD_TIMER; DATE_TIME; ORDINAL; TIMER_NAME) : Subtract time timer. DELETE_TIMER(METHOD_TIMER; AMOUNT; TIMER_NAME; ORDINAL; DATE_TIME) : Delete timer. RESUME_TIMER(METHOD_TIMER; DATE_TIME; TIMER_NAME; ORDINAL; AMOUNT) : Resume timer. UPDATE_TIMER(METHOD_TIMER; DATE_TIME; TIMER_NAME; ORDINAL; AMOUNT) : Update timer. GET_WEATHER(WEATHER_ATTRIBUTE; LOCATION; DATE_TIME; WEATHER_TEMPERATURE_UNIT; MEASUREMENT_UNIT) : Get weather. GET_SUNSET(DATE_TIME; LOCATION) : Get sunset. GET_SUNRISE(DATE_TIME; LOCATION) : Get sunrise. GET_INFO_CONTACT() : Get info contact. Use only the APIs from the above list."
  question: "How long does it take to drive from my house to the hospital"
  answer: "GET_LOCATION(CATEGORY_LOCATION = \"the hospital\") [SEP] GET_LOCATION_HOME(CONTACT = \"my\") [SEP] GET_ESTIMATED_DURATION(SOURCE = \"GET_LOCATION_HOME\"; METHOD_TRAVEL = \"drive\"; DESTINATION = \"GET_LOCATION\")"
seq_topv2:
  instruction: "You are given a list of APIs below followed by a Query. Your task is to generate a sequence of API calls that is required to execute the Query. <api list>GET_ESTIMATED_DURATION(METHOD_TRAVEL; DESTINATION; SOURCE; DATE_TIME_DEPARTURE; PATH; DATE_TIME; PATH_AVOID; DATE_TIME_ARRIVAL; ROAD_CONDITION; OBSTRUCTION_AVOID; WAYPOINT_AVOID; WAYPOINT; ROAD_CONDITION_AVOID) : Get estimated duration. GET_LOCATION(POINT_ON_MAP; CATEGORY_LOCATION; SEARCH_RADIUS; LOCATION; LOCATION_MODIFIER; LOCATION_USER) : Get location. GET_ESTIMATED_ARRIVAL(DATE_TIME_DEPARTURE; DESTINATION; SOURCE; DATE_TIME_ARRIVAL; PATH; OBSTRUCTION_AVOID; WAYPOINT; METHOD_TRAVEL; ROAD_CONDITION_AVOID; ROAD_CONDITION; PATH_AVOID; LOCATION) : Get estimated arrival. GET_ESTIMATED_DEPARTURE(SOURCE; DESTINATION; DATE_TIME_ARRIVAL; PATH_AVOID; PATH; DATE_TIME_DEPARTURE; METHOD_TRAVEL; OBSTRUCTION_AVOID; WAYPOINT; ROAD_CONDITION; LOCATION) : Get estimated departure. GET_LOCATION_HOME(TYPE_RELATION; CONTACT; CONTACT_RELATED; LOCATION_CURRENT; LOCATION) : Get location home. GET_INFO_TRAFFIC(DESTINATION; PATH; DATE_TIME; METHOD_TRAVEL; LOCATION; SOURCE; OBSTRUCTION_AVOID; ROAD_CONDITION; WAYPOINT; PATH_AVOID; WAYPOINT_AVOID) : Get info traffic. GET_DIRECTIONS(DESTINATION; DATE_TIME_DEPARTURE; PATH; SOURCE; OBSTRUCTION_AVOID; PATH_AVOID; METHOD_TRAVEL; DATE_TIME_ARRIVAL; ROAD_CONDITION_AVOID; ROAD_CONDITION; LOCATION; WAYPOINT_AVOID; WAYPOINT; AMOUNT) : Get directions. GET_LOCATION_WORK(CONTACT; TYPE_RELATION; CONTACT_RELATED; LOCATION_WORK; LOCATION; LOCATION_CURRENT) : Get location work. GET_INFO_ROAD_CONDITION(LOCATION; ROAD_CONDITION; DESTINATION; DATE_TIME; PATH; METHOD_TRAVEL; SOURCE; DATE_TIME_DEPARTURE; DATE_TIME_ARRIVAL; WAYPOINT) : Get info road condition. GET_EVENT(ORGANIZER_EVENT; DATE_TIME; CATEGORY_EVENT; NAME_EVENT; LOCATION; ATTENDEE_EVENT; ORDINAL; ATTRIBUTE_EVENT; AMOUNT) : Get event. GET_DISTANCE(SOURCE; DESTINATION; UNIT_DISTANCE; METHOD_TRAVEL; WAYPOINT; PATH; DATE_TIME_DEPARTURE; PATH_AVOID; OBSTRUCTION_AVOID; AMOUNT) : Get distance. UPDATE_DIRECTIONS(OBSTRUCTION_AVOID; DESTINATION; PATH; SOURCE; PATH_AVOID; DATE_TIME_DEPARTURE; DATE_TIME_ARRIVAL; WAYPOINT_ADDED; WAYPOINT_AVOID) : Update directions. GET_CONTACT(TYPE_RELATION; CONTACT_RELATED; GROUP; CONTACT; LOCATION_HOME; TYPE_CONTACT; MUTUAL_EMPLOYER; AMOUNT; MUTUAL_SCHOOL; TYPE_INFO; MUTUAL_LOCATION; DATE_TIME; AGE; BIRTHDAY; DATE_TIME_BIRTHDAY; JOB) : Get contact. GET_LOCATION_SCHOOL(CONTACT; TYPE_RELATION; CONTACT_RELATED) : Get location school. GET_INFO_ROUTE(PATH; DESTINATION; WAYPOINT; SOURCE; DATE_TIME_DEPARTURE; METHOD_TRAVEL) : Get info route. GET_LOCATION_HOMETOWN(CONTACT) : Get location hometown. CREATE_ALARM(DATE_TIME; DATE_TIME_RECURRING; DURATION; ALARM_NAME; PERIOD; AMOUNT; ORDINAL; RECURRING_DATE_TIME) : Create alarm. GET_ALARM(AMOUNT; ALARM_NAME; ORDINAL; PERIOD; DATE_TIME_RECURRING; DURATION; DATE_TIME) : Get alarm. GET_TIME(DATE_TIME; TIME_ZONE) : Get time. DELETE_ALARM(ALARM_NAME; AMOUNT; ORDINAL; DATE_TIME_RECURRING; PERIOD; DURATION; DATE_TIME) : Delete alarm. SILENCE_ALARM(ALARM_NAME; ORDINAL; AMOUNT; DATE_TIME_RECURRING; PERIOD; DATE_TIME; DURATION) : Silence alarm. SNOOZE_ALARM(DATE_TIME; AMOUNT; ORDINAL; ALARM_NAME; PERIOD; DATE_TIME_RECURRING; DURATION) : Snooze alarm. UPDATE_ALARM(DATE_TIME; ALARM_NAME; ORDINAL; PERIOD; DURATION; AMOUNT; DATE_TIME_RECURRING) : Update alarm. GET_EVENT_ATTENDEE(ORGANIZER_EVENT; ATTENDEE_EVENT; DATE_TIME; CATEGORY_EVENT; AMOUNT; LOCATION) : Get event attendee. NEGATION() : Negation. GET_EVENT_ORGANIZER(LOCATION; DATE_TIME; CATEGORY_EVENT; ORGANIZER_EVENT) : Get event organizer. GET_EVENT_ATTENDEE_AMOUNT(ORDINAL; CATEGORY_EVENT; LOCATION) : Get event attendee amount. GET_MESSAGE(ORDINAL; RECIPIENT; SENDER; DATE_TIME; CONTENT_EXACT; AMOUNT; TAG_MESSAGE; TYPE_CONTENT; GROUP; RESOURCE) : Get message. SEND_MESSAGE(CONTENT_EXACT; RECIPIENT; CONTENT_EMOJI; AMOUNT; TYPE_CONTENT; GROUP; RESOURCE; DATE_TIME; ORDINAL; CONTACT; SENDER; NAME_APP) : Send message. REACT_MESSAGE(RECIPIENT; TYPE_REACTION; TYPE_CONTENT; ORDINAL; GROUP; AMOUNT; DATE_TIME; TAG_MESSAGE; RESOURCE; CONTENT_EXACT; CONTACT) : React message. CANCEL_MESSAGE(TYPE_CONTENT; AMOUNT) : Cancel message. IGNORE_MESSAGE(CONTENT_EXACT; TYPE_CONTENT) : Ignore message. SEND_TEXT_MESSAGE() : Send text message. SELECT_ITEM() : Select item. LOOP_MUSIC(MUSIC_TYPE; MUSIC_TRACK_TITLE; MUSIC_PROVIDER_NAME; MUSIC_ALBUM_TITLE; MUSIC_ARTIST_NAME; ORDINAL; MUSIC_PLAYLIST_TITLE; MUSIC_GENRE) : Loop music. REPLAY_MUSIC(MUSIC_TYPE; MUSIC_TRACK_TITLE; MUSIC_ALBUM_TITLE; MUSIC_GENRE; MUSIC_ARTIST_NAME; MUSIC_RADIO_ID; MUSIC_PROVIDER_NAME; MUSIC_PLAYLIST_TITLE; ORDINAL) : Replay music. PREVIOUS_TRACK_MUSIC(MUSIC_TYPE; ORDINAL; MUSIC_ARTIST_NAME; MUSIC_PROVIDER_NAME; MUSIC_ALBUM_TITLE) : Previous track music. PLAY_MUSIC(MUSIC_TYPE; MUSIC_PLAYLIST_TITLE; MUSIC_PROVIDER_NAME; MUSIC_GENRE; MUSIC_ARTIST_NAME; MUSIC_TRACK_TITLE; MUSIC_ALBUM_TITLE; MUSIC_RADIO_ID; ORDINAL) : Play music. PAUSE_MUSIC(MUSIC_TYPE; MUSIC_ARTIST_NAME; MUSIC_PROVIDER_NAME; MUSIC_PLAYLIST_TITLE; MUSIC_TRACK_TITLE) : Pause music. SKIP_TRACK_MUSIC(MUSIC_TYPE; ORDINAL; MUSIC_TRACK_TITLE; MUSIC_GENRE; MUSIC_ARTIST_NAME; MUSIC_PROVIDER_NAME; MUSIC_PLAYLIST_TITLE; MUSIC_ALBUM_TITLE) : Skip track music. START_SHUFFLE_MUSIC(MUSIC_ARTIST_NAME; MUSIC_TYPE; MUSIC_PLAYLIST_TITLE; MUSIC_GENRE; MUSIC_PROVIDER_NAME; MUSIC_TRACK_TITLE; MUSIC_ALBUM_TITLE; ORDINAL) : Start shuffle music. DISLIKE_MUSIC(MUSIC_TYPE; MUSIC_GENRE; MUSIC_ARTIST_NAME; MUSIC_PROVIDER_NAME; MUSIC_ALBUM_TITLE; ORDINAL) : Dislike music. REMOVE_FROM_PLAYLIST_MUSIC(MUSIC_TYPE; MUSIC_ARTIST_NAME; MUSIC_GENRE; MUSIC_PROVIDER_NAME; MUSIC_TRACK_TITLE; MUSIC_PLAYLIST_TITLE) : Remove from playlist music. LIKE_MUSIC(MUSIC_TYPE; MUSIC_PLAYLIST_TITLE; MUSIC_PROVIDER_NAME; MUSIC_ARTIST_NAME; MUSIC_GENRE; ORDINAL) : Like music. CREATE_PLAYLIST_MUSIC(MUSIC_TYPE; MUSIC_PLAYLIST_TITLE; MUSIC_PROVIDER_NAME; MUSIC_ARTIST_NAME; MUSIC_GENRE) : Create playlist music. STOP_MUSIC(MUSIC_TYPE; MUSIC_PROVIDER_NAME; MUSIC_GENRE; MUSIC_PLAYLIST_TITLE; MUSIC_ARTIST_NAME; ORDINAL) : Stop music. ADD_TO_PLAYLIST_MUSIC(MUSIC_TYPE; MUSIC_PLAYLIST_TITLE; MUSIC_ARTIST_NAME; MUSIC_TRACK_TITLE; MUSIC_ALBUM_TITLE; MUSIC_PROVIDER_NAME; MUSIC_GENRE; ORDINAL) : Add to playlist music. SET_DEFAULT_PROVIDER_MUSIC(MUSIC_PROVIDER_NAME) : Set default provider music. CREATE_REMINDER(PERSON_REMINDED; TODO; RECURRING_DATE_TIME; DATE_TIME; AMOUNT; ORDINAL) : Create reminder. GET_RECURRING_DATE_TIME(FREQUENCY; DATE_TIME; ORDINAL) : Get recurring date time. DELETE_REMINDER(DATE_TIME; TODO; PERSON_REMINDED; AMOUNT; RECURRING_DATE_TIME; ORDINAL) : Delete reminder. GET_TODO(DATE_TIME; TODO; RECURRING_DATE_TIME; ATTENDEE; AMOUNT) : Get todo. UPDATE_REMINDER(TODO; PERSON_REMINDED; RECURRING_DATE_TIME_NEW; DATE_TIME; PERSON_REMINDED_ADDED; RECURRING_DATE_TIME; AMOUNT; PERSON_REMINDED_REMOVED; ATTENDEE; ATTENDEE_ADDED; ATTENDEE_REMOVED; ORDINAL; DATE_TIME_NEW; TODO_NEW) : Update reminder. UPDATE_REMINDER_TODO(TODO_NEW; DATE_TIME; TODO; PERSON_REMINDED; RECURRING_DATE_TIME; AMOUNT; RECURRING_DATE_TIME_NEW; ATTENDEE) : Update reminder todo. UPDATE_REMINDER_DATE_TIME(DATE_TIME_NEW; DATE_TIME; TODO; PERSON_REMINDED; RECURRING_DATE_TIME; AMOUNT; ATTENDEE; RECURRING_DATE_TIME_NEW; ORDINAL; PERSON_REMINDED_ADDED) : Update reminder date time. GET_REMINDER(PERSON_REMINDED; DATE_TIME; TODO; AMOUNT; METHOD_RETRIEVAL_REMINDER; ORDINAL; RECURRING_DATE_TIME) : Get reminder. REPLY_MESSAGE(CONTENT_EXACT; RECIPIENT; SENDER) : Reply message. GET_REMINDER_DATE_TIME(PERSON_REMINDED; TODO; DATE_TIME; ORDINAL; METHOD_RETRIEVAL_REMINDER; RECURRING_DATE_TIME; AMOUNT) : Get reminder date time. GET_REMINDER_LOCATION(TODO; PERSON_REMINDED; METHOD_RETRIEVAL_REMINDER; DATE_TIME; ORDINAL; AMOUNT) : Get reminder location. GET_REMINDER_AMOUNT(PERSON_REMINDED; DATE_TIME; TODO; METHOD_RETRIEVAL_REMINDER) : Get reminder amount. HELP_REMINDER() : Help reminder. GET_BIRTHDAY() : Get birthday. CREATE_TIMER(METHOD_TIMER; DATE_TIME; TIMER_NAME; ORDINAL; AMOUNT) : Create timer. PAUSE_TIMER(METHOD_TIMER; AMOUNT; ORDINAL; TIMER_NAME; DATE_TIME) : Pause timer. GET_TIMER(TIMER_NAME; METHOD_TIMER; AMOUNT; ORDINAL; DATE_TIME) : Get timer. ADD_TIME_TIMER(METHOD_TIMER; DATE_TIME; TIMER_NAME; ORDINAL; AMOUNT) : Add time timer. RESTART_TIMER(METHOD_TIMER; TIMER_NAME; DATE_TIME; AMOUNT; ORDINAL) : Restart timer. SUBTRACT_TIME_TIMER(METHOD_TIMER; DATE_TIME; ORDINAL; TIMER_NAME) : Subtract time timer. DELETE_TIMER(METHOD_TIMER; AMOUNT; TIMER_NAME; ORDINAL; DATE_TIME) : Delete timer. RESUME_TIMER(METHOD_TIMER; DATE_TIME; TIMER_NAME; ORDINAL; AMOUNT) : Resume timer. UPDATE_TIMER(METHOD_TIMER; DATE_TIME; TIMER_NAME; ORDINAL; AMOUNT) : Update timer. GET_WEATHER(WEATHER_ATTRIBUTE; LOCATION; DATE_TIME; WEATHER_TEMPERATURE_UNIT; MEASUREMENT_UNIT) : Get weather. GET_SUNSET(DATE_TIME; LOCATION) : Get sunset. GET_SUNRISE(DATE_TIME; LOCATION) : Get sunrise. GET_INFO_CONTACT() : Get info contact. Use only the APIs from the above list."
  question: "How long does it take to drive from my house to the hospital"
  answer: "GET_LOCATION(CATEGORY_LOCATION = \"the hospital\") [SEP] GET_LOCATION_HOME(CONTACT = \"my\") [SEP] GET_ESTIMATED_DURATION(SOURCE = \"GET_LOCATION_HOME\"; METHOD_TRAVEL = \"drive\"; DESTINATION = \"GET_LOCATION\")"
seq_topv2:
  instruction: "You are given a list of APIs below followed by a Query. Your task is to generate a sequence of API calls that is required to execute the Query. <api list>GET_ESTIMATED_DURATION(METHOD_TRAVEL; DESTINATION; SOURCE; DATE_TIME_DEPARTURE; PATH; DATE_TIME; PATH_AVOID; DATE_TIME_ARRIVAL; ROAD_CONDITION; OBSTRUCTION_AVOID; WAYPOINT_AVOID; WAYPOINT; ROAD_CONDITION_AVOID) : Get estimated duration. GET_LOCATION(POINT_ON_MAP; CATEGORY_LOCATION; SEARCH_RADIUS; LOCATION; LOCATION_MODIFIER; LOCATION_USER) : Get location. GET_ESTIMATED_ARRIVAL(DATE_TIME_DEPARTURE; DESTINATION; SOURCE; DATE_TIME_ARRIVAL; PATH; OBSTRUCTION_AVOID; WAYPOINT; METHOD_TRAVEL; ROAD_CONDITION_AVOID; ROAD_CONDITION; PATH_AVOID; LOCATION) : Get estimated arrival. GET_ESTIMATED_DEPARTURE(SOURCE; DESTINATION; DATE_TIME_ARRIVAL; PATH_AVOID; PATH; DATE_TIME_DEPARTURE; METHOD_TRAVEL; OBSTRUCTION_AVOID; WAYPOINT; ROAD_CONDITION; LOCATION) : Get estimated departure. GET_LOCATION_HOME(TYPE_RELATION; CONTACT; CONTACT_RELATED; LOCATION_CURRENT; LOCATION) : Get location home. GET_INFO_TRAFFIC(DESTINATION; PATH; DATE_TIME; METHOD_TRAVEL; LOCATION; SOURCE; OBSTRUCTION_AVOID; ROAD_CONDITION; WAYPOINT; PATH_AVOID; WAYPOINT_AVOID) : Get info traffic. GET_DIRECTIONS(DESTINATION; DATE_TIME_DEPARTURE; PATH; SOURCE; OBSTRUCTION_AVOID; PATH_AVOID; METHOD_TRAVEL; DATE_TIME_ARRIVAL; ROAD_CONDITION_AVOID; ROAD_CONDITION; LOCATION; WAYPOINT_AVOID; WAYPOINT; AMOUNT) : Get directions. GET_LOCATION_WORK(CONTACT; TYPE_RELATION; CONTACT_RELATED; LOCATION_WORK; LOCATION; LOCATION_CURRENT) : Get location work. GET_INFO_ROAD_CONDITION(LOCATION; ROAD_CONDITION; DESTINATION; DATE_TIME; PATH; METHOD_TRAVEL; SOURCE; DATE_TIME_DEPARTURE; DATE_TIME_ARRIVAL; WAYPOINT) : Get info road condition. GET_EVENT(ORGANIZER_EVENT; DATE_TIME; CATEGORY_EVENT; NAME_EVENT; LOCATION; ATTENDEE_EVENT; ORDINAL; ATTRIBUTE_EVENT; AMOUNT) : Get event. GET_DISTANCE(SOURCE; DESTINATION; UNIT_DISTANCE; METHOD_TRAVEL; WAYPOINT; PATH; DATE_TIME_DEPARTURE; PATH_AVOID; OBSTRUCTION_AVOID; AMOUNT) : Get distance. UPDATE_DIRECTIONS(OBSTRUCTION_AVOID; DESTINATION; PATH; SOURCE; PATH_AVOID; DATE_TIME_DEPARTURE; DATE_TIME_ARRIVAL; WAYPOINT_ADDED; WAYPOINT_AVOID) : Update directions. GET_CONTACT(TYPE_RELATION; CONTACT_RELATED; GROUP; CONTACT; LOCATION_HOME; TYPE_CONTACT; MUTUAL_EMPLOYER; AMOUNT; MUTUAL_SCHOOL; TYPE_INFO; MUTUAL_LOCATION; DATE_TIME; AGE; BIRTHDAY; DATE_TIME_BIRTHDAY; JOB) : Get contact. GET_LOCATION_SCHOOL(CONTACT; TYPE_RELATION; CONTACT_RELATED) : Get location school. GET_INFO_ROUTE(PATH; DESTINATION; WAYPOINT; SOURCE; DATE_TIME_DEPARTURE; METHOD_TRAVEL) : Get info route. GET_LOCATION_HOMETOWN(CONTACT) : Get location hometown. CREATE_ALARM(DATE_TIME; DATE_TIME_RECURRING; DURATION; ALARM_NAME; PERIOD; AMOUNT; ORDINAL; RECURRING_DATE_TIME) : Create alarm. GET_ALARM(AMOUNT; ALARM_NAME; ORDINAL; PERIOD; DATE_TIME_RECURRING; DURATION; DATE_TIME) : Get alarm. GET_TIME(DATE_TIME; TIME_ZONE) : Get time. DELETE_ALARM(ALARM_NAME; AMOUNT; ORDINAL; DATE_TIME_RECURRING; PERIOD; DURATION; DATE_TIME) : Delete alarm. SILENCE_ALARM(ALARM_NAME; ORDINAL; AMOUNT; DATE_TIME_RECURRING; PERIOD; DATE_TIME; DURATION) : Silence alarm. SNOOZE_ALARM(DATE_TIME; AMOUNT; ORDINAL; ALARM_NAME; PERIOD; DATE_TIME_RECURRING; DURATION) : Snooze alarm. UPDATE_ALARM(DATE_TIME; ALARM_NAME; ORDINAL; PERIOD; DURATION; AMOUNT; DATE_TIME_RECURRING) : Update alarm. GET_EVENT_ATTENDEE(ORGANIZER_EVENT; ATTENDEE_EVENT; DATE_TIME; CATEGORY_EVENT; AMOUNT; LOCATION) : Get event attendee. NEGATION() : Negation. GET_EVENT_ORGANIZER(LOCATION; DATE_TIME; CATEGORY_EVENT; ORGANIZER_EVENT) : Get event organizer. GET_EVENT_ATTENDEE_AMOUNT(ORDINAL; CATEGORY_EVENT; LOCATION) : Get event attendee amount. GET_MESSAGE(ORDINAL; RECIPIENT; SENDER; DATE_TIME; CONTENT_EXACT; AMOUNT; TAG_MESSAGE; TYPE_CONTENT; GROUP; RESOURCE) : Get message. SEND_MESSAGE(CONTENT_EXACT; RECIPIENT; CONTENT_EMOJI; AMOUNT; TYPE_CONTENT; GROUP; RESOURCE; DATE_TIME; ORDINAL; CONTACT; SENDER; NAME_APP) : Send message. REACT_MESSAGE(RECIPIENT; TYPE_REACTION; TYPE_CONTENT; ORDINAL; GROUP; AMOUNT; DATE_TIME; TAG_MESSAGE; RESOURCE; CONTENT_EXACT; CONTACT) : React message. CANCEL_MESSAGE(TYPE_CONTENT; AMOUNT) : Cancel message. IGNORE_MESSAGE(CONTENT_EXACT; TYPE_CONTENT) : Ignore message. SEND_TEXT_MESSAGE() : Send text message. SELECT_ITEM() : Select item. LOOP_MUSIC(MUSIC_TYPE; MUSIC_TRACK_TITLE; MUSIC_PROVIDER_NAME; MUSIC_ALBUM_TITLE; MUSIC_ARTIST_NAME; ORDINAL; MUSIC_PLAYLIST_TITLE; MUSIC_GENRE) : Loop music. REPLAY_MUSIC(MUSIC_TYPE; MUSIC_TRACK_TITLE; MUSIC_ALBUM_TITLE; MUSIC_GENRE; MUSIC_ARTIST_NAME; MUSIC_RADIO_ID; MUSIC_PROVIDER_NAME; MUSIC_PLAYLIST_TITLE; ORDINAL) : Replay music. PREVIOUS_TRACK_MUSIC(MUSIC_TYPE; ORDINAL; MUSIC_ARTIST_NAME; MUSIC_PROVIDER_NAME; MUSIC_ALBUM_TITLE) : Previous track music. PLAY_MUSIC(MUSIC_TYPE; MUSIC_PLAYLIST_TITLE; MUSIC_PROVIDER_NAME; MUSIC_GENRE; MUSIC_ARTIST_NAME; MUSIC_TRACK_TITLE; MUSIC_ALBUM_TITLE; MUSIC_RADIO_ID; ORDINAL) : Play music. PAUSE_MUSIC(MUSIC_TYPE; MUSIC_ARTIST_NAME; MUSIC_PROVIDER_NAME; MUSIC_PLAYLIST_TITLE; MUSIC_TRACK_TITLE) : Pause music. SKIP_TRACK_MUSIC(MUSIC_TYPE; ORDINAL; MUSIC_TRACK_TITLE; MUSIC_GENRE; MUSIC_ARTIST_NAME; MUSIC_PROVIDER_NAME; MUSIC_PLAYLIST_TITLE; MUSIC_ALBUM_TITLE) : Skip track music. START_SHUFFLE_MUSIC(MUSIC_ARTIST_NAME; MUSIC_TYPE; MUSIC_PLAYLIST_TITLE; MUSIC_GENRE; MUSIC_PROVIDER_NAME; MUSIC_TRACK_TITLE; MUSIC_ALBUM_TITLE; ORDINAL) : Start shuffle music. DISLIKE_MUSIC(MUSIC_TYPE; MUSIC_GENRE; MUSIC_ARTIST_NAME; MUSIC_PROVIDER_NAME; MUSIC_ALBUM_TITLE; ORDINAL) : Dislike music. REMOVE_FROM_PLAYLIST_MUSIC(MUSIC_TYPE; MUSIC_ARTIST_NAME; MUSIC_GENRE; MUSIC_PROVIDER_NAME; MUSIC_TRACK_TITLE; MUSIC_PLAYLIST_TITLE) : Remove from playlist music. LIKE_MUSIC(MUSIC_TYPE; MUSIC_PLAYLIST_TITLE; MUSIC_PROVIDER_NAME; MUSIC_ARTIST_NAME; MUSIC_GENRE; ORDINAL) : Like music. CREATE_PLAYLIST_MUSIC(MUSIC_TYPE; MUSIC_PLAYLIST_TITLE; MUSIC_PROVIDER_NAME; MUSIC_ARTIST_NAME; MUSIC_GENRE) : Create playlist music. STOP_MUSIC(MUSIC_TYPE; MUSIC_PROVIDER_NAME; MUSIC_GENRE; MUSIC_PLAYLIST_TITLE; MUSIC_ARTIST_NAME; ORDINAL) : Stop music. ADD_TO_PLAYLIST_MUSIC(MUSIC_TYPE; MUSIC_PLAYLIST_TITLE; MUSIC_ARTIST_NAME; MUSIC_TRACK_TITLE; MUSIC_ALBUM_TITLE; MUSIC_PROVIDER_NAME; MUSIC_GENRE; ORDINAL) : Add to playlist music. SET_DEFAULT_PROVIDER_MUSIC(MUSIC_PROVIDER_NAME) : Set default provider music. CREATE_REMINDER(PERSON_REMINDED; TODO; RECURRING_DATE_TIME; DATE_TIME; AMOUNT; ORDINAL) : Create reminder. GET_RECURRING_DATE_TIME(FREQUENCY; DATE_TIME; ORDINAL) : Get recurring date time. DELETE_REMINDER(DATE_TIME; TODO; PERSON_REMINDED; AMOUNT; RECURRING_DATE_TIME; ORDINAL) : Delete reminder. GET_TODO(DATE_TIME; TODO; RECURRING_DATE_TIME; ATTENDEE; AMOUNT) : Get todo. UPDATE_REMINDER(TODO; PERSON_REMINDED; RECURRING_DATE_TIME_NEW; DATE_TIME; PERSON_REMINDED_ADDED; RECURRING_DATE_TIME; AMOUNT; PERSON_REMINDED_REMOVED; ATTENDEE; ATTENDEE_ADDED; ATTENDEE_REMOVED; ORDINAL; DATE_TIME_NEW; TODO_NEW) : Update reminder. UPDATE_REMINDER_TODO(TODO_NEW; DATE_TIME; TODO; PERSON_REMINDED; RECURRING_DATE_TIME; AMOUNT; RECURRING_DATE_TIME_NEW; ATTENDEE) : Update reminder todo. UPDATE_REMINDER_DATE_TIME(DATE_TIME_NEW; DATE_TIME; TODO; PERSON_REMINDED; RECURRING_DATE_TIME; AMOUNT; ATTENDEE; RECURRING_DATE_TIME_NEW; ORDINAL; PERSON_REMINDED_ADDED) : Update reminder date time. GET_REMINDER(PERSON_REMINDED; DATE_TIME; TODO; AMOUNT; METHOD_RETRIEVAL_REMINDER; ORDINAL; RECURRING_DATE_TIME) : Get reminder. REPLY_MESSAGE(CONTENT_EXACT; RECIPIENT; SENDER) : Reply message. GET_REMINDER_DATE_TIME(PERSON_REMINDED; TODO; DATE_TIME; ORDINAL; METHOD_RETRIEVAL_REMINDER; RECURRING_DATE_TIME; AMOUNT) : Get reminder date time. GET_REMINDER_LOCATION(TODO; PERSON_REMINDED; METHOD_RETRIEVAL_REMINDER; DATE_TIME; ORDINAL; AMOUNT) : Get reminder location. GET_REMINDER_AMOUNT(PERSON_REMINDED; DATE_TIME; TODO; METHOD_RETRIEVAL_REMINDER) : Get reminder amount. HELP_REMINDER() : Help reminder. GET_BIRTHDAY() : Get birthday. CREATE_TIMER(METHOD_TIMER; DATE_TIME; TIMER_NAME; ORDINAL; AMOUNT) : Create timer. PAUSE_TIMER(METHOD_TIMER; AMOUNT; ORDINAL; TIMER_NAME; DATE_TIME) : Pause timer. GET_TIMER(TIMER_NAME; METHOD_TIMER; AMOUNT; ORDINAL; DATE_TIME) : Get timer. ADD_TIME_TIMER(METHOD_TIMER; DATE_TIME; TIMER_NAME; ORDINAL; AMOUNT) : Add time timer. RESTART_TIMER(METHOD_TIMER; TIMER_NAME; DATE_TIME; AMOUNT; ORDINAL) : Restart timer. SUBTRACT_TIME_TIMER(METHOD_TIMER; DATE_TIME; ORDINAL; TIMER_NAME) : Subtract time timer. DELETE_TIMER(METHOD_TIMER; AMOUNT; TIMER_NAME; ORDINAL; DATE_TIME) : Delete timer. RESUME_TIMER(METHOD_TIMER; DATE_TIME; TIMER_NAME; ORDINAL; AMOUNT) : Resume timer. UPDATE_TIMER(METHOD_TIMER; DATE_TIME; TIMER_NAME; ORDINAL; AMOUNT) : Update timer. GET_WEATHER(WEATHER_ATTRIBUTE; LOCATION; DATE_TIME; WEATHER_TEMPERATURE_UNIT; MEASUREMENT_UNIT) : Get weather. GET_SUNSET(DATE_TIME; LOCATION) : Get sunset. GET_SUNRISE(DATE_TIME; LOCATION) : Get sunrise. GET_INFO_CONTACT() : Get info contact. Use only the APIs from the above list."
  question: "is there going to be heavy traffic when I leave work at 6 tonight"
  answer: "GET_LOCATION_WORK() [SEP] GET_INFO_TRAFFIC(SOURCE = \"GET_LOCATION_WORK\"; DATE_TIME = \"at 6 tonight\")"
