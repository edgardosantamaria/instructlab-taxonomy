---
created_by: thepetk
domain: devfiles
seed_examples:
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: che
        language: typescript
      attributes:
        controller.devfile.io/scc: container-build
        controller.devfile.io/storage-type: per-workspace
      projects:
      - name: che
        git:
          remotes:
            origin: https://github.com/eclipse/che.git
          checkoutFrom:
            remote: origin
            revision: main
      components:
      - name: devtools
        container:
          image: quay.io/devfile/universal-developer-image:ubi8-latest
          memoryLimit: 12G
          memoryRequest: 256Mi
          cpuLimit: '2'
          cpuRequest: 30m
          mountSources: true
          sourceMapping: /projects
          env:
          - name: KUBEDOCK_ENABLED
            value: 'true'
      commands:
      - id: update-contributing
        exec:
          commandLine: .repositories-update-contributing.sh IN_DOCKER
          component: devtools
      - id: check-contributing-is-updated
        exec:
          commandLine: .repositories-update-contributing.sh IN_DOCKER
          component: devtools
      - id: tests-update-dependencies
        exec:
          commandLine: cd tests/e2e && echo "Installing/Updating nvm" && curl -so- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh
            | bash && export NVM_DIR="$HOME/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            && nvm --version && echo "Updating nodejs" && nvm install lts/hydrogen && nvm
            alias default lts/hydrogen && nvm use default && echo "Updating npm" && npm
            install -g npm && echo "Installing test dependencies" && rm -rf package-lock.json
            && npm install && npm uninstall chromedriver && npm install chromedriver --save-dev
            && cd ../../
          component: devtools
      - id: tests-lint-project
        exec:
          commandLine: cd tests/e2e && npm run lint
          component: devtools
      - id: tests-build-tests
        exec:
          commandLine: cd tests/e2e && npm run tsc
          component: devtools
      - id: tests-happy-path-remote
        exec:
          commandLine: 'echo "TODO: Start pod in dogfooding user namespace and collect logs"'
          component: devtools
    question: "Could you generate a devfile sample with name che and typescript as programming language? The devfile should have 6 commands. 1: id update-contributing,\
      \ 2: id check-contributing-is-updated, 3: id tests-update-dependencies, 4: id tests-lint-project, 5: id tests-build-tests, 6: id tests-happy-path-remote.\
      \ The devfile should have 1 components. 1: name devtools and container image quay.io/devfile/universal-developer-image:ubi8-latest."
  - answer: |
      commands:
      - exec:
          commandLine: npm install
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: install
      - exec:
          commandLine: npm start
          component: runtime
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
      - exec:
          commandLine: npm run debug
          component: runtime
          group:
            isDefault: true
            kind: debug
          workingDir: ${PROJECT_SOURCE}
        id: debug
      - exec:
          commandLine: npm test
          component: runtime
          group:
            isDefault: true
            kind: test
          workingDir: ${PROJECT_SOURCE}
        id: test
      components:
      - container:
          args:
          - tail
          - -f
          - /dev/null
          endpoints:
          - name: http-node
            targetPort: 3000
          - exposure: none
            name: debug
            targetPort: 5858
          env:
          - name: DEBUG_PORT
            value: '5858'
          image: registry.access.redhat.com/ubi8/nodejs-16:latest
          memoryLimit: 1024Mi
          mountSources: true
        name: runtime
      metadata:
        description: Node.js 16 application
        displayName: Node.js Runtime
        icon: https://nodejs.org/static/images/logos/nodejs-new-pantone-black.svg
        language: JavaScript
        name: helloworld-example
        projectType: Node.js
        tags:
        - Node.js
        - Express
        - ubi8
        version: 2.1.1
      schemaVersion: 2.1.0
      starterProjects:
      - git:
          remotes:
            origin: https://github.com/odo-devfiles/nodejs-ex.git
        name: nodejs-starter
    question: "Could you generate a devfile sample with name helloworld-example using Node.js, Express, ubi8 and JavaScript as programming language? The\
      \ devfile should have 4 commands. 1: id install, 2: id run, 3: id debug, 4: id test. The devfile should have 1 components. 1: name runtime and container\
      \ image registry.access.redhat.com/ubi8/nodejs-16:latest."
  - answer: |
      commands:
      - exec:
          commandLine: go build ./gin-k8s-auth/examples/server/main.go
          component: runtime
          env:
          - name: GOPATH
            value: ${PROJECT_SOURCE}/.go
          - name: GOCACHE
            value: ${PROJECT_SOURCE}/.cache
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: build
      - exec:
          commandLine: ./main
          component: runtime
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
      components:
      - container:
          args:
          - tail
          - -f
          - /dev/null
          endpoints:
          - name: http-go
            targetPort: 8080
          image: registry.access.redhat.com/ubi9/go-toolset:latest
          memoryLimit: 1024Mi
          mountSources: true
        name: runtime
      metadata:
        description: Go is an open source programming language that makes it easy to build
          simple, reliable, and efficient software.
        displayName: Go Runtime
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/golang.svg
        language: Go
        name: gin-k8s-auth-example
        projectType: Go
        provider: Red Hat
        tags:
        - Go
        version: 1.0.2
      schemaVersion: 2.1.0
      starterProjects:
      - description: A Go project with a simple HTTP server
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stack-go.git
        name: go-starter
    question: "Could you generate a devfile sample with name gin-k8s-auth-example using Go and Go as programming language? The devfile should have 2 commands.\
      \ 1: id build, 2: id run. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi9/go-toolset:latest."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: python
        version: 2.0.1
        displayName: Flask
        description: "Flask is a web framework, it\u2019s a Python module that lets you\
          \ develop web applications easily. It\u2019s has a small and easy-to-extend core:\
          \ it\u2019s a microframework that doesn\u2019t include an ORM (Object Relational\
          \ Manager) or such features."
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/flask.svg
        projectType: Flask
        provider: Red Hat
        language: Python
        tags:
        - Flask
        - Python
        - Pip
      starterProjects:
      - name: flask-example
        git:
          remotes:
            origin: https://github.com/devfile-samples/python-ex
      components:
      - name: py-web
        container:
          image: registry.access.redhat.com/ubi9/python-39:latest
          args:
          - tail
          - -f
          - /dev/null
          mountSources: true
          endpoints:
          - name: http-python
            targetPort: 8080
          env:
          - name: DEBUG_PORT
            value: '5858'
      commands:
      - id: pip-install-requirements
        exec:
          commandLine: pip install -r requirements.txt
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: build
            isDefault: true
          component: py-web
      - id: run-app
        exec:
          commandLine: python app.py
          workingDir: ${PROJECT_SOURCE}
          component: py-web
          group:
            kind: run
            isDefault: true
      - id: debugpy
        exec:
          commandLine: pip install debugpy && python -m debugpy --listen 0.0.0.0:${DEBUG_PORT}
            app.py
          workingDir: ${PROJECT_SOURCE}
          component: py-web
          group:
            kind: debug
    question: "Could you generate a devfile sample with name python using Flask, Python, Pip and Python as programming language? The devfile should have\
      \ 3 commands. 1: id pip-install-requirements, 2: id run-app, 3: id debugpy. The devfile should have 1 components. 1: name py-web and container image\
      \ registry.access.redhat.com/ubi9/python-39:latest."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: nodejs
        version: 1.0.1
        displayName: Node.js Runtime
        description: Stack with Node.js 14
        tags:
        - NodeJS
        - Express
        - ubi8
        projectType: nodejs
        language: nodejs
        attributes:
          alpha.dockerimage-port: 3001
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: nodejs
        registryUrl: https://registry.devfile.io
      components:
      - name: outerloop-build
        image:
          imageName: nodejs-image:latest
          dockerfile:
            uri: Dockerfile
            buildContext: .
            rootRequired: false
      commands:
      - id: build-image
        apply:
          component: outerloop-build
      - id: deploy
        composite:
          commands:
          - build-image
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name nodejs using NodeJS, Express, ubi8 and nodejs as programming language? The devfile should have\
      \ 2 commands. 1: id build-image, 2: id deploy. The devfile should have 1 components. 1: name outerloop-build and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-springboot
        version: 1.2.1
        attributes:
          alpha.dockerimage-port: 8081
        displayName: "Spring Boot\xAE"
        description: "Spring Boot\xAE using Maven"
        icon: https://spring.io/images/projects/spring-edf462fec682b9d48cf628eaf9e19521.svg
        tags:
        - Java
        - Spring
        projectType: springboot
        language: Java
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: java-springboot
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: java-springboot-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 300Mi
          deployment/memoryRequest: 180Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-springboot using Java, Spring and Java as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: nodejs
        version: 1.0.1
        displayName: Node.js Runtime
        description: Stack with Node.js 14
        tags:
        - NodeJS
        - Express
        - ubi8
        projectType: nodejs
        language: nodejs
      starterProjects:
      - name: nodejs-starter
        git:
          remotes:
            origin: https://github.com/odo-devfiles/nodejs-ex.git
      components:
      - name: runtime
        container:
          image: registry.access.redhat.com/ubi8/nodejs-14:latest
          memoryLimit: 1024Mi
          mountSources: true
          sourceMapping: /project
          endpoints:
          - name: http-3000
            targetPort: 3000
      commands:
      - id: install
        exec:
          component: runtime
          commandLine: npm install
          workingDir: /project
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: runtime
          commandLine: npm start
          workingDir: /project
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: runtime
          commandLine: npm run debug
          workingDir: /project
          group:
            kind: debug
            isDefault: true
      - id: test
        exec:
          component: runtime
          commandLine: npm test
          workingDir: /project
          group:
            kind: test
            isDefault: true
    question: "Could you generate a devfile sample with name nodejs using NodeJS, Express, ubi8 and nodejs as programming language? The devfile should have\
      \ 4 commands. 1: id install, 2: id run, 3: id debug, 4: id test. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-14:latest."
  - answer: |
      commands:
      - exec:
          commandLine: mvn clean -Dmaven.repo.local=/home/user/.m2/repository package -Dmaven.test.skip=true
          component: tools
          group:
            isDefault: true
            kind: build
        id: build
      - exec:
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository spring-boot:run
          component: tools
          group:
            isDefault: true
            kind: run
        id: run
      - exec:
          commandLine: java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=${DEBUG_PORT},suspend=n
            -jar target/*.jar
          component: tools
          group:
            isDefault: true
            kind: debug
        id: debug
      - apply:
          component: outerloop-build
        id: build-image
      - apply:
          component: outerloop-deploy
        id: deployk8s
      - composite:
          commands:
          - build-image
          - deployk8s
          group:
            isDefault: true
            kind: deploy
        id: deploy
      components:
      - image:
          dockerfile:
            buildContext: .
            rootRequired: false
            uri: docker/Dockerfile
          imageName: java-springboot-image:latest
        name: outerloop-build
      - kubernetes:
          uri: outerloop-deploy.yaml
        name: outerloop-deploy
      - attributes:
          appstudio.has/ephermealStorageLimit: 500Mi
          appstudio.has/ephermealStorageRequest: 400Mi
          appstudio.has/replicas: 1
          appstudio.has/route: route111
          appstudio.has/storageLimit: 400Mi
          appstudio.has/storageRequest: 200Mi
        container:
          cpuLimit: '2'
          cpuRequest: 700m
          endpoints:
          - name: 8080-tcp
            targetPort: 1111
          env:
          - name: FOO
            value: foo1
          - name: BAR
            value: bar1
          image: quay.io/eclipse/che-java11-maven:7.36.0
          memoryLimit: 500Mi
          memoryRequest: 400Mi
          mountSources: true
          volumeMounts:
          - name: m2
            path: /home/user/.m2
        name: tools
      - name: m2
        volume:
          size: 3Gi
      metadata:
        attributes:
          alpha.dockerimage-port: 8081
        description: Java Spring Boot using Maven
        displayName: Java Spring Boot
        language: java
        name: java-springboot
        projectType: springboot
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        tags:
        - Java
        - Spring
        version: 1.1.0
      schemaVersion: 2.2.0
      starterProjects:
      - git:
          remotes:
            origin: https://github.com/odo-devfiles/springboot-ex.git
        name: springbootproject
    question: "Could you generate a devfile sample with name java-springboot using Java, Spring and java as programming language? The devfile should have\
      \ 6 commands. 1: id build, 2: id run, 3: id debug, 4: id build-image, 5: id deployk8s, 6: id deploy. The devfile should have 4 components. 1: name\
      \ outerloop-build and container image , 2: name outerloop-deploy and container image , 3: name tools and container image quay.io/eclipse/che-java11-maven:7.36.0,\
      \ 4: name m2 and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: devfile-registry-community
        displayName: Community Devfile Registry
        website: https://devfile.io
        provider: Red Hat
        supportUrl: https://kubernetes.slack.com/archives/C02SX9E5B55
        architectures:
        - amd64
        tags:
        - devfile
        - registry
        - http
        - oci
        - rest
        icon: https://landscape.cncf.io/logos/devfile.svg
        version: 0.0.1
        description: Workspace for the public community devfile registry content
      components:
      - name: index-image-builder
        image:
          imageName: '{{indexImageName}}:{{indexImageTag}}'
          dockerfile:
            uri: .ci/Dockerfile
            buildContext: .
      - name: index-generator
        container:
          image: registry.access.redhat.com/ubi8/go-toolset:1.19
      - name: devfile-registry-deployment
        kubernetes:
          uri: .ci/deploy/resources/deployment.yaml
      - name: devfile-registry-service
        kubernetes:
          uri: .ci/deploy/resources/service.yaml
      - name: devfile-registry-configmap
        kubernetes:
          uri: .ci/deploy/resources/configmap.yaml
      - name: devfile-registry-ingress
        kubernetes:
          uri: .ci/deploy/resources/ingress.yaml
      - name: devfile-registry-route
        openshift:
          uri: .ci/deploy/resources/route.yaml
      commands:
      - id: build-index
        apply:
          component: index-image-builder
      - id: apply-deployment
        apply:
          component: devfile-registry-deployment
      - id: apply-service
        apply:
          component: devfile-registry-service
      - id: apply-configmap
        apply:
          component: devfile-registry-configmap
      - id: apply-ingress
        apply:
          component: devfile-registry-ingress
      - id: apply-route
        apply:
          component: devfile-registry-route
      - id: build-deploy-registry-k8s
        composite:
          commands:
          - build-index
          - apply-deployment
          - apply-service
          - apply-configmap
          - apply-ingress
          group:
            isDefault: true
            kind: deploy
      - id: build-deploy-registry-openshift
        composite:
          commands:
          - build-index
          - apply-deployment
          - apply-service
          - apply-configmap
          - apply-route
          group:
            kind: deploy
      variables:
        replicas: '1'
        indexImageName: quay.io/devfile/devfile-index
        indexImageTag: next
        indexPullPolicy: Always
        indexMemoryLimit: 256Mi
        viewerImageName: quay.io/devfile/registry-viewer
        viewerImageTag: next
        viewerPullPolicy: Always
        viewerMemoryLimit: 256Mi
        ociImageName: quay.io/devfile/oci-registry
        ociImageTag: next
        ociPullPolicy: Always
        ociMemoryLimit: 256Mi
        registryName: ''
        telemetryKey: ''
        analyticsWriteKey: ''
        hostAlias: https://registry.stage.devfile.io
        hostName: ''
    question: "Could you generate a devfile sample with name devfile-registry-community using devfile, registry, http, oci, rest? The devfile should have\
      \ 8 commands. 1: id build-index, 2: id apply-deployment, 3: id apply-service, 4: id apply-configmap, 5: id apply-ingress, 6: id apply-route, 7: id\
      \ build-deploy-registry-k8s, 8: id build-deploy-registry-openshift. The devfile should have 7 components. 1: name index-image-builder and container\
      \ image , 2: name index-generator and container image registry.access.redhat.com/ubi8/go-toolset:1.19, 3: name devfile-registry-deployment and container\
      \ image , 4: name devfile-registry-service and container image , 5: name devfile-registry-configmap and container image , 6: name devfile-registry-ingress\
      \ and container image , 7: name devfile-registry-route and container image ."
  - answer: |
      commands:
      - exec:
          commandLine: GOCACHE=${PROJECT_SOURCE}/.cache go build server.go
          component: runtime
          group:
            isDefault: true
            kind: build
          hotReloadCapable: false
          workingDir: ${PROJECT_SOURCE}
        id: build
      - exec:
          commandLine: ./server
          component: runtime
          group:
            isDefault: true
            kind: run
          hotReloadCapable: false
          workingDir: ${PROJECT_SOURCE}
        id: run
      components:
      - container:
          args:
          - tail
          - -f
          - /dev/null
          dedicatedPod: false
          endpoints:
          - name: port-3000-tcp
            protocol: tcp
            secure: false
            targetPort: 3000
          image: quay.io/devfile/golang:latest
          memoryLimit: 1024Mi
          mountSources: true
        name: runtime
      - kubernetes:
          inlined: "apiVersion: binding.operators.coreos.com/v1alpha1\nkind: ServiceBinding\n\
            metadata:\n  creationTimestamp: null\n  name: todo-cluster-sample\nspec:\n \
            \ application:\n    group: apps\n    kind: Deployment\n    name: todo-app\n\
            \    version: v1\n  bindAsFiles: false\n  detectBindingResources: true\n  services:\n\
            \  - group: postgresql.k8s.enterprisedb.io\n    id: todo-cluster-sample\n  \
            \  kind: Cluster\n    name: cluster-sample\n    resource: clusters\n    version:\
            \ v1\nstatus:\n  secret: \"\"\n"
        name: todo-cluster-sample
      metadata:
        description: Go is an open source programming language that makes it easy to build
          simple, reliable, and efficient software.
        displayName: Go Runtime
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/golang.svg
        language: Go
        name: todo
        projectType: Go
        provider: Red Hat
        tags:
        - Go
        version: 1.0.2
      schemaVersion: 2.1.0
      starterProjects:
      - description: A Go project with a simple HTTP server
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stack-go.git
        name: go-starter
    question: "Could you generate a devfile sample with name todo using Go and Go as programming language? The devfile should have 2 commands. 1: id build,\
      \ 2: id run. The devfile should have 2 components. 1: name runtime and container image quay.io/devfile/golang:latest, 2: name todo-cluster-sample\
      \ and container image ."
  - answer: |
      commands:
      - exec:
          commandLine: pip install -r requirements.txt
          component: py-web
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: pip-install-requirements
      - exec:
          commandLine: python manage.py runserver 0.0.0.0:8000
          component: py-web
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run-app
      - exec:
          commandLine: python manage.py migrate
          component: py-web
          workingDir: ${PROJECT_SOURCE}
        id: run-migrations
      - exec:
          commandLine: pip install debugpy && export DEBUG_MODE=True && python -m debugpy
            --listen 0.0.0.0:${DEBUG_PORT} manage.py runserver 0.0.0.0:8000 --noreload --nothreading
          component: py-web
          group:
            kind: debug
          workingDir: ${PROJECT_SOURCE}
        id: debug
      components:
      - container:
          args:
          - tail
          - -f
          - /dev/null
          endpoints:
          - name: port-8000-tcp
            protocol: tcp
            targetPort: 8000
          env:
          - name: DEBUG_PORT
            value: '5858'
          image: registry.access.redhat.com/ubi9/python-39:1-161
          mountSources: true
        name: py-web
      metadata:
        description: Django is a high-level Python web framework that enables rapid development
          of secure and maintainable websites. Built by experienced developers, Django takes
          care of much of the hassle of web development, so you can focus on writing your
          app without needing to reinvent the wheel. It is free and open source, has a thriving
          and active community, great documentation, and many options for free and paid-for
          support.
        displayName: Django
        icon: https://static.djangoproject.com/img/logos/django-logo-positive.svg
        language: Python
        name: demosa
        projectType: Django
        provider: Red Hat
        tags:
        - Django
        - Python
        - Pip
        version: 2.1.0
      schemaVersion: 2.1.0
      starterProjects:
      - git:
          remotes:
            origin: https://github.com/devfile-samples/python-django-ex
        name: django-example
    question: "Could you generate a devfile sample with name demosa using Django, Python, Pip and Python as programming language? The devfile should have\
      \ 4 commands. 1: id pip-install-requirements, 2: id run-app, 3: id run-migrations, 4: id debug. The devfile should have 1 components. 1: name py-web\
      \ and container image registry.access.redhat.com/ubi9/python-39:1-161."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: nodejs
        version: 2.1.1
        displayName: Node.js Runtime
        description: Stack with Node.js 16
        tags:
        - Node.js
        - Express
        - ubi8
        projectType: Node.js
        language: JavaScript
        attributes:
          alpha.dockerimage-port: 3001
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: nodejs
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: nodejs-image:latest
          dockerfile:
            uri: Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 100Mi
          deployment/memoryRequest: 50Mi
          deployment/container-port: 3001
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-3001
            targetPort: 3001
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name nodejs using Node.js, Express, ubi8 and JavaScript as programming language? The devfile should\
      \ have 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image\
      \ , 2: name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: python
        projectType: Python
        displayName: Python
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/python.svg
        description: Python is an interpreted, object-oriented, high-level programming language
          with dynamic semantics. Its high-level built in data structures, combined with
          dynamic typing and dynamic binding, make it very attractive for Rapid Application
          Development, as well as for use as a scripting or glue language to connect existing
          components together.
        language: Python
        version: 1.0.1
        provider: Red Hat
        tags:
        - Python
        - Pip
        - Flask
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: python
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: python-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 50Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name python using Python, Pip, Flask and Python as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: pipeline-service-exporter
        displayName: Pipeline Service Metrics Exporter
        description: Export additional metrics around Tekton components.
        language: Go
        projectType: Go
        tags:
        - Go
        version: 1.1.0
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: go
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: pipeline-service-exporter:latest
          dockerfile:
            uri: Dockerfile
            buildContext: .
            rootRequired: false
      commands:
      - id: build-image
        apply:
          component: image-build
    question: "Could you generate a devfile sample with name pipeline-service-exporter using Go and Go as programming language? The devfile should have\
      \ 1 commands. 1: id build-image. The devfile should have 1 components. 1: name image-build and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-springboot
        version: 1.2.1
        attributes:
          alpha.dockerimage-port: 8081
        displayName: "Spring Boot\xAE"
        description: "Spring Boot\xAE using Maven"
        icon: https://spring.io/images/projects/spring-edf462fec682b9d48cf628eaf9e19521.svg
        tags:
        - Java
        - Spring
        projectType: springboot
        language: Java
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: java-springboot
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: java-springboot-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 300Mi
          deployment/memoryRequest: 180Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-springboot using Java, Spring and Java as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: python
        projectType: Python
        displayName: Python
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/python.svg
        description: Python is an interpreted, object-oriented, high-level programming language
          with dynamic semantics. Its high-level built in data structures, combined with
          dynamic typing and dynamic binding, make it very attractive for Rapid Application
          Development, as well as for use as a scripting or glue language to connect existing
          components together.
        language: Python
        version: 1.0.1
        provider: Red Hat
        tags:
        - Python
        - Pip
        - Flask
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: python
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: python-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 50Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name python using Python, Pip, Flask and Python as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: python
        projectType: Python
        displayName: Python
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/python.svg
        description: Python is an interpreted, object-oriented, high-level programming language
          with dynamic semantics. Its high-level built in data structures, combined with
          dynamic typing and dynamic binding, make it very attractive for Rapid Application
          Development, as well as for use as a scripting or glue language to connect existing
          components together.
        language: Python
        version: 1.0.1
        provider: Red Hat
        tags:
        - Python
        - Pip
        - Flask
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: python
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: python-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 50Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name python using Python, Pip, Flask and Python as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: python
        projectType: Python
        displayName: Python
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/python.svg
        description: Python is an interpreted, object-oriented, high-level programming language
          with dynamic semantics. Its high-level built in data structures, combined with
          dynamic typing and dynamic binding, make it very attractive for Rapid Application
          Development, as well as for use as a scripting or glue language to connect existing
          components together.
        language: Python
        version: 1.0.1
        provider: Red Hat
        tags:
        - Python
        - Pip
        - Flask
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: python
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: python-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 50Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name python using Python, Pip, Flask and Python as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: python
        projectType: Python
        displayName: Python
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/python.svg
        description: Python is an interpreted, object-oriented, high-level programming language
          with dynamic semantics. Its high-level built in data structures, combined with
          dynamic typing and dynamic binding, make it very attractive for Rapid Application
          Development, as well as for use as a scripting or glue language to connect existing
          components together.
        language: Python
        version: 1.0.1
        provider: Red Hat
        tags:
        - Python
        - Pip
        - Flask
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: python
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: python-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 50Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name python using Python, Pip, Flask and Python as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: python
        version: 1.0.0
        displayName: Python
        description: Python Stack with Python 3.7
        icon: https://www.python.org/static/community_logos/python-logo-generic.svg
        tags:
        - Python
        - pip
        projectType: python
        language: python
      starterProjects:
      - name: python-example
        git:
          remotes:
            origin: https://github.com/odo-devfiles/python-ex
      components:
      - name: py-web
        container:
          image: quay.io/eclipse/che-python-3.7:nightly
          mountSources: true
          endpoints:
          - name: web
            targetPort: 8808
      commands:
      - id: pip-install-requirements
        exec:
          commandLine: pip install --user -e .
          group:
            kind: build
            isDefault: true
          component: py-web
      - id: run-app
        exec:
          commandLine: python -m uvicorn src.trapi.main:app --reload
          workingDir: ${PROJECTS_ROOT}
          component: py-web
          group:
            kind: run
            isDefault: true
      - id: debugpy
        exec:
          commandLine: pip install --user debugpy && python -m debugpy --listen 0.0.0.0:${DEBUG_PORT}
            app.py
          workingDir: ${PROJECTS_ROOT}
          component: py-web
          group:
            kind: debug
    question: "Could you generate a devfile sample with name python using Python, pip and python as programming language? The devfile should have 3 commands.\
      \ 1: id pip-install-requirements, 2: id run-app, 3: id debugpy. The devfile should have 1 components. 1: name py-web and container image quay.io/eclipse/che-python-3.7:nightly."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: go
        displayName: Go Runtime
        description: Go is an open source programming language that makes it easy to build
          simple, reliable, and efficient software.
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/golang.svg
        language: Go
        projectType: Go
        tags:
        - Go
        version: 1.1.0
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: go
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: go-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 10Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
            secure: true
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name go using Go and Go as programming language? The devfile should have 3 commands. 1: id build-image,\
      \ 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2: name kubernetes-deploy and container\
      \ image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: dsrin
        projectType: dsrin
        displayName: DSRIN
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/python.svg
        description: Deployment of a Python application for Data Science Research Infrastructure
          for Neuroscience (DSRIN)
        language: Python
        version: 1.0.1
        provider: Red Hat
        tags:
        - Python
        - Pip
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: python
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: python-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 50Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name dsrin using Python, Pip and Python as programming language? The devfile should have 3 commands.\
      \ 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2: name kubernetes-deploy\
      \ and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-quarkus
        version: 1.2.1
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        icon: https://design.jboss.org/quarkus/logo/final/SVG/quarkus_icon_rgb_default.svg
        website: https://quarkus.io
        displayName: Quarkus Java
        description: Quarkus with Java
        tags:
        - Java
        - Quarkus
        projectType: Quarkus
        language: Java
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: java-quarkus
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: java-quarkus-image:latest
          dockerfile:
            uri: src/main/docker/Dockerfile.jvm.staged
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 100Mi
          deployment/container-port: 8080
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8080
            targetPort: 8080
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-quarkus using Java, Quarkus and Java as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      commands:
      - exec:
          commandLine: yarn install --frozen-lockfile
          component: builder
          group:
            isDefault: true
            kind: build
          workingDir: /project
        id: install
      - exec:
          commandLine: yarn build && yarn install --production --ignore-scripts --prefer-offline
          component: builder
          group:
            isDefault: true
            kind: run
          workingDir: /project
        id: run
      components:
      - container:
          image: node:slim
          memoryLimit: 1024Mi
          mountSources: true
          sourceMapping: /project
          volumeMounts:
          - name: dist
            path: /project/build
        name: builder
      - container:
          endpoints:
          - name: http
            targetPort: 8080
          image: nginxinc/nginx-unprivileged:alpine
          memoryLimit: 1024Mi
          mountSources: false
          volumeMounts:
          - name: dist
            path: /usr/share/nginx/html
        name: server
      - name: dist
        volume:
          size: 4Gi
      metadata:
        description: Stack with Node.js 14
        displayName: Node.js Runtime
        language: nodejs
        name: nodejs-react
        projectType: nodejs
        tags:
        - NodeJS
        - Express
        - ubi8
        version: 1.0.1
      schemaVersion: 2.0.0
      starterProjects:
      - name: nodejs-react-starter
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/schultzp2020/devfile-starter-projects.git
        subDir: nodejs-react
    question: "Could you generate a devfile sample with name nodejs-react using NodeJS, Express, ubi8 and nodejs as programming language? The devfile should\
      \ have 2 commands. 1: id install, 2: id run. The devfile should have 3 components. 1: name builder and container image node:slim, 2: name server and\
      \ container image nginxinc/nginx-unprivileged:alpine, 3: name dist and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: dotnet-basic
        displayName: Basic .NET
        version: 1.1.1
        icon: https://github.com/dotnet/brand/raw/main/logo/dotnet-logo.png
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        language: .NET
        projectType: dotnet
        tags:
        - .NET
        attributes:
          alpha.dockerimage-port: 8081
      starterProjects:
      - name: s2i-example
        git:
          checkoutFrom:
            remote: origin
            revision: dotnet-6.0
          remotes:
            origin: https://github.com/redhat-developer/s2i-dotnetcore-ex
      components:
      - name: dotnet
        container:
          image: registry.access.redhat.com/ubi8/dotnet-60:6.0
          command:
          - tail
          - -f
          - /dev/null
          mountSources: true
          env:
          - name: CONFIGURATION
            value: Debug
          - name: STARTUP_PROJECT
            value: app.csproj
          - name: ASPNETCORE_ENVIRONMENT
            value: Development
          endpoints:
          - name: http-8080
            targetPort: 8080
      - name: image-build
        image:
          imageName: dotnet-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 300Mi
          deployment/memoryRequest: 100Mi
          deployment/container-port: 8081
        kubernetes:
          uri: kubernetes/deployment.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      - name: kubernetes-service
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 200Mi
          deployment/memoryRequest: 100Mi
          deployment/container-port: 8081
        kubernetes:
          uri: kubernetes/service.yaml
      commands:
      - id: build
        exec:
          workingDir: ${PROJECT_SOURCE}
          commandLine: kill $(pidof dotnet); dotnet build -c $CONFIGURATION $STARTUP_PROJECT
            /p:UseSharedCompilation=false
          component: dotnet
          group:
            isDefault: true
            kind: build
      - id: run
        exec:
          workingDir: ${PROJECT_SOURCE}
          commandLine: dotnet run -c $CONFIGURATION --no-build --project $STARTUP_PROJECT
            --no-launch-profile
          component: dotnet
          group:
            isDefault: true
            kind: run
      - id: build-image
        apply:
          component: image-build
      - id: deploy-deployment
        apply:
          component: kubernetes-deploy
      - id: deploy-service
        apply:
          component: kubernetes-service
      - id: deploy
        composite:
          commands:
          - build-image
          - deploy-deployment
          - deploy-service
          group:
            isDefault: true
            kind: deploy
    question: "Could you generate a devfile sample with name dotnet-basic using .NET and .NET as programming language? The devfile should have 6 commands.\
      \ 1: id build, 2: id run, 3: id build-image, 4: id deploy-deployment, 5: id deploy-service, 6: id deploy. The devfile should have 4 components. 1:\
      \ name dotnet and container image registry.access.redhat.com/ubi8/dotnet-60:6.0, 2: name image-build and container image , 3: name kubernetes-deploy\
      \ and container image , 4: name kubernetes-service and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: single-nodejs-app
        projectType: container
        language: container
        attributes:
          alpha.dockerimage-port: 8080
        version: 1.0.0
        provider: Red Hat
      components:
      - name: outerloop-build
        image:
          imageName: single-nodejs-app
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      commands:
      - id: build-image
        apply:
          component: outerloop-build
    question: "Could you generate a devfile sample with name single-nodejs-app and container as programming language? The devfile should have 1 commands.\
      \ 1: id build-image. The devfile should have 1 components. 1: name outerloop-build and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: tektutor-springboot-microservice
        version: 1.0.0
        displayName: TekTutor Spring Boot Microservice
        description: A TekTutor sample Spring Boot Microservice
        tags:
        - Java
        - Spring
        - Microservice
        - OpenShift
        projectType: springboot
        language: Java
      components:
      - name: image-build
        image:
          imageName: tektutor-spring-microservice:latest
          dockerfile:
            uri: Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 3
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 180Mi
          deployment/container-port: 8080
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8080
            targetPort: 8080
            path: /
            secure: true
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name tektutor-springboot-microservice using Java, Spring, Microservice, OpenShift and Java as programming\
      \ language? The devfile should have 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build\
      \ and container image , 2: name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: nodejs
        version: 3.0.0
        displayName: Node.js Express - Trusted Application Pipeline
        description: Node.js+Express REST API with advanced continuous integration pipeline
          covering building, CVE scanning, security scanning, signatures,  attestations,
          SLSA provenance and SBOM along with Gitops-based continuous deployment
        tags:
        - Node.js
        - Express
        - ubi8
        - sscs
        - sbom
        - acs
        projectType: Node.js
        language: JavaScript
        attributes:
          alpha.dockerimage-port: 3001
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: nodejs
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: nodejs-image:latest
          dockerfile:
            uri: Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 50Mi
          deployment/container-port: 3001
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-3001
            targetPort: 3001
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name nodejs using Node.js, Express, ubi8, sscs, sbom, acs and JavaScript as programming language?\
      \ The devfile should have 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build\
      \ and container image , 2: name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: news-backend
        version: 1.1.0
        website: https://quarkus.io
        displayName: News-Backend
        description: Backend API for localnews Application
        icon: https://design.jboss.org/quarkus/logo/final/SVG/quarkus_icon_rgb_default.svg
        tags:
        - Java
        - Quarkus
        projectType: quarkus
        language: java
      starterProjects:
      - name: community
        zip:
          location: https://code.quarkus.io/d?e=io.quarkus%3Aquarkus-resteasy&e=io.quarkus%3Aquarkus-micrometer&e=io.quarkus%3Aquarkus-smallrye-health&e=io.quarkus%3Aquarkus-openshift&cn=devfile
      - name: redhat-product
        zip:
          location: https://code.quarkus.redhat.com/d?e=io.quarkus%3Aquarkus-resteasy&e=io.quarkus%3Aquarkus-smallrye-health&e=io.quarkus%3Aquarkus-openshift
      components:
      - name: tools
        container:
          image: registry.access.redhat.com/ubi8/openjdk-11
          memoryLimit: 512Mi
          mountSources: true
          volumeMounts:
          - name: m2
            path: /home/user/.m2
          env:
          - name: backend.nlp.url
            value: http://location-extractor:8081/get_loc
          - name: quarkus.datasource.jdbc.url
            value: jdbc:postgresql://postgis:5400/news?user=postgres&password=banane
      - name: m2
        volume:
          size: 3Gi
      commands:
      - id: init-compile
        exec:
          component: tools
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository compile
          workingDir: $PROJECTS_ROOT
      - id: dev-run
        exec:
          component: tools
          commandLine: mvn -Dquarkus-profile=odo-dev -Dmaven.repo.local=/home/user/.m2/repository
            quarkus:dev -Dquarkus.http.host=0.0.0.0 -Dquarkus.datasource.devservices=false
          hotReloadCapable: true
          group:
            kind: run
            isDefault: true
          workingDir: $PROJECTS_ROOT
      - id: dev-debug
        exec:
          component: tools
          commandLine: mvn -Dquarkus-profile=odo-dev -Dmaven.repo.local=/home/user/.m2/repository
            quarkus:dev -Dquarkus.http.host=0.0.0.0 -Dquarkus.datasource.jdbc.url='jdbc:postgresql://postgis:5400/news?user=postgres&password=banane'
            -Dquarkus.datasource.devservices=false -Djava.util.logging.manager=org.jboss.logmanager.LogManager
            -Ddebug=${DEBUG_PORT}
          hotReloadCapable: true
          group:
            kind: debug
            isDefault: true
          workingDir: $PROJECTS_ROOT
      events:
        postStart:
        - init-compile
    question: "Could you generate a devfile sample with name news-backend using Java, Quarkus and java as programming language? The devfile should have\
      \ 3 commands. 1: id init-compile, 2: id dev-run, 3: id dev-debug. The devfile should have 2 components. 1: name tools and container image registry.access.redhat.com/ubi8/openjdk-11,\
      \ 2: name m2 and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: binary
        projectType: binary
        language: binary
        version: 1.0.0
        provider: Red Hat
      components:
      - name: outerloop-build
        image:
          imageName: frontend:latest
          dockerfile:
            uri: frontend/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 100Mi
          deployment/memoryRequest: 50Mi
          deployment/container-port: 8080
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8080
            targetPort: 8080
            path: /
      commands:
      - id: build-image
        apply:
          component: outerloop-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name binary and binary as programming language? The devfile should have 3 commands. 1: id build-image,\
      \ 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name outerloop-build and container image , 2: name kubernetes-deploy and\
      \ container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        description: Go is an open source programming language that makes it easy to build
          simple, reliable, and efficient software.
        displayName: Go Runtime
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/golang.svg
        name: go
        projectType: Go
        provider: my
        language: Go
        tags:
        - Go
        version: 1.0.2
    question: "Could you generate a devfile sample with name go using Go and Go as programming language?"
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: nodejs-svelte
        displayName: Svelte
        description: Svelte is a radical new approach to building user interfaces. Whereas
          traditional frameworks like React and Vue do the bulk of their work in the browser,
          Svelte shifts that work into a compile step that happens when you build your app.
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/svelte.svg
        tags:
        - Node.js
        - Svelte
        projectType: Svelte
        language: TypeScript
        provider: Red Hat
        version: 1.1.0
      starterProjects:
      - name: nodejs-svelte-starter
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stack-nodejs-svelte.git
      components:
      - container:
          endpoints:
          - name: http-svelte
            targetPort: 3000
          image: registry.access.redhat.com/ubi8/nodejs-18:1-94
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
        name: runtime
      commands:
      - exec:
          commandLine: npm install
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: install
      - exec:
          commandLine: npm run dev
          component: runtime
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
    question: "Could you generate a devfile sample with name nodejs-svelte using Node.js, Svelte and TypeScript as programming language? The devfile should\
      \ have 2 commands. 1: id install, 2: id run. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-18:1-94."
  - answer: |
      commands:
      - exec:
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository compile
          component: tools
          workingDir: ${PROJECT_SOURCE}
        id: init-compile
      - exec:
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository quarkus:dev -Dquarkus.http.host=0.0.0.0
            -Djava.util.logging.manager=org.jboss.logmanager.LogManager
          component: tools
          group:
            isDefault: true
            kind: run
          hotReloadCapable: true
          workingDir: ${PROJECT_SOURCE}
        id: dev-run
      - exec:
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository quarkus:dev -Dquarkus.http.host=0.0.0.0
            -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Ddebug=${DEBUG_PORT}
          component: tools
          group:
            isDefault: true
            kind: debug
          hotReloadCapable: true
          workingDir: ${PROJECT_SOURCE}
        id: dev-debug
      components:
      - container:
          args:
          - tail
          - -f
          - /dev/null
          endpoints:
          - name: port-8079-tcp
            protocol: tcp
            targetPort: 8079
          env:
          - name: DEBUG_PORT
            value: '5858'
          image: registry.access.redhat.com/ubi8/openjdk-17:1.16-1
          memoryLimit: 1024Mi
          mountSources: true
          volumeMounts:
          - name: m2
            path: /home/user/.m2
        name: tools
      - name: m2
        volume:
          size: 3Gi
      events:
        postStart:
        - init-compile
      metadata:
        description: Java application using Quarkus and OpenJDK 17
        displayName: Quarkus Java
        icon: https://design.jboss.org/quarkus/logo/final/SVG/quarkus_icon_rgb_default.svg
        language: Java
        name: mono2microtest4
        projectType: Quarkus
        tags:
        - Java
        - Quarkus
        version: 1.3.0
        website: https://quarkus.io
      schemaVersion: 2.1.0
      starterProjects:
      - name: community
        zip:
          location: https://code.quarkus.io/d?e=io.quarkus%3Aquarkus-resteasy&e=io.quarkus%3Aquarkus-micrometer&e=io.quarkus%3Aquarkus-smallrye-health&e=io.quarkus%3Aquarkus-openshift&cn=devfile
      - name: redhat-product
        zip:
          location: https://code.quarkus.redhat.com/d?e=io.quarkus%3Aquarkus-resteasy&e=io.quarkus%3Aquarkus-smallrye-health&e=io.quarkus%3Aquarkus-openshift
    question: "Could you generate a devfile sample with name mono2microtest4 using Java, Quarkus and Java as programming language? The devfile should have\
      \ 3 commands. 1: id init-compile, 2: id dev-run, 3: id dev-debug. The devfile should have 2 components. 1: name tools and container image registry.access.redhat.com/ubi8/openjdk-17:1.16-1,\
      \ 2: name m2 and container image ."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: python-django
        version: 1.0.0
        displayName: Django
        description: Python3.7 with Django
        tags:
        - Python
        - pip
        - Django
        projectType: django
        language: python
      starterProjects:
      - name: django-example
        git:
          remotes:
            origin: https://github.com/odo-devfiles/python-django-ex
      components:
      - name: py-web
        container:
          image: quay.io/eclipse/che-python-3.7:nightly
          mountSources: true
          endpoints:
          - name: web
            targetPort: 8000
      commands:
      - id: pip-install-requirements
        exec:
          commandLine: pip install --user -r requirements.txt
          group:
            kind: build
            isDefault: true
          component: py-web
      - id: run-app
        exec:
          commandLine: python manage.py runserver 0.0.0.0:8000
          workingDir: ${PROJECTS_ROOT}
          component: py-web
          group:
            kind: run
            isDefault: true
      - id: run-migrations
        exec:
          commandLine: python manage.py migrate
          workingDir: ${PROJECTS_ROOT}
          component: py-web
      - id: debug
        exec:
          commandLine: pip install --user debugpy && export DEBUG_MODE=True && python -m
            debugpy --listen 0.0.0.0:${DEBUG_PORT} manage.py runserver 0.0.0.0:8000 --noreload
            --nothreading
          workingDir: ${PROJECTS_ROOT}
          component: py-web
          group:
            kind: debug
    question: "Could you generate a devfile sample with name python-django using Python, pip, Django and python as programming language? The devfile should\
      \ have 4 commands. 1: id pip-install-requirements, 2: id run-app, 3: id run-migrations, 4: id debug. The devfile should have 1 components. 1: name\
      \ py-web and container image quay.io/eclipse/che-python-3.7:nightly."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: thelocals
        displayName: theLocals
        description: Test descirption
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/python.svg
        projectType: Python
        provider: Red Hat
        language: Python
        tags:
        - Python
        - Pip
        - Flask
        version: 2.1.0
      starterProjects:
      - name: flask-example
        description: "Flask is a web framework, it\u2019s a Python module that lets you\
          \ develop web applications easily. It\u2019s has a small and easy-to-extend core:\
          \ it\u2019s a microframework that doesn\u2019t include an ORM (Object Relational\
          \ Manager) or such features."
        git:
          remotes:
            origin: https://github.com/devfile-samples/python-ex
      components:
      - name: py
        container:
          image: registry.access.redhat.com/ubi9/python-39:latest
          args:
          - tail
          - -f
          - /dev/null
          mountSources: true
          endpoints:
          - name: http-python
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
          env:
          - name: DEBUG_PORT
            value: '5858'
      - name: odoo
        container:
          image: odoo-image:latest
          mountSources: true
          endpoints:
          - name: http-odoo
            targetPort: 8069
          - exposure: none
            name: debug
            targetPort: 5858
          env:
          - name: DEBUG_PORT
            value: '5858'
      - name: odoo-image
        image:
          imageName: odoo-image:latest
          autoBuild: true
          dockerfile:
            uri: Dockerfile
            args:
            - MY_ENV=/home/path
            buildContext: .
            rootRequired: false
      commands:
      - id: pip-install-requirements
        exec:
          commandLine: pip install -r requirements.txt
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: build
            isDefault: true
          component: py
      - id: run-odoo
        exec:
          commandLine: odoo-bin
          workingDir: ${PROJECT_SOURCE}
          component: odoo
          group:
            kind: run
            isDefault: true
      - id: debug-py
        exec:
          commandLine: pip install debugpy && python -m debugpy --listen 0.0.0.0:${DEBUG_PORT}
            app.py
          workingDir: ${PROJECT_SOURCE}
          component: py
          group:
            kind: debug
    question: "Could you generate a devfile sample with name thelocals using Python, Pip, Flask and Python as programming language? The devfile should have\
      \ 3 commands. 1: id pip-install-requirements, 2: id run-odoo, 3: id debug-py. The devfile should have 3 components. 1: name py and container image\
      \ registry.access.redhat.com/ubi9/python-39:latest, 2: name odoo and container image odoo-image:latest, 3: name odoo-image and container image ."
  - answer: |
      commands:
      - exec:
          commandLine: kill $(pidof dotnet); dotnet build -c $CONFIGURATION $STARTUP_PROJECT
            /p:UseSharedCompilation=false
          component: dotnet
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: build
      - exec:
          commandLine: dotnet run -c $CONFIGURATION --no-build --project $STARTUP_PROJECT
            --no-launch-profile
          component: dotnet
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
      components:
      - container:
          args:
          - tail
          - -f
          - /dev/null
          endpoints:
          - name: https-dotnet60
            protocol: https
            targetPort: 8080
          env:
          - name: CONFIGURATION
            value: Debug
          - name: STARTUP_PROJECT
            value: person-service.csproj
          - name: ASPNETCORE_ENVIRONMENT
            value: Development
          - name: ASPNETCORE_URLS
            value: http://*:8080
          image: registry.access.redhat.com/ubi8/dotnet-70:latest
          mountSources: true
        name: dotnet
      - name: postgresql
        container:
          image: registry.redhat.io/rhel9/postgresql-15
          env:
          - name: POSTGRESQL_USER
            value: dotnet
          - name: POSTGRESQL_PASSWORD
            value: dotnet123
          - name: POSTGRESQL_DATABASE
            value: sampledb
          endpoints:
          - name: postgresql
            exposure: internal
            targetPort: 5432
            attributes:
              discoverable: 'true'
          memoryLimit: 512Mi
          mountSources: true
          volumeMounts:
          - name: postgresql-storage
            path: /var/lib/postgresql/data
      - name: postgresql-storage
        volume:
          size: 256Mi
      metadata:
        description: .NET 7.0 application
        displayName: .NET 7.0
        icon: https://github.com/dotnet/brand/raw/main/logo/dotnet-logo.png
        language: .NET
        name: person-service
        projectType: dotnet
        tags:
        - .NET
        - .NET 7.0
        version: 1.0.3
      schemaVersion: 2.2.0
      starterProjects:
      - git:
          checkoutFrom:
            remote: origin
            revision: dotnet-7.0
          remotes:
            origin: https://github.com/redhat-developer/s2i-dotnetcore-ex
        name: dotnet60-example
        subDir: app
    question: "Could you generate a devfile sample with name person-service using .NET, .NET 7.0 and .NET as programming language? The devfile should have\
      \ 2 commands. 1: id build, 2: id run. The devfile should have 3 components. 1: name dotnet and container image registry.access.redhat.com/ubi8/dotnet-70:latest,\
      \ 2: name postgresql and container image registry.redhat.io/rhel9/postgresql-15, 3: name postgresql-storage and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-quarkus
        version: 1.1.0
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        website: https://quarkus.io
        displayName: Quarkus Java
        description: Upstream Quarkus with Java+GraalVM
        tags:
        - Java
        - Quarkus
        projectType: quarkus
        language: java
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: java-quarkus
        registryUrl: https://registry.devfile.io
      components:
      - name: outerloop-build
        image:
          imageName: java-quarkus-image:latest
          dockerfile:
            uri: src/main/docker/Dockerfile.jvm.staged
            buildContext: .
            rootRequired: false
      - name: outerloop-deploy
        kubernetes:
          uri: outerloop-deploy.yaml
      commands:
      - id: build-image
        apply:
          component: outerloop-build
      - id: deployk8s
        apply:
          component: outerloop-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-quarkus using Java, Quarkus and java as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name outerloop-build and container image\
      \ , 2: name outerloop-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: tektutor-springboot-microservice
        version: 1.0.0
        displayName: TekTutor Spring Boot Microservice
        description: A TekTutor sample Spring Boot Microservice
        tags:
        - Java
        - Spring
        - Microservice
        - OpenShift
        projectType: springboot
        language: Java
      components:
      - name: image-build
        image:
          imageName: tektutor-spring-microservice:1.0
          dockerfile:
            uri: Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 3
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 180Mi
          deployment/container-port: 8080
        kubernetes:
          uri: deploy.yaml
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name tektutor-springboot-microservice using Java, Spring, Microservice, OpenShift and Java as programming\
      \ language? The devfile should have 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build\
      \ and container image , 2: name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: chapeaux-project
        displayName: Chapeaux Web Components
        language: javascript
      components:
      - name: deno-www
        container:
          image: quay.io/chapeaux/deno-che:latest
          env:
          - name: DENO_DIR
            value: .deno
          memoryLimit: 1G
          mountSources: true
          volumeMounts:
          - name: deno-cache
            path: .deno
          endpoints:
          - name: deno-svc
            protocol: https
            exposure: public
            targetPort: 8080
      - name: deno-cache
        volume:
          size: 1G
      commands:
      - exec:
          label: RUN the web server
          component: deno-www
          workingDir: ${PROJECTS_ROOT}/cpx-components
          commandLine: deno task serve
          group:
            kind: run
            isDefault: true
        id: serve-app
      - exec:
          label: TEST the components
          component: deno-www
          workingDir: ${PROJECTS_ROOT}/cpx-components
          commandLine: deno task test
          group:
            kind: test
        id: test-cpx
      - exec:
          label: TEST the components and WATCH for changes
          component: deno-www
          workingDir: ${PROJECTS_ROOT}/cpx-components
          commandLine: deno task test:watch
          hotReloadCapable: true
          group:
            kind: test
        id: test-watch
      - exec:
          label: BUILD changed component scripts
          component: deno-www
          workingDir: ${PROJECTS_ROOT}/cpx-components
          commandLine: deno task build
          group:
            kind: build
        id: build-scripts
      - exec:
          label: BUILD component scripts and WATCH for changes
          component: deno-www
          workingDir: ${PROJECTS_ROOT}/cpx-components
          commandLine: deno task build:watch
          hotReloadCapable: true
          group:
            kind: build
        id: build-watch
      - exec:
          label: FORMAT component scripts
          component: deno-www
          workingDir: ${PROJECTS_ROOT}/cpx-components
          commandLine: deno task format
          group:
            kind: build
        id: fmt-cpx
    question: "Could you generate a devfile sample with name chapeaux-project and javascript as programming language? The devfile should have 6 commands.\
      \ 1: id serve-app, 2: id test-cpx, 3: id test-watch, 4: id build-scripts, 5: id build-watch, 6: id fmt-cpx. The devfile should have 2 components.\
      \ 1: name deno-www and container image quay.io/chapeaux/deno-che:latest, 2: name deno-cache and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-springboot
        version: 1.2.1
        attributes:
          alpha.dockerimage-port: 8081
        displayName: "Spring Boot\xAE"
        description: "Spring Boot\xAE using Maven"
        icon: https://spring.io/images/projects/spring-edf462fec682b9d48cf628eaf9e19521.svg
        tags:
        - Java
        - Spring Boot
        projectType: springboot
        language: Java
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: java-springboot
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: java-springboot-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-only-deploy
        attributes:
          deployment/replicas: 3
          deployment/route: route333
          deployment/cpuLimit: 133m
          deployment/cpuRequest: 13m
          deployment/memoryLimit: 333Mi
          deployment/memoryRequest: 133Mi
          deployment/storageLimit: 333Mi
          deployment/storageRequest: 133Mi
          deployment/container-port: 8381
        kubernetes:
          uri: onlydeploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-only-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-springboot using Java, Spring Boot and Java as programming language? The devfile should\
      \ have 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image\
      \ , 2: name kubernetes-only-deploy and container image ."
  - answer: |
      metadata:
        description: Stack with Node.js 14
        displayName: Node.js Runtime
        language: nodejs
        name: web-nodejs
        projectType: nodejs
        tags:
        - NodeJS
        - Express
        - ubi8
        version: 1.0.1
      schemaVersion: 2.2.0
      parent:
        id: nodejs
        registryUrl: https://registry.devfile.io
      components:
      - name: outerloop-build
        image:
          imageName: nodejs-image:latest
          dockerfile:
            uri: Dockerfile
            buildContext: .
            rootRequired: false
      - name: outerloop-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 100Mi
          deployment/memoryRequest: 50Mi
          deployment/container-port: 8080
          deployment/containerENV:
          - name: OPENSHIFT_BUILD_NAMESPACE
            value: yangcao
          - name: URL_PREFIX
            value: gateway-vertx-new2
        kubernetes:
          uri: outerloop-deploy.yaml
    question: "Could you generate a devfile sample with name web-nodejs using NodeJS, Express, ubi8 and nodejs as programming language? The devfile should\
      \ have 2 components. 1: name outerloop-build and container image , 2: name outerloop-deploy and container image ."
  - answer: |
      commands:
      - exec:
          commandLine: GOCACHE=${PROJECT_SOURCE}/.cache go build main.go
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: build
      - exec:
          commandLine: ./main
          component: runtime
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
      components:
      - container:
          endpoints:
          - name: http
            targetPort: 8080
          image: golang:latest
          memoryLimit: 512Mi
          mountSources: true
          command:
          - bash
          args:
          - -c
          - tail -f /dev/null
        name: runtime
      metadata:
        description: Stack with the latest Go version
        displayName: Go Runtime
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/golang.svg
        language: go
        name: my-go-app
        projectType: go
        tags:
        - Go
        version: 1.0.0
      schemaVersion: 2.0.0
      starterProjects:
      - git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stack-go.git
        name: go-starter
    question: "Could you generate a devfile sample with name my-go-app using Go and go as programming language? The devfile should have 2 commands. 1: id\
      \ build, 2: id run. The devfile should have 1 components. 1: name runtime and container image golang:latest."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: nodejs
        version: 1.0.0
        displayName: NodeJS Runtime
        description: Stack with NodeJS 12
        tags:
        - NodeJS
        - Express
        - ubi8
        projectType: nodejs
        language: nodejs
      starterProjects:
      - name: nodejs-starter
        git:
          remotes:
            origin: https://github.com/odo-devfiles/nodejs-ex.git
      components:
      - name: runtime
        container:
          image: registry.access.redhat.com/ubi8/nodejs-14:latest
          memoryLimit: 1024Mi
          mountSources: true
          sourceMapping: /project
          endpoints:
          - name: http-3000
            targetPort: 3000
      commands:
      - id: install
        exec:
          component: runtime
          commandLine: npm install
          workingDir: /project
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: runtime
          commandLine: npm start
          workingDir: /project
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: runtime
          commandLine: npm run debug
          workingDir: /project
          group:
            kind: debug
            isDefault: true
      - id: test
        exec:
          component: runtime
          commandLine: npm test
          workingDir: /project
          group:
            kind: test
            isDefault: true
    question: "Could you generate a devfile sample with name nodejs using NodeJS, Express, ubi8 and nodejs as programming language? The devfile should have\
      \ 4 commands. 1: id install, 2: id run, 3: id debug, 4: id test. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-14:latest."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        description: Stack with the latest Go version with devfile v2.0.0 schema verison
        displayName: Go Runtime
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/golang.svg
        language: go
        name: go
        provider: Red Hat
        projectType: go
        tags:
        - Go
        version: 1.1.0
      starterProjects:
      - name: go-starter
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stack-go.git
      components:
      - container:
          endpoints:
          - name: http
            targetPort: 8080
          image: golang:latest
          memoryLimit: 1024Mi
          mountSources: true
          sourceMapping: /project
        name: runtime
      commands:
      - exec:
          commandLine: GOCACHE=/project/.cache go build main.go
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: /project
        id: build
      - exec:
          commandLine: ./main
          component: runtime
          group:
            isDefault: true
            kind: run
          workingDir: /project
        id: run
    question: "Could you generate a devfile sample with name go using Go and go as programming language? The devfile should have 2 commands. 1: id build,\
      \ 2: id run. The devfile should have 1 components. 1: name runtime and container image golang:latest."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-openliberty
        icon: https://raw.githubusercontent.com/OpenLiberty/logos/7fbb132949b9b2589e18c8d5665c1b107028a21d/logomark/svg/OL_logomark.svg
        version: 0.5.0
        description: Java application stack using Open Liberty runtime
        displayName: Open Liberty
        language: java
        projectType: docker
        provider: Red Hat
        alpha.build-dockerfile: https://github.com/OpenLiberty/application-stack/releases/download/outer-loop-0.5.1/Dockerfile
        alpha.deployment-manifest: https://github.com/OpenLiberty/application-stack/releases/download/outer-loop-0.5.1/app-deploy.yaml
      starterProjects:
      - name: user-app
        git:
          remotes:
            origin: https://github.com/OpenLiberty/application-stack-starters.git
      components:
      - name: devruntime
        container:
          image: openliberty/application-stack:0.5
          memoryLimit: 1512Mi
          mountSources: true
          endpoints:
          - exposure: public
            path: /
            name: ep1
            targetPort: 9080
            protocol: http
      commands:
      - id: build
        exec:
          component: devruntime
          commandLine: /stack/ol/scripts/devbuild-cmd.sh 21.0.0.3
          workingDir: /projects
          hotReloadCapable: true
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: devruntime
          commandLine: mvn -Dliberty.runtime.version=21.0.0.3 -Ddebug=false -DhotTests=true
            -DcompileWait=3 liberty:dev
          workingDir: /projects
          hotReloadCapable: true
          group:
            kind: run
            isDefault: true
      - id: run-test-off
        exec:
          component: devruntime
          commandLine: mvn -Dliberty.runtime.version=21.0.0.3 -Ddebug=false liberty:dev
          workingDir: /projects
          hotReloadCapable: true
          group:
            kind: run
            isDefault: false
      - id: debug
        exec:
          component: devruntime
          commandLine: mvn -Dliberty.runtime.version=21.0.0.3 -DdebugPort=${DEBUG_PORT}
            liberty:dev -Dliberty.env.WLP_DEBUG_REMOTE=y
          workingDir: /projects
          hotReloadCapable: true
          group:
            kind: debug
            isDefault: true
      - id: test
        exec:
          component: devruntime
          commandLine: mvn failsafe:integration-test failsafe:verify
          workingDir: /projects
          hotReloadCapable: true
          group:
            kind: test
            isDefault: true
    question: "Could you generate a devfile sample with name java-openliberty and java as programming language? The devfile should have 5 commands. 1: id\
      \ build, 2: id run, 3: id run-test-off, 4: id debug, 5: id test. The devfile should have 1 components. 1: name devruntime and container image openliberty/application-stack:0.5."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: python-django
        icon: https://static.djangoproject.com/img/logos/django-logo-positive.svg
        version: 1.0.0
        displayName: Django
        description: Python3.7 with Django
        tags:
        - Python
        - pip
        - Django
        projectType: django
        language: python
      starterProjects:
      - name: django-example
        git:
          remotes:
            origin: https://github.com/odo-devfiles/python-django-ex
      components:
      - name: py-web
        container:
          image: quay.io/eclipse/che-python-3.7:nightly
          mountSources: true
          endpoints:
          - name: web
            targetPort: 8000
      commands:
      - id: pip-install-requirements
        exec:
          commandLine: pip install --user -r requirements.txt
          group:
            kind: build
            isDefault: true
          component: py-web
      - id: run-app
        exec:
          commandLine: python manage.py runserver 0.0.0.0:8000
          workingDir: ${PROJECTS_ROOT}
          component: py-web
          group:
            kind: run
            isDefault: true
      - id: run-migrations
        exec:
          commandLine: python manage.py migrate
          workingDir: ${PROJECTS_ROOT}
          component: py-web
      - id: debug
        exec:
          commandLine: pip install --user debugpy && export DEBUG_MODE=True && python -m
            debugpy --listen 0.0.0.0:${DEBUG_PORT} manage.py runserver 0.0.0.0:8000 --noreload
            --nothreading
          workingDir: ${PROJECTS_ROOT}
          component: py-web
          group:
            kind: debug
    question: "Could you generate a devfile sample with name python-django using Python, pip, Django and python as programming language? The devfile should\
      \ have 4 commands. 1: id pip-install-requirements, 2: id run-app, 3: id run-migrations, 4: id debug. The devfile should have 1 components. 1: name\
      \ py-web and container image quay.io/eclipse/che-python-3.7:nightly."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        description: Stack with the latest Go version with devfile v2.1.0 schema verison
        displayName: Go Runtime
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/golang.svg
        language: go
        name: go
        provider: Red Hat
        projectType: go
        tags:
        - testtag
        version: 1.2.0
      starterProjects:
      - name: go-starter
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stack-go.git
      - name: go-starter-offline
        zip:
          location: go-starter-offline.zip
      components:
      - container:
          endpoints:
          - name: http
            targetPort: 8080
          image: golang:latest
          memoryLimit: 1024Mi
          mountSources: true
          sourceMapping: /project
        name: runtime
      commands:
      - exec:
          commandLine: GOCACHE=/project/.cache go build main.go
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: /project
        id: build
      - exec:
          commandLine: ./main
          component: runtime
          group:
            isDefault: true
            kind: run
          workingDir: /project
        id: run
    question: "Could you generate a devfile sample with name go using testtag and go as programming language? The devfile should have 2 commands. 1: id\
      \ build, 2: id run. The devfile should have 1 components. 1: name runtime and container image golang:latest."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: python
        displayName: Python
        description: Python (version 3.9.x) is an interpreted, object-oriented, high-level
          programming language with dynamic semantics. Its high-level built in data structures,
          combined with dynamic typing and dynamic binding, make it very attractive for
          Rapid Application Development, as well as for use as a scripting or glue language
          to connect existing components together.
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/python.svg
        tags:
        - Python
        - Pip
        - Flask
        projectType: Python
        language: Python
        provider: Red Hat
        version: 3.0.0
      starterProjects:
      - name: flask-example
        description: "Flask is a web framework, it\u2019s a Python module that lets you\
          \ develop web applications easily. It\u2019s has a small and easy-to-extend core:\
          \ it\u2019s a microframework that doesn\u2019t include an ORM (Object Relational\
          \ Manager) or such features."
        git:
          remotes:
            origin: https://github.com/devfile-samples/python-ex
      components:
      - name: py
        container:
          image: registry.access.redhat.com/ubi9/python-39:1-153.1699551718
          args:
          - tail
          - -f
          - /dev/null
          mountSources: true
          endpoints:
          - name: http-python
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
          env:
          - name: DEBUG_PORT
            value: '5858'
      - name: build
        image:
          imageName: python-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: deploy
        kubernetes:
          uri: kubernetes/deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
      commands:
      - id: pip-install-requirements
        exec:
          commandLine: pip install -r requirements.txt
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: build
            isDefault: true
          component: py
      - id: run-app
        exec:
          commandLine: python app.py
          workingDir: ${PROJECT_SOURCE}
          component: py
          group:
            kind: run
            isDefault: true
      - id: debug-py
        exec:
          commandLine: pip install debugpy && python -m debugpy --listen 0.0.0.0:${DEBUG_PORT}
            app.py
          workingDir: ${PROJECT_SOURCE}
          component: py
          group:
            kind: debug
      - id: build-image
        apply:
          component: build
      - id: deployk8s
        apply:
          component: deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name python using Python, Pip, Flask and Python as programming language? The devfile should have\
      \ 6 commands. 1: id pip-install-requirements, 2: id run-app, 3: id debug-py, 4: id build-image, 5: id deployk8s, 6: id deploy. The devfile should\
      \ have 3 components. 1: name py and container image registry.access.redhat.com/ubi9/python-39:1-153.1699551718, 2: name build and container image\
      \ , 3: name deploy and container image ."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: dotnet60
        displayName: .NET 6.0
        description: .NET 6.0 application
        icon: https://github.com/dotnet/brand/raw/main/logo/dotnet-logo.png
        tags:
        - .NET
        - .NET 6.0
        projectType: dotnet
        language: .NET
        version: 1.0.2
      starterProjects:
      - name: dotnet60-example
        git:
          checkoutFrom:
            remote: origin
            revision: dotnet-6.0
          remotes:
            origin: https://github.com/redhat-developer/s2i-dotnetcore-ex
        subDir: app
      components:
      - name: dotnet
        container:
          image: registry.access.redhat.com/ubi8/dotnet-60:6.0-43
          args:
          - tail
          - -f
          - /dev/null
          mountSources: true
          env:
          - name: CONFIGURATION
            value: Debug
          - name: STARTUP_PROJECT
            value: app.csproj
          - name: ASPNETCORE_ENVIRONMENT
            value: Development
          - name: ASPNETCORE_URLS
            value: http://*:8080
          endpoints:
          - name: http-dotnet60
            targetPort: 8080
      commands:
      - id: build
        exec:
          workingDir: ${PROJECT_SOURCE}
          commandLine: kill $(pidof dotnet); dotnet build -c $CONFIGURATION $STARTUP_PROJECT
            /p:UseSharedCompilation=false
          component: dotnet
          group:
            isDefault: true
            kind: build
      - id: run
        exec:
          workingDir: ${PROJECT_SOURCE}
          commandLine: dotnet run -c $CONFIGURATION --no-build --project $STARTUP_PROJECT
            --no-launch-profile
          component: dotnet
          group:
            isDefault: true
            kind: run
    question: "Could you generate a devfile sample with name dotnet60 using .NET, .NET 6.0 and .NET as programming language? The devfile should have 2 commands.\
      \ 1: id build, 2: id run. The devfile should have 1 components. 1: name dotnet and container image registry.access.redhat.com/ubi8/dotnet-60:6.0-43."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: nodejs-angular
        displayName: Angular
        description: 'Angular is a development platform, built on TypeScript. As a platform,
          Angular includes: A component-based framework for building scalable web applications
          A collection of well-integrated libraries that cover a wide variety of features,
          including routing, forms management, client-server communication, and more A suite
          of developer tools to help you develop, build, test, and update your code'
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/angular.svg
        tags:
        - Node.js
        - Angular
        projectType: Angular
        language: TypeScript
        provider: Red Hat
        version: 2.0.2
      starterProjects:
      - name: nodejs-angular-starter
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stack-nodejs-angular.git
      components:
      - container:
          endpoints:
          - name: http-angular
            targetPort: 4200
          image: registry.access.redhat.com/ubi8/nodejs-16:1-139
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
        name: runtime
      commands:
      - exec:
          commandLine: npm install
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: install
      - exec:
          commandLine: npm run start
          component: runtime
          group:
            isDefault: true
            kind: run
          hotReloadCapable: true
          workingDir: ${PROJECT_SOURCE}
        id: run
    question: "Could you generate a devfile sample with name nodejs-angular using Node.js, Angular and TypeScript as programming language? The devfile should\
      \ have 2 commands. 1: id install, 2: id run. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-16:1-139."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: go
        displayName: Go Runtime
        description: Go is an open source programming language that makes it easy to build
          simple, reliable, and efficient software.
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/golang.svg
        language: Go
        projectType: Go
        tags:
        - Go
        version: 1.1.0
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: go
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: go-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 10Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
            secure: true
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name go using Go and Go as programming language? The devfile should have 3 commands. 1: id build-image,\
      \ 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2: name kubernetes-deploy and container\
      \ image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: go
        displayName: Go Runtime
        description: Go is an open source programming language that makes it easy to build
          simple, reliable, and efficient software.
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/golang.svg
        language: Go
        projectType: Go
        tags:
        - Go
        version: 1.1.0
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: go
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: go-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 10Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
            secure: true
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name go using Go and Go as programming language? The devfile should have 3 commands. 1: id build-image,\
      \ 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2: name kubernetes-deploy and container\
      \ image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: go
        displayName: Go Runtime
        description: Go is an open source programming language that makes it easy to build
          simple, reliable, and efficient software.
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/golang.svg
        language: Go
        projectType: Go
        tags:
        - Go
        version: 1.1.0
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: go
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: go-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 10Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
            secure: true
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name go using Go and Go as programming language? The devfile should have 3 commands. 1: id build-image,\
      \ 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2: name kubernetes-deploy and container\
      \ image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: go
        displayName: Go Runtime
        description: Go is an open source programming language that makes it easy to build
          simple, reliable, and efficient software.
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/golang.svg
        language: Go
        projectType: Go
        tags:
        - Go
        version: 1.1.0
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: go
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: go-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 10Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
            secure: true
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name go using Go and Go as programming language? The devfile should have 3 commands. 1: id build-image,\
      \ 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2: name kubernetes-deploy and container\
      \ image ."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: python-django
        version: 1.0.0
        displayName: Django
        description: Python3.7 with Django
        tags:
        - Python
        - pip
        - Django
        projectType: django
        language: python
      starterProjects:
      - name: django-example
        git:
          remotes:
            origin: https://github.com/odo-devfiles/python-django-ex
      components:
      - name: py-web
        container:
          image: quay.io/eclipse/che-python-3.7:nightly
          mountSources: true
          endpoints:
          - name: web
            targetPort: 8000
      commands:
      - id: pip-install-requirements
        exec:
          commandLine: pip install --user -r requirements.txt
          group:
            kind: build
            isDefault: true
          component: py-web
      - id: run-app
        exec:
          commandLine: python manage.py runserver 0.0.0.0:8000
          workingDir: ${PROJECTS_ROOT}
          component: py-web
          group:
            kind: run
            isDefault: true
      - id: run-migrations
        exec:
          commandLine: python manage.py migrate
          workingDir: ${PROJECTS_ROOT}
          component: py-web
      - id: debug
        exec:
          commandLine: pip install --user debugpy && export DEBUG_MODE=True && python -m
            debugpy --listen 0.0.0.0:${DEBUG_PORT} manage.py runserver 0.0.0.0:8000 --noreload
            --nothreading
          workingDir: ${PROJECTS_ROOT}
          component: py-web
          group:
            kind: debug
    question: "Could you generate a devfile sample with name python-django using Python, pip, Django and python as programming language? The devfile should\
      \ have 4 commands. 1: id pip-install-requirements, 2: id run-app, 3: id run-migrations, 4: id debug. The devfile should have 1 components. 1: name\
      \ py-web and container image quay.io/eclipse/che-python-3.7:nightly."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: python-django
        version: 1.0.0
        displayName: Django
        description: Python3.7 with Django
        tags:
        - Python
        - pip
        - Django
        projectType: django
        language: python
      starterProjects:
      - name: django-example
        git:
          remotes:
            origin: https://github.com/odo-devfiles/python-django-ex
      components:
      - name: py-web
        container:
          image: quay.io/eclipse/che-python-3.7:nightly
          mountSources: true
          endpoints:
          - name: web
            targetPort: 8000
      commands:
      - id: pip-install-requirements
        exec:
          commandLine: pip install --user -r requirements.txt
          group:
            kind: build
            isDefault: true
          component: py-web
      - id: run-app
        exec:
          commandLine: python manage.py runserver 0.0.0.0:8000
          workingDir: ${PROJECTS_ROOT}
          component: py-web
          group:
            kind: run
            isDefault: true
      - id: run-migrations
        exec:
          commandLine: python manage.py migrate
          workingDir: ${PROJECTS_ROOT}
          component: py-web
      - id: debug
        exec:
          commandLine: pip install --user debugpy && export DEBUG_MODE=True && python -m
            debugpy --listen 0.0.0.0:${DEBUG_PORT} manage.py runserver 0.0.0.0:8000 --noreload
            --nothreading
          workingDir: ${PROJECTS_ROOT}
          component: py-web
          group:
            kind: debug
    question: "Could you generate a devfile sample with name python-django using Python, pip, Django and python as programming language? The devfile should\
      \ have 4 commands. 1: id pip-install-requirements, 2: id run-app, 3: id run-migrations, 4: id debug. The devfile should have 1 components. 1: name\
      \ py-web and container image quay.io/eclipse/che-python-3.7:nightly."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-springboot
        version: 1.2.1
        attributes:
          alpha.dockerimage-port: 8081
        displayName: "Spring Boot\xAE"
        description: "Spring Boot\xAE using Maven"
        icon: https://spring.io/images/projects/spring-edf462fec682b9d48cf628eaf9e19521.svg
        tags:
        - Java
        - Spring Boot
        projectType: springboot
        language: Java
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: java-springboot
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: java-springboot-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-only-deploy
        attributes:
          deployment/replicas: 3
          deployment/route: route333
          deployment/cpuLimit: 133m
          deployment/cpuRequest: 13m
          deployment/memoryLimit: 333Mi
          deployment/memoryRequest: 133Mi
          deployment/storageLimit: 333Mi
          deployment/storageRequest: 133Mi
          deployment/container-port: 8381
        kubernetes:
          uri: onlydeploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-only-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-springboot using Java, Spring Boot and Java as programming language? The devfile should\
      \ have 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image\
      \ , 2: name kubernetes-only-deploy and container image ."
  - answer: |
      commands:
      - exec:
          commandLine: GOCACHE=${PROJECT_SOURCE}/.cache go build main.go
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: build
      - exec:
          commandLine: ./main
          component: runtime
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
      components:
      - container:
          endpoints:
          - name: http
            targetPort: 8080
          image: golang:latest
          memoryLimit: 512Mi
          mountSources: true
          command:
          - bash
          args:
          - -c
          - tail -f /dev/null
        name: runtime
      metadata:
        description: Stack with the latest Go version
        displayName: Go Runtime
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/golang.svg
        language: go
        name: my-go-app
        projectType: go
        tags:
        - Go
        version: 1.0.0
      schemaVersion: 2.0.0
      starterProjects:
      - git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stack-go.git
        name: go-starter
    question: "Could you generate a devfile sample with name my-go-app using Go and go as programming language? The devfile should have 2 commands. 1: id\
      \ build, 2: id run. The devfile should have 1 components. 1: name runtime and container image golang:latest."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: python
        displayName: Python
        description: Python (version 3.9.x) is an interpreted, object-oriented, high-level
          programming language with dynamic semantics. Its high-level built in data structures,
          combined with dynamic typing and dynamic binding, make it very attractive for
          Rapid Application Development, as well as for use as a scripting or glue language
          to connect existing components together.
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/python.svg
        tags:
        - Python
        - Pip
        - Flask
        projectType: Python
        language: Python
        provider: Red Hat
        version: 3.0.0
      starterProjects:
      - name: flask-example
        description: "Flask is a web framework, it\u2019s a Python module that lets you\
          \ develop web applications easily. It\u2019s has a small and easy-to-extend core:\
          \ it\u2019s a microframework that doesn\u2019t include an ORM (Object Relational\
          \ Manager) or such features."
        git:
          remotes:
            origin: https://github.com/devfile-samples/python-ex
      components:
      - name: py
        container:
          image: registry.access.redhat.com/ubi9/python-39:1-153.1699551718
          args:
          - tail
          - -f
          - /dev/null
          mountSources: true
          endpoints:
          - name: http-python
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
          env:
          - name: DEBUG_PORT
            value: '5858'
      - name: build
        image:
          imageName: python-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: deploy
        kubernetes:
          uri: kubernetes/deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
      commands:
      - id: pip-install-requirements
        exec:
          commandLine: pip install -r requirements.txt
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: build
            isDefault: true
          component: py
      - id: run-app
        exec:
          commandLine: python app.py
          workingDir: ${PROJECT_SOURCE}
          component: py
          group:
            kind: run
            isDefault: true
      - id: debug-py
        exec:
          commandLine: pip install debugpy && python -m debugpy --listen 0.0.0.0:${DEBUG_PORT}
            app.py
          workingDir: ${PROJECT_SOURCE}
          component: py
          group:
            kind: debug
      - id: build-image
        apply:
          component: build
      - id: deployk8s
        apply:
          component: deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name python using Python, Pip, Flask and Python as programming language? The devfile should have\
      \ 6 commands. 1: id pip-install-requirements, 2: id run-app, 3: id debug-py, 4: id build-image, 5: id deployk8s, 6: id deploy. The devfile should\
      \ have 3 components. 1: name py and container image registry.access.redhat.com/ubi9/python-39:1-153.1699551718, 2: name build and container image\
      \ , 3: name deploy and container image ."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: dotnet60
        displayName: .NET 6.0
        description: .NET 6.0 application
        icon: https://github.com/dotnet/brand/raw/main/logo/dotnet-logo.png
        tags:
        - .NET
        - .NET 6.0
        projectType: dotnet
        language: .NET
        version: 1.0.2
      starterProjects:
      - name: dotnet60-example
        git:
          checkoutFrom:
            remote: origin
            revision: dotnet-6.0
          remotes:
            origin: https://github.com/redhat-developer/s2i-dotnetcore-ex
        subDir: app
      components:
      - name: dotnet
        container:
          image: registry.access.redhat.com/ubi8/dotnet-60:6.0-43
          args:
          - tail
          - -f
          - /dev/null
          mountSources: true
          env:
          - name: CONFIGURATION
            value: Debug
          - name: STARTUP_PROJECT
            value: app.csproj
          - name: ASPNETCORE_ENVIRONMENT
            value: Development
          - name: ASPNETCORE_URLS
            value: http://*:8080
          endpoints:
          - name: http-dotnet60
            targetPort: 8080
      commands:
      - id: build
        exec:
          workingDir: ${PROJECT_SOURCE}
          commandLine: kill $(pidof dotnet); dotnet build -c $CONFIGURATION $STARTUP_PROJECT
            /p:UseSharedCompilation=false
          component: dotnet
          group:
            isDefault: true
            kind: build
      - id: run
        exec:
          workingDir: ${PROJECT_SOURCE}
          commandLine: dotnet run -c $CONFIGURATION --no-build --project $STARTUP_PROJECT
            --no-launch-profile
          component: dotnet
          group:
            isDefault: true
            kind: run
    question: "Could you generate a devfile sample with name dotnet60 using .NET, .NET 6.0 and .NET as programming language? The devfile should have 2 commands.\
      \ 1: id build, 2: id run. The devfile should have 1 components. 1: name dotnet and container image registry.access.redhat.com/ubi8/dotnet-60:6.0-43."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: nodejs-angular
        displayName: Angular
        description: 'Angular is a development platform, built on TypeScript. As a platform,
          Angular includes: A component-based framework for building scalable web applications
          A collection of well-integrated libraries that cover a wide variety of features,
          including routing, forms management, client-server communication, and more A suite
          of developer tools to help you develop, build, test, and update your code'
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/angular.svg
        tags:
        - Node.js
        - Angular
        projectType: Angular
        language: TypeScript
        provider: Red Hat
        version: 2.0.2
      starterProjects:
      - name: nodejs-angular-starter
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stack-nodejs-angular.git
      components:
      - container:
          endpoints:
          - name: http-angular
            targetPort: 4200
          image: registry.access.redhat.com/ubi8/nodejs-16:1-139
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
        name: runtime
      commands:
      - exec:
          commandLine: npm install
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: install
      - exec:
          commandLine: npm run start
          component: runtime
          group:
            isDefault: true
            kind: run
          hotReloadCapable: true
          workingDir: ${PROJECT_SOURCE}
        id: run
    question: "Could you generate a devfile sample with name nodejs-angular using Node.js, Angular and TypeScript as programming language? The devfile should\
      \ have 2 commands. 1: id install, 2: id run. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-16:1-139."
  - answer: |
      commands:
      - apply:
          component: build
        id: build-image
      - apply:
          component: deploy
          group:
            isDefault: true
            kind: deploy
        id: deployk8s
      components:
      - image:
          dockerfile:
            buildContext: .
            rootRequired: false
            uri: docker/Dockerfile
          imageName: registry.ocp4.example.com:8443/redhattraining/openshift-dev-deploy-cli-weather:1.0
        name: build
      - kubernetes:
          endpoints:
          - name: http-8081
            targetPort: 8081
          uri: kubernetes/deploy.yaml
        name: deploy
      - container:
          args:
          - tail
          - -f
          - /dev/null
          endpoints:
          - name: http-python
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
          env:
          - name: DEBUG_PORT
            value: '5858'
          image: registry.ocp4.example.com:8443/ubi8/python-39:latest
          mountSources: true
        name: py
      metadata:
        description: Example deploy
        language: Python
        name: weather
        projectType: Python
        provider: Red Hat Training
        version: 3.0.0
      schemaVersion: 2.2.0
    question: "Could you generate a devfile sample with name weather and Python as programming language? The devfile should have 2 commands. 1: id build-image,\
      \ 2: id deployk8s. The devfile should have 3 components. 1: name build and container image , 2: name deploy and container image , 3: name py and container\
      \ image registry.ocp4.example.com:8443/ubi8/python-39:latest."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: rhods-quick-course
        displayName: RHOAI Quick Course
        description: RHOAI Quick Course published using Antora
        icon: https://nodejs.org/static/images/logos/nodejs-new-pantone-black.svg
        tags:
        - Node.js
        - Antora
        - ubi8
        projectType: Node.js
        language: JavaScript
        version: 2.1.1
      starterProjects:
      - name: rhods-quick-course
        git:
          remotes:
            origin: https://github.com/RedHatTraining/rhods-quick-course.git
      components:
      - name: runtime
        container:
          image: registry.access.redhat.com/ubi8/nodejs-16:latest
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
          mountSources: true
          env:
          - name: DEBUG_PORT
            value: '5858'
          endpoints:
          - name: http-node
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
      commands:
      - id: install
        exec:
          component: runtime
          commandLine: npm install
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: runtime
          commandLine: npm start
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: runtime
          commandLine: npm run debug
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: debug
            isDefault: true
      - id: test
        exec:
          component: runtime
          commandLine: npm test
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: test
            isDefault: true
    question: "Could you generate a devfile sample with name rhods-quick-course using Node.js, Antora, ubi8 and JavaScript as programming language? The\
      \ devfile should have 4 commands. 1: id install, 2: id run, 3: id debug, 4: id test. The devfile should have 1 components. 1: name runtime and container\
      \ image registry.access.redhat.com/ubi8/nodejs-16:latest."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: aws-universal
        version: 1.0.1
        displayName: AWS Universal
        description: Stack with AWS Universal Tooling
        tags:
        - aws
        - al2
        projectType: aws
      components:
      - name: aws-runtime
        container:
          image: public.ecr.aws/aws-mde/universal-image:latest
          mountSources: true
          volumeMounts:
          - name: docker-store
            path: /var/lib/docker
      - name: docker-store
        volume:
          size: 16Gi
    question: "Could you generate a devfile sample with name aws-universal using aws, al2? The devfile should have 2 components. 1: name aws-runtime and\
      \ container image public.ecr.aws/aws-mde/universal-image:latest, 2: name docker-store and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-springboot
        displayName: "Spring Boot\xAE"
        description: "Java application using Spring Boot\xAE and OpenJDK 11"
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/spring.svg
        tags:
        - Java
        - Spring
        projectType: springboot
        language: Java
        version: 2.1.0
        globalMemoryLimit: 2674Mi
      starterProjects:
      - name: springbootproject
        git:
          remotes:
            origin: https://github.com/odo-devfiles/springboot-ex.git
      components:
      - name: tools
        container:
          image: registry.access.redhat.com/ubi9/openjdk-17:1.17-1.1705573248
          command:
          - tail
          - -f
          - /dev/null
          memoryLimit: 768Mi
          mountSources: true
          endpoints:
          - name: http-springboot
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
          volumeMounts:
          - name: m2
            path: /home/user/.m2
          env:
          - name: DEBUG_PORT
            value: '5858'
      - name: m2
        volume:
          size: 3Gi
      - name: build
        image:
          imageName: java-springboot-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: deploy
        kubernetes:
          uri: kubernetes/deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
      commands:
      - id: build
        exec:
          component: tools
          workingDir: ${PROJECT_SOURCE}
          commandLine: mvn clean -Dmaven.repo.local=/home/user/.m2/repository package -Dmaven.test.skip=true
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: tools
          workingDir: ${PROJECT_SOURCE}
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository spring-boot:run
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: tools
          workingDir: ${PROJECT_SOURCE}
          commandLine: java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=${DEBUG_PORT},suspend=n
            -jar target/*.jar
          group:
            kind: debug
            isDefault: true
      - id: build-image
        apply:
          component: build
      - id: deployk8s
        apply:
          component: deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-springboot using Java, Spring and Java as programming language? The devfile should have\
      \ 6 commands. 1: id build, 2: id run, 3: id debug, 4: id build-image, 5: id deployk8s, 6: id deploy. The devfile should have 4 components. 1: name\
      \ tools and container image registry.access.redhat.com/ubi9/openjdk-17:1.17-1.1705573248, 2: name m2 and container image , 3: name build and container\
      \ image , 4: name deploy and container image ."
  - answer: |
      commands:
      - id: build-and-deploy-my-app
        composite:
          commands:
          - build-my-image
          - deploy-to-my-k8s
          group:
            kind: deploy
            isDefault: true
      - id: build-my-image
        apply:
          component: image-build
      - id: deploy-to-my-k8s
        apply:
          component: kubernetes-deploy
      - id: install-my-packages
        exec:
          commandLine: npm install
          component: msb-container
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}/src
      - id: start-my-app
        exec:
          commandLine: npm start
          component: msb-container
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}/src
      components:
      - name: image-build
        image:
          imageName: quay.io/bkthong/serviceb:odo
          dockerfile:
            uri: Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        kubernetes:
          uri: kubernetes/deploy.yaml
      - container:
          args:
          - tail
          - -f
          - /dev/null
          endpoints:
          - name: http-node
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
          env:
          - name: DEBUG_PORT
            value: '5858'
          image: registry.access.redhat.com/ubi8/nodejs-16:latest
          memoryLimit: 1024Mi
          mountSources: true
        name: msb-container
      metadata:
        description: microservice-b description
        displayName: microservice-b
        icon: https://nodejs.org/static/images/logos/nodejs-new-pantone-black.svg
        language: JavaScript
        name: msb
        projectType: Node.js
        tags:
        - Node.js
        - Express
        - ubi8
        version: 2.1.1
      schemaVersion: 2.2.0
    question: "Could you generate a devfile sample with name msb using Node.js, Express, ubi8 and JavaScript as programming language? The devfile should\
      \ have 5 commands. 1: id build-and-deploy-my-app, 2: id build-my-image, 3: id deploy-to-my-k8s, 4: id install-my-packages, 5: id start-my-app. The\
      \ devfile should have 3 components. 1: name image-build and container image , 2: name kubernetes-deploy and container image , 3: name msb-container\
      \ and container image registry.access.redhat.com/ubi8/nodejs-16:latest."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: nodejs
        version: 2.1.1
        displayName: Node.js Runtime
        description: Stack with Node.js 16
        tags:
        - Node.js
        - Express
        - ubi8
        projectType: Node.js
        language: JavaScript
        attributes:
          alpha.dockerimage-port: 8080
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: nodejs
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: single-nodejs-app
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 100Mi
          deployment/memoryRequest: 50Mi
          deployment/container-port: 3001
        kubernetes:
          uri: deployment.yaml
          endpoints:
          - name: http-8080
            targetPort: 8080
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name nodejs using Node.js, Express, ubi8 and JavaScript as programming language? The devfile should\
      \ have 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image\
      \ , 2: name kubernetes-deploy and container image ."
  - answer: |
      commands:
      - exec:
          commandLine: mvn clean -Dmaven.repo.local=/home/user/.m2/repository package -Dmaven.test.skip=true
          component: tools
          group:
            isDefault: true
            kind: build
        id: build
      - exec:
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository spring-boot:run
          component: tools
          group:
            isDefault: true
            kind: run
        id: run
      - exec:
          commandLine: java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=${DEBUG_PORT},suspend=n
            -jar target/*.jar
          component: tools
          group:
            isDefault: true
            kind: debug
        id: debug
      - apply:
          component: outerloop-build
        id: build-image
      components:
      - image:
          dockerfile:
            buildContext: .
            rootRequired: false
            uri: ../docker/Dockerfile
          imageName: java-springboot-image:latest
        name: outerloop-build
      - attributes:
          appstudio.has/ephemeralStorageLimit: 500Mi
          appstudio.has/ephemeralStorageRequest: 400Mi
          appstudio.has/replicas: 1
          appstudio.has/route: route111
          appstudio.has/storageLimit: 400Mi
          appstudio.has/storageRequest: 200Mi
        container:
          cpuLimit: '2'
          cpuRequest: 700m
          endpoints:
          - name: 8080-tcp
            targetPort: 1111
          env:
          - name: FOO
            value: foo1
          - name: BAR
            value: bar1
          image: quay.io/eclipse/che-java11-maven:7.36.0
          memoryLimit: 500Mi
          memoryRequest: 400Mi
          mountSources: true
          volumeMounts:
          - name: m2
            path: /home/user/.m2
        name: tools
      - name: m2
        volume:
          size: 3Gi
      metadata:
        attributes:
          alpha.dockerimage-port: 8081
        description: Java Spring Boot using Maven
        displayName: Java Spring Boot
        language: java
        name: java-springboot
        projectType: springboot
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        tags:
        - Java
        - Spring
        version: 1.1.0
      schemaVersion: 2.2.0
      starterProjects:
      - git:
          remotes:
            origin: https://github.com/odo-devfiles/springboot-ex.git
        name: springbootproject
    question: "Could you generate a devfile sample with name java-springboot using Java, Spring and java as programming language? The devfile should have\
      \ 4 commands. 1: id build, 2: id run, 3: id debug, 4: id build-image. The devfile should have 3 components. 1: name outerloop-build and container\
      \ image , 2: name tools and container image quay.io/eclipse/che-java11-maven:7.36.0, 3: name m2 and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-springboot
        version: 1.1.0
        attributes:
          alpha.dockerimage-port: 8081
        displayName: Java Spring Boot
        description: Java Spring Boot using Maven
        tags:
        - Java
        - Spring
        projectType: springboot
        language: java
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: java-springboot
        registryUrl: https://registry.devfile.io
      components:
      - name: outerloop-build
        image:
          imageName: java-springboot-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: outerloop-deploy
        kubernetes:
          uri: outerloop-deploy.yaml
      commands:
      - id: build-image
        apply:
          component: outerloop-build
      - id: deployk8s
        apply:
          component: outerloop-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-springboot using Java, Spring and java as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name outerloop-build and container image\
      \ , 2: name outerloop-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        attributes:
          alpha.dockerimage-port: 8081
        name: java-springboot
        version: 1.2.1
        displayName: Spring Boot Sample HTTP Service
        description: Sample service to expose a few HTTP endpoints
        icon: https://spring.io/images/projects/spring-edf462fec682b9d48cf628eaf9e19521.svg
        tags:
        - Java
        - Spring Boot
        projectType: springboot
        language: Java
      parent:
        id: java-springboot
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: java-springboot-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 3
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 500Mi
          deployment/memoryRequest: 300Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-springboot using Java, Spring Boot and Java as programming language? The devfile should\
      \ have 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image\
      \ , 2: name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: eynodejs
        version: 1.0.1
        displayName: Node.js Runtime in private registry
        description: Stack with Node.js 14
        tags:
        - NodeJS
        - Express
        - ubi8
        projectType: nodejs
        language: nodejs
      parent:
        uri: https://raw.githubusercontent.com/devfile/registry/main/stacks/nodejs/devfile.yaml
    question: "Could you generate a devfile sample with name eynodejs using NodeJS, Express, ubi8 and nodejs as programming language?"
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: nodejs
        version: 2.1.1
        displayName: Node.js Runtime
        description: Stack with Node.js 16
        tags:
        - Node.js
        - Express
        - ubi8
        projectType: Node.js
        language: JavaScript
        attributes:
          alpha.dockerimage-port: 3001
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: nodejs
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: nodejs-image:latest
          dockerfile:
            uri: Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 50Mi
          deployment/container-port: 3001
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-3001
            targetPort: 3001
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name nodejs using Node.js, Express, ubi8 and JavaScript as programming language? The devfile should\
      \ have 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image\
      \ , 2: name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: jvm-build-test-project
        version: 1.1.0
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        displayName: jvm-build-test-project
        description: jvm-build-test-project
        tags:
        - Java
        - Maven
        projectType: maven
        language: java
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: java-maven
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: jvm-build-test-project:latest
          dockerfile:
            uri: Dockerfile
            buildContext: .
            rootRequired: false
      - name: outerloop-deploy
        kubernetes:
          inlined: "kind: Deployment\napiVersion: apps/v1\nmetadata:\n  name: jvm-build-test-project\n\
            spec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: jvm-build-test-project\n\
            \  template:\n    metadata:\n      labels:\n        app: jvm-build-test-project\n\
            \    spec:\n      containers:\n        - name: jvm-build-test-project\n    \
            \      image: jvm-build-test-project:latest\n          ports:\n            -\
            \ name: http\n              containerPort: 8081\n              protocol: TCP\n\
            \          resources:\n            limits:\n              memory: \"1024Mi\"\
            \n              cpu: \"500m\""
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: outerloop-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name jvm-build-test-project using Java, Maven and java as programming language? The devfile should\
      \ have 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image\
      \ , 2: name outerloop-deploy and container image ."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: java-maven
        version: 1.1.0
        displayName: Maven Java
        description: Upstream Maven and OpenJDK 11
        tags:
        - Java
        - Maven
        projectType: maven
        language: java
      components:
      - name: tools
        container:
          image: quay.io/eclipse/che-java11-maven:nightly
          memoryLimit: 512Mi
          mountSources: true
          endpoints:
          - name: http-8080
            targetPort: 8080
          volumeMounts:
          - name: m2
            path: /home/user/.m2
      - name: m2
        volume: {}
      commands:
      - id: mvn-package
        exec:
          component: tools
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository package
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: tools
          commandLine: java -jar target/*.jar
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: tools
          commandLine: java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=${DEBUG_PORT},suspend=n
            -jar target/*.jar
          group:
            kind: debug
            isDefault: true
    question: "Could you generate a devfile sample with name java-maven using Java, Maven and java as programming language? The devfile should have 3 commands.\
      \ 1: id mvn-package, 2: id run, 3: id debug. The devfile should have 2 components. 1: name tools and container image quay.io/eclipse/che-java11-maven:nightly,\
      \ 2: name m2 and container image ."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: nodejs
        version: 1.0.1
        displayName: Next.js Runtime
        description: Stack to deploy Next.js
        icon: https://nodejs.org/static/images/logos/nodejs-new-pantone-black.svg
        tags:
        - NextJS
        projectType: nextjs
        language: nodejs
      starterProjects:
      - name: next-demo-app
        git:
          remotes:
            origin: https://github.com/cloud-native-garage-method-cohort/mario-sam-next-app.git
      components:
      - name: runtime
        container:
          image: registry.access.redhat.com/ubi8/nodejs-14:latest
          memoryLimit: 1024Mi
          mountSources: true
          sourceMapping: /project
          endpoints:
          - name: http-3000
            targetPort: 3000
      commands:
      - id: install
        exec:
          component: runtime
          commandLine: npm install
          workingDir: /project
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: runtime
          commandLine: npm run build && npm run start
          workingDir: /project
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: runtime
          commandLine: npm run debug
          workingDir: /project
          group:
            kind: debug
            isDefault: true
      - id: test
        exec:
          component: runtime
          commandLine: npm test
          workingDir: /project
          group:
            kind: test
            isDefault: true
    question: "Could you generate a devfile sample with name nodejs using NextJS and nodejs as programming language? The devfile should have 4 commands.\
      \ 1: id install, 2: id run, 3: id debug, 4: id test. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-14:latest."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-springboot
        version: 1.2.1
        attributes:
          alpha.dockerimage-port: 8081
        displayName: "Spring Boot\xAE"
        description: "Spring Boot\xAE using Maven"
        icon: https://spring.io/images/projects/spring-edf462fec682b9d48cf628eaf9e19521.svg
        tags:
        - Java
        - Spring Boot
        projectType: springboot
        language: Java
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: java-springboot
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: java-springboot-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 3
          deployment/route: route333
          deployment/cpuLimit: 133m
          deployment/cpuRequest: 13m
          deployment/memoryLimit: 333Mi
          deployment/memoryRequest: 133Mi
          deployment/storageLimit: 333Mi
          deployment/storageRequest: 133Mi
          deployment/container-port: 8381
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-springboot using Java, Spring Boot and Java as programming language? The devfile should\
      \ have 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image\
      \ , 2: name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: nodejs
        version: 2.1.0
        displayName: Node.js Runtime
        description: Stack with Node.js 16
        tags:
        - NodeJS
        - Express
        - ubi8
        projectType: nodejs
        language: nodejs
        attributes:
          alpha.dockerimage-port: 3001
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: nodejs
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: nodejs-image:latest
          dockerfile:
            uri: Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 100Mi
          deployment/memoryRequest: 50Mi
          deployment/container-port: 3001
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-3001
            targetPort: 3001
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name nodejs using NodeJS, Express, ubi8 and nodejs as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: nodejs
        version: 1.0.1
        displayName: Node.js Runtime
        description: Stack with Node.js 14
        tags:
        - NodeJS
        - Express
        - ubi8
        projectType: nodejs
        language: nodejs
        attributes:
          alpha.dockerimage-port: 3001
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: nodejs
        registryUrl: https://registry.devfile.io
      components:
      - name: outerloop-build
        image:
          imageName: nodejs-image:latest
          dockerfile:
            uri: ''
            buildContext: .
            rootRequired: false
      - name: outerloop-deploy
        kubernetes:
          uri: outerloop-deploy.yaml
      commands:
      - id: build-image
        apply:
          component: outerloop-build
      - id: deployk8s
        apply:
          component: outerloop-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name nodejs using NodeJS, Express, ubi8 and nodejs as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name outerloop-build and container image\
      \ , 2: name outerloop-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: python
        projectType: Python
        displayName: Python
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/python.svg
        description: Python is an interpreted, object-oriented, high-level programming language
          with dynamic semantics. Its high-level built in data structures, combined with
          dynamic typing and dynamic binding, make it very attractive for Rapid Application
          Development, as well as for use as a scripting or glue language to connect existing
          components together.
        language: Python
        version: 1.0.1
        provider: Red Hat
        tags:
        - Python
        - Pip
        - Flask
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: python
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: python-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 100Mi
          deployment/memoryRequest: 50Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name python using Python, Pip, Flask and Python as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-quarkus
        version: 1.1.0
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        website: https://quarkus.io
        displayName: Quarkus Java
        description: Upstream Quarkus with Java+GraalVM
        tags:
        - Java
        - Quarkus
        projectType: quarkus
        language: java
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: java-quarkus
        registryUrl: https://registry.devfile.io
      components:
      - name: outerloop-deploy
        kubernetes:
          uri: outerloop-deploy.yaml
      commands:
      - id: deployk8s
        apply:
          component: outerloop-deploy
      - id: deploy
        composite:
          commands:
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-quarkus using Java, Quarkus and java as programming language? The devfile should have\
      \ 2 commands. 1: id deployk8s, 2: id deploy. The devfile should have 1 components. 1: name outerloop-deploy and container image ."
  - answer: |
      commands:
      - exec:
          commandLine: yarn install --frozen-lockfile
          component: runtime
          group:
            isDefault: false
            kind: build
          workingDir: /project
        id: install
      - exec:
          commandLine: yarn build && yarn install --production --ignore-scripts --prefer-offline
          component: runtime
          group:
            isDefault: false
            kind: build
          workingDir: /project
        id: build
      - composite:
          commands:
          - install
          - build
          group:
            isDefault: true
            kind: build
          label: Provision Next.js Server
          parallel: false
        id: init-server
      - exec:
          commandLine: yarn start
          component: runtime
          group:
            isDefault: true
            kind: run
          workingDir: /project
        id: run
      components:
      - container:
          endpoints:
          - name: http
            targetPort: 3000
          image: node:slim
          memoryLimit: 1024Mi
          mountSources: true
          sourceMapping: /project
        name: runtime
      metadata:
        description: Stack with Node.js 14
        displayName: Node.js Runtime
        language: nodejs
        name: nodejs-nextjs
        projectType: nodejs
        tags:
        - NodeJS
        - Express
        - ubi8
        version: 1.0.1
      schemaVersion: 2.0.0
      starterProjects:
      - name: nodejs-nextjs-starter
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/schultzp2020/devfile-starter-projects.git
        subDir: nodejs-nextjs
    question: "Could you generate a devfile sample with name nodejs-nextjs using NodeJS, Express, ubi8 and nodejs as programming language? The devfile should\
      \ have 4 commands. 1: id install, 2: id build, 3: id init-server, 4: id run. The devfile should have 1 components. 1: name runtime and container image\
      \ node:slim."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: mongo-db-example
        projectType: container
        language: container
        version: 1.0.0
        provider: Red Hat
      components:
      - name: outerloop-build
        image:
          imageName: mongo-db-example:latest
          dockerfile:
            uri: Dockerfile
            buildContext: .
            rootRequired: false
      - name: outerloop-deploy
        kubernetes:
          uri: deployment.yaml
      commands:
      - id: build-image
        apply:
          component: outerloop-build
      - id: deployk8s
        apply:
          component: outerloop-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name mongo-db-example and container as programming language? The devfile should have 3 commands.\
      \ 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name outerloop-build and container image , 2: name outerloop-deploy\
      \ and container image ."
  - answer: |
      commands:
      - exec:
          commandLine: go build main.go
          component: runtime
          env:
          - name: GOPATH
            value: ${PROJECT_SOURCE}/.go
          - name: GOCACHE
            value: ${PROJECT_SOURCE}/.cache
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: build
      - exec:
          commandLine: ./main
          component: runtime
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
      - exec:
          commandLine: "GOPATH=${PROJECT_SOURCE}/.go \\\nGOCACHE=${PROJECT_SOURCE}/.cache\
            \ \\\ndlv \\\n  --listen=127.0.0.1:${DEBUG_PORT} \\\n  --only-same-user=false\
            \ \\\n  --headless=true \\\n  --api-version=2 \\\n  --accept-multiclient \\\n\
            \  debug --continue main.go\n"
          component: runtime
          group:
            isDefault: true
            kind: debug
          workingDir: ${PROJECT_SOURCE}
        id: debug
      components:
      - container:
          args:
          - tail
          - -f
          - /dev/null
          endpoints:
          - name: port-8080-tcp
            protocol: tcp
            targetPort: 8080
          env:
          - name: DEBUG_PORT
            value: '5858'
          image: registry.access.redhat.com/ubi9/go-toolset:1.19.13-4.1697647145
          memoryLimit: 1024Mi
          mountSources: true
        name: runtime
      metadata:
        description: Go (version 1.19.x) is an open source programming language that makes
          it easy to build simple, reliable, and efficient software.
        displayName: Go Runtime
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/golang.svg
        language: Go
        name: ocwebsvc
        projectType: Go
        provider: Red Hat
        tags:
        - Go
        version: 1.2.0
      schemaVersion: 2.1.0
      starterProjects:
      - description: A Go project with a simple HTTP server
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stack-go.git
        name: go-starter
    question: "Could you generate a devfile sample with name ocwebsvc using Go and Go as programming language? The devfile should have 3 commands. 1: id\
      \ build, 2: id run, 3: id debug. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi9/go-toolset:1.19.13-4.1697647145."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: spring-web-server
        version: 1.2.1
        attributes:
          alpha.dockerimage-port: 8081
        displayName: "Spring Boot\xAE"
        description: "Spring Boot\xAE using Maven"
        icon: https://raw.githubusercontent.com/xstefank/spring-web-server/main/spring.svg
        tags:
        - Java
        - Spring
        projectType: springboot
        language: Java
        provider: xstefank
      parent:
        id: java-springboot
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: java-springboot-image:latest
          dockerfile:
            uri: Dockerfile.devfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 300Mi
          deployment/memoryRequest: 180Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name spring-web-server using Java, Spring and Java as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      metadata:
        description: Quarkus with Java
        displayName: Quarkus Java
        language: java
        name: inventory-quarkus
        projectType: quarkus
        tags:
        - Java
        - Quarkus
        version: 1.1.0
        website: https://quarkus.io
      schemaVersion: 2.2.0
      parent:
        id: java-quarkus
        registryUrl: https://registry.devfile.io
      components:
      - name: outerloop-build
        image:
          imageName: inventory-quarkus-image:latest
          dockerfile:
            uri: src/main/docker/Dockerfile.jvm.staged
            buildContext: .
            rootRequired: false
      - name: outerloop-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 250Mi
          deployment/memoryRequest: 100Mi
          deployment/container-port: 8080
        kubernetes:
          uri: outerloop-deploy.yaml
    question: "Could you generate a devfile sample with name inventory-quarkus using Java, Quarkus and java as programming language? The devfile should\
      \ have 2 components. 1: name outerloop-build and container image , 2: name outerloop-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-quarkus
        version: 1.2.1
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        icon: https://design.jboss.org/quarkus/logo/final/SVG/quarkus_icon_rgb_default.svg
        website: https://quarkus.io
        displayName: Quarkus Java JKE
        description: Quarkus with Java JKE
        tags:
        - Java
        - Quarkus
        projectType: Quarkus
        language: Java
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: java-quarkus
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: java-quarkus-image:latest
          dockerfile:
            uri: src/main/docker/Dockerfile.jvm.staged
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 250Mi
          deployment/memoryRequest: 100Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-quarkus using Java, Quarkus and Java as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: nodejs
        version: 1.0.1
        displayName: Node.js Runtime
        description: Stack with Node.js 14
        tags:
        - NodeJS
        - Express
        - ubi8
        projectType: nodejs
        language: nodejs
        attributes:
          alpha.dockerimage-port: 3001
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: nodejs
        registryUrl: https://registry.devfile.io
      components:
      - name: outerloop-deploy
        kubernetes:
          uri: outerloop-deploy.yaml
      commands:
      - id: deployk8s
        apply:
          component: outerloop-deploy
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name nodejs using NodeJS, Express, ubi8 and nodejs as programming language? The devfile should have\
      \ 1 commands. 1: id deployk8s. The devfile should have 1 components. 1: name outerloop-deploy and container image ."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: python
        version: 1.0.0
        displayName: Python
        description: Python Stack with Python 3.7
        tags:
        - Python
        - pip
        projectType: python
        language: python
      starterProjects:
      - name: python-example
        git:
          remotes:
            origin: https://github.com/odo-devfiles/python-ex
      components:
      - name: py-web
        container:
          image: quay.io/eclipse/che-python-3.7:nightly
          mountSources: true
          endpoints:
          - name: web
            targetPort: 8080
      commands:
      - id: pip-install-requirements
        exec:
          commandLine: pip install --user -r requirements.txt
          group:
            kind: build
            isDefault: true
          component: py-web
      - id: run-app
        exec:
          commandLine: python app.py
          workingDir: ${PROJECTS_ROOT}
          component: py-web
          group:
            kind: run
            isDefault: true
      - id: debugpy
        exec:
          commandLine: pip install --user debugpy && python -m debugpy --listen 0.0.0.0:${DEBUG_PORT}
            app.py
          workingDir: ${PROJECTS_ROOT}
          component: py-web
          group:
            kind: debug
    question: "Could you generate a devfile sample with name python using Python, pip and python as programming language? The devfile should have 3 commands.\
      \ 1: id pip-install-requirements, 2: id run-app, 3: id debugpy. The devfile should have 1 components. 1: name py-web and container image quay.io/eclipse/che-python-3.7:nightly."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: dotnet60
        version: 1.0.0
        icon: https://github.com/dotnet/brand/raw/main/logo/dotnet-logo.png
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        language: dotnet
        projectType: dotnet
        tags:
        - dotnet
        attributes:
          alpha.dockerimage-port: 8081
      starterProjects:
      - name: s2i-example
        git:
          checkoutFrom:
            remote: origin
            revision: dotnet-6.0
          remotes:
            origin: https://github.com/redhat-developer/s2i-dotnetcore-ex
        subDir: app
      components:
      - name: dotnet
        container:
          image: registry.access.redhat.com/ubi8/dotnet-60:6.0
          command:
          - tail
          - -f
          - /dev/null
          mountSources: true
          env:
          - name: CONFIGURATION
            value: Debug
          - name: STARTUP_PROJECT
            value: Services.Echo.csproj
          - name: ASPNETCORE_ENVIRONMENT
            value: Development
          endpoints:
          - name: http-8080
            targetPort: 8080
      - name: outerloop-build
        image:
          imageName: dotnet-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: outerloop-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 300Mi
          deployment/memoryRequest: 100Mi
          deployment/container-port: 8081
        kubernetes:
          uri: kubernetes/deployment.yaml
      - name: outerloop-service
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 200Mi
          deployment/memoryRequest: 100Mi
          deployment/container-port: 8081
        kubernetes:
          uri: kubernetes/service.yaml
      commands:
      - id: build
        exec:
          workingDir: ${PROJECT_SOURCE}
          commandLine: kill $(pidof dotnet); dotnet build -c $CONFIGURATION $STARTUP_PROJECT
            /p:UseSharedCompilation=false
          component: dotnet
          group:
            isDefault: true
            kind: build
      - id: run
        exec:
          workingDir: ${PROJECT_SOURCE}
          commandLine: dotnet run -c $CONFIGURATION --no-build --project $STARTUP_PROJECT
            --no-launch-profile
          component: dotnet
          group:
            isDefault: true
            kind: run
      - id: build-image
        apply:
          component: outerloop-build
      - id: deploy-deployment
        apply:
          component: outerloop-deploy
      - id: deploy-service
        apply:
          component: outerloop-service
      - id: deploy
        composite:
          commands:
          - build-image
          - deploy-deployment
          - deploy-service
          group:
            isDefault: true
            kind: deploy
    question: "Could you generate a devfile sample with name dotnet60 using dotnet and dotnet as programming language? The devfile should have 6 commands.\
      \ 1: id build, 2: id run, 3: id build-image, 4: id deploy-deployment, 5: id deploy-service, 6: id deploy. The devfile should have 4 components. 1:\
      \ name dotnet and container image registry.access.redhat.com/ubi8/dotnet-60:6.0, 2: name outerloop-build and container image , 3: name outerloop-deploy\
      \ and container image , 4: name outerloop-service and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-springboot
        displayName: "Spring Boot\xAE"
        description: "Java application using Spring Boot\xAE and OpenJDK 11"
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/spring.svg
        tags:
        - Java
        - Spring
        projectType: springboot
        language: Java
        version: 2.1.0
        globalMemoryLimit: 2674Mi
      starterProjects:
      - name: springbootproject
        git:
          remotes:
            origin: https://github.com/odo-devfiles/springboot-ex.git
      components:
      - name: tools
        container:
          image: registry.access.redhat.com/ubi9/openjdk-17:1.17-1
          command:
          - tail
          - -f
          - /dev/null
          memoryLimit: 768Mi
          mountSources: true
          endpoints:
          - name: http-springboot
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
          volumeMounts:
          - name: m2
            path: /home/user/.m2
          env:
          - name: DEBUG_PORT
            value: '5858'
      - name: m2
        volume:
          size: 3Gi
      - name: build
        image:
          imageName: java-springboot-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: deploy
        kubernetes:
          uri: kubernetes/deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
      commands:
      - id: build
        exec:
          component: tools
          workingDir: ${PROJECT_SOURCE}
          commandLine: mvn clean -Dmaven.repo.local=/home/user/.m2/repository package -Dmaven.test.skip=true
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: tools
          workingDir: ${PROJECT_SOURCE}
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository spring-boot:run
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: tools
          workingDir: ${PROJECT_SOURCE}
          commandLine: java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=${DEBUG_PORT},suspend=n
            -jar target/*.jar
          group:
            kind: debug
            isDefault: true
      - id: build-image
        apply:
          component: build
      - id: deployk8s
        apply:
          component: deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-springboot using Java, Spring and Java as programming language? The devfile should have\
      \ 6 commands. 1: id build, 2: id run, 3: id debug, 4: id build-image, 5: id deployk8s, 6: id deploy. The devfile should have 4 components. 1: name\
      \ tools and container image registry.access.redhat.com/ubi9/openjdk-17:1.17-1, 2: name m2 and container image , 3: name build and container image\
      \ , 4: name deploy and container image ."
  - answer: |
      commands:
      - apply:
          component: build
        id: build-image
      - apply:
          component: deploy
          group:
            isDefault: true
            kind: deploy
        id: deployk8s
      components:
      - image:
          dockerfile:
            buildContext: .
            rootRequired: false
            uri: docker/Dockerfile
          imageName: registry.ocp4.example.com:8443/redhattraining/openshift-dev-deploy-cli-weather:1.0
        name: build
      - kubernetes:
          endpoints:
          - name: http-8081
            targetPort: 8081
          uri: kubernetes/deploy.yaml
        name: deploy
      - container:
          args:
          - tail
          - -f
          - /dev/null
          endpoints:
          - name: http-python
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
          env:
          - name: DEBUG_PORT
            value: '5858'
          image: registry.ocp4.example.com:8443/ubi8/python-39:latest
          mountSources: true
        name: py
      metadata:
        description: Example deploy
        language: Python
        name: weather
        projectType: Python
        provider: Red Hat Training
        version: 3.0.0
      schemaVersion: 2.2.0
    question: "Could you generate a devfile sample with name weather and Python as programming language? The devfile should have 2 commands. 1: id build-image,\
      \ 2: id deployk8s. The devfile should have 3 components. 1: name build and container image , 2: name deploy and container image , 3: name py and container\
      \ image registry.ocp4.example.com:8443/ubi8/python-39:latest."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: rhods-quick-course
        displayName: RHOAI Quick Course
        description: RHOAI Quick Course published using Antora
        icon: https://nodejs.org/static/images/logos/nodejs-new-pantone-black.svg
        tags:
        - Node.js
        - Antora
        - ubi8
        projectType: Node.js
        language: JavaScript
        version: 2.1.1
      starterProjects:
      - name: rhods-quick-course
        git:
          remotes:
            origin: https://github.com/RedHatTraining/rhods-quick-course.git
      components:
      - name: runtime
        container:
          image: registry.access.redhat.com/ubi8/nodejs-16:latest
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
          mountSources: true
          env:
          - name: DEBUG_PORT
            value: '5858'
          endpoints:
          - name: http-node
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
      commands:
      - id: install
        exec:
          component: runtime
          commandLine: npm install
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: runtime
          commandLine: npm start
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: runtime
          commandLine: npm run debug
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: debug
            isDefault: true
      - id: test
        exec:
          component: runtime
          commandLine: npm test
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: test
            isDefault: true
    question: "Could you generate a devfile sample with name rhods-quick-course using Node.js, Antora, ubi8 and JavaScript as programming language? The\
      \ devfile should have 4 commands. 1: id install, 2: id run, 3: id debug, 4: id test. The devfile should have 1 components. 1: name runtime and container\
      \ image registry.access.redhat.com/ubi8/nodejs-16:latest."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-springboot
        version: 1.1.0
        attributes:
          alpha.dockerimage-port: 8081
        displayName: Java Spring Boot
        description: Java Spring Boot using Maven
        tags:
        - Java
        - Spring
        projectType: springboot
        language: java
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: java-springboot
        registryUrl: https://registry.devfile.io
      components:
      - name: outerloop-build
        image:
          imageName: java-springboot-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: outerloop-deploy
        kubernetes:
          uri: outerloop-deploy.yaml
      commands:
      - id: build-image
        apply:
          component: outerloop-build
      - id: deployk8s
        apply:
          component: outerloop-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-springboot using Java, Spring and java as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name outerloop-build and container image\
      \ , 2: name outerloop-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-springboot
        version: 1.1.0
        attributes:
          alpha.dockerimage-port: 8081
        displayName: Java Spring Boot
        description: Java Spring Boot using Maven
        tags:
        - Java
        - Spring
        projectType: springboot
        language: java
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: java-springboot
        registryUrl: https://registry.devfile.io
      components:
      - name: outerloop-build
        image:
          imageName: java-springboot-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: outerloop-deploy
        kubernetes:
          uri: outerloop-deploy.yaml
      commands:
      - id: build-image
        apply:
          component: outerloop-build
      - id: deployk8s
        apply:
          component: outerloop-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-springboot using Java, Spring and java as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name outerloop-build and container image\
      \ , 2: name outerloop-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: python
        projectType: Python
        displayName: Python
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/python.svg
        description: Python is an interpreted, object-oriented, high-level programming language
          with dynamic semantics. Its high-level built in data structures, combined with
          dynamic typing and dynamic binding, make it very attractive for Rapid Application
          Development, as well as for use as a scripting or glue language to connect existing
          components together.
        language: Python
        version: 1.0.1
        provider: Red Hat
        tags:
        - Python
        - Pip
        - Flask
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: python
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: python-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 100Mi
          deployment/memoryRequest: 50Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name python using Python, Pip, Flask and Python as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: python
        projectType: Python
        displayName: Python
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/python.svg
        description: Python is an interpreted, object-oriented, high-level programming language
          with dynamic semantics. Its high-level built in data structures, combined with
          dynamic typing and dynamic binding, make it very attractive for Rapid Application
          Development, as well as for use as a scripting or glue language to connect existing
          components together.
        language: Python
        version: 1.0.1
        provider: Red Hat
        tags:
        - Python
        - Pip
        - Flask
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: python
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: python-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 100Mi
          deployment/memoryRequest: 50Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name python using Python, Pip, Flask and Python as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: python
        projectType: Python
        displayName: Python
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/python.svg
        description: Python is an interpreted, object-oriented, high-level programming language
          with dynamic semantics. Its high-level built in data structures, combined with
          dynamic typing and dynamic binding, make it very attractive for Rapid Application
          Development, as well as for use as a scripting or glue language to connect existing
          components together.
        language: Python
        version: 1.0.1
        provider: Red Hat
        tags:
        - Python
        - Pip
        - Flask
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: python
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: python-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 100Mi
          deployment/memoryRequest: 50Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name python using Python, Pip, Flask and Python as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: python
        projectType: Python
        displayName: Python
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/python.svg
        description: Python is an interpreted, object-oriented, high-level programming language
          with dynamic semantics. Its high-level built in data structures, combined with
          dynamic typing and dynamic binding, make it very attractive for Rapid Application
          Development, as well as for use as a scripting or glue language to connect existing
          components together.
        language: Python
        version: 1.0.1
        provider: Red Hat
        tags:
        - Python
        - Pip
        - Flask
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: python
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: python-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 100Mi
          deployment/memoryRequest: 50Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name python using Python, Pip, Flask and Python as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: python
        version: 1.0.0
        displayName: Python
        description: Python Stack with Python 3.7
        tags:
        - Python
        - pip
        projectType: python
        language: python
      starterProjects:
      - name: python-example
        git:
          remotes:
            origin: https://github.com/odo-devfiles/python-ex
      components:
      - name: py-web
        container:
          image: quay.io/eclipse/che-python-3.7:nightly
          mountSources: true
          endpoints:
          - name: web
            targetPort: 8080
      commands:
      - id: pip-install-requirements
        exec:
          commandLine: pip install --user -r requirements.txt
          group:
            kind: build
            isDefault: true
          component: py-web
      - id: run-app
        exec:
          commandLine: python app.py
          workingDir: ${PROJECTS_ROOT}
          component: py-web
          group:
            kind: run
            isDefault: true
      - id: debugpy
        exec:
          commandLine: pip install --user debugpy && python -m debugpy --listen 0.0.0.0:${DEBUG_PORT}
            app.py
          workingDir: ${PROJECTS_ROOT}
          component: py-web
          group:
            kind: debug
    question: "Could you generate a devfile sample with name python using Python, pip and python as programming language? The devfile should have 3 commands.\
      \ 1: id pip-install-requirements, 2: id run-app, 3: id debugpy. The devfile should have 1 components. 1: name py-web and container image quay.io/eclipse/che-python-3.7:nightly."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: python
        version: 1.0.0
        displayName: Python
        description: Python Stack with Python 3.7
        tags:
        - Python
        - pip
        projectType: python
        language: python
      starterProjects:
      - name: python-example
        git:
          remotes:
            origin: https://github.com/odo-devfiles/python-ex
      components:
      - name: py-web
        container:
          image: quay.io/eclipse/che-python-3.7:nightly
          mountSources: true
          endpoints:
          - name: web
            targetPort: 8080
      commands:
      - id: pip-install-requirements
        exec:
          commandLine: pip install --user -r requirements.txt
          group:
            kind: build
            isDefault: true
          component: py-web
      - id: run-app
        exec:
          commandLine: python app.py
          workingDir: ${PROJECTS_ROOT}
          component: py-web
          group:
            kind: run
            isDefault: true
      - id: debugpy
        exec:
          commandLine: pip install --user debugpy && python -m debugpy --listen 0.0.0.0:${DEBUG_PORT}
            app.py
          workingDir: ${PROJECTS_ROOT}
          component: py-web
          group:
            kind: debug
    question: "Could you generate a devfile sample with name python using Python, pip and python as programming language? The devfile should have 3 commands.\
      \ 1: id pip-install-requirements, 2: id run-app, 3: id debugpy. The devfile should have 1 components. 1: name py-web and container image quay.io/eclipse/che-python-3.7:nightly."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-springboot
        displayName: "Spring Boot\xAE"
        description: "Java application using Spring Boot\xAE and OpenJDK 11"
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/spring.svg
        tags:
        - Java
        - Spring
        projectType: springboot
        language: Java
        version: 2.1.0
        globalMemoryLimit: 2674Mi
      starterProjects:
      - name: springbootproject
        git:
          remotes:
            origin: https://github.com/odo-devfiles/springboot-ex.git
      components:
      - name: tools
        container:
          image: registry.access.redhat.com/ubi9/openjdk-17:1.17-1
          command:
          - tail
          - -f
          - /dev/null
          memoryLimit: 768Mi
          mountSources: true
          endpoints:
          - name: http-springboot
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
          volumeMounts:
          - name: m2
            path: /home/user/.m2
          env:
          - name: DEBUG_PORT
            value: '5858'
      - name: m2
        volume:
          size: 3Gi
      - name: build
        image:
          imageName: java-springboot-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: deploy
        kubernetes:
          uri: kubernetes/deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
      commands:
      - id: build
        exec:
          component: tools
          workingDir: ${PROJECT_SOURCE}
          commandLine: mvn clean -Dmaven.repo.local=/home/user/.m2/repository package -Dmaven.test.skip=true
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: tools
          workingDir: ${PROJECT_SOURCE}
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository spring-boot:run
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: tools
          workingDir: ${PROJECT_SOURCE}
          commandLine: java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=${DEBUG_PORT},suspend=n
            -jar target/*.jar
          group:
            kind: debug
            isDefault: true
      - id: build-image
        apply:
          component: build
      - id: deployk8s
        apply:
          component: deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-springboot using Java, Spring and Java as programming language? The devfile should have\
      \ 6 commands. 1: id build, 2: id run, 3: id debug, 4: id build-image, 5: id deployk8s, 6: id deploy. The devfile should have 4 components. 1: name\
      \ tools and container image registry.access.redhat.com/ubi9/openjdk-17:1.17-1, 2: name m2 and container image , 3: name build and container image\
      \ , 4: name deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: container
        version: 1.2.1
        provider: Red Hat
        website: https://redhat.com
        displayName: Container Example
        description: Container Example
        projectType: nodejs
        language: javascript
      components:
      - name: image-build
        image:
          imageName: my-image:latest
          dockerfile:
            uri: /dockerfiles/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 100Mi
          deployment/container-port: 8080
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8080
            targetPort: 8080
            path: /
            protocol: https
            secure: true
            exposure: public
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name container and javascript as programming language? The devfile should have 3 commands. 1: id\
      \ build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2: name kubernetes-deploy\
      \ and container image ."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: nodejs-nuxtjs
        displayName: Nuxt.js
        description: Nuxt.js is the backbone of your Vue.js project, giving structure to
          build your project with confidence while keeping flexibility. Its goal is to help
          Vue developers take advantage of top-notch technologies, fast, easy and in an
          organized way.
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/nuxt-js.svg
        tags:
        - Node.js
        - Nuxt.js
        projectType: Nuxt.js
        language: TypeScript
        provider: Red Hat
        version: 1.1.0
      starterProjects:
      - name: nodejs-nuxtjs-starter
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stack-nodejs-nuxtjs.git
      components:
      - container:
          endpoints:
          - name: http-nuxtjs
            targetPort: 3000
          image: registry.access.redhat.com/ubi8/nodejs-18:1-94
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
        name: runtime
      commands:
      - exec:
          commandLine: npm install
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: install
      - exec:
          commandLine: npm run dev
          component: runtime
          group:
            isDefault: true
            kind: run
          hotReloadCapable: true
          workingDir: ${PROJECT_SOURCE}
        id: run
    question: "Could you generate a devfile sample with name nodejs-nuxtjs using Node.js, Nuxt.js and TypeScript as programming language? The devfile should\
      \ have 2 commands. 1: id install, 2: id run. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-18:1-94."
  - answer: |
      commands:
      - exec:
          commandLine: npm install
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: install
      - exec:
          commandLine: npm start
          component: runtime
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
      - exec:
          commandLine: npm run debug
          component: runtime
          group:
            isDefault: true
            kind: debug
          workingDir: ${PROJECT_SOURCE}
        id: debug
      - exec:
          commandLine: npm test
          component: runtime
          group:
            isDefault: true
            kind: test
          workingDir: ${PROJECT_SOURCE}
        id: test
      components:
      - container:
          args:
          - tail
          - -f
          - /dev/null
          endpoints:
          - name: port-3000-tcp
            protocol: tcp
            targetPort: 8080
          env:
          - name: DEBUG_PORT
            value: '9229'
          - name: HOST
            value: http://web:8080/
          image: registry.access.redhat.com/ubi8/nodejs-16:latest
          memoryLimit: 1024Mi
          mountSources: true
        name: runtime
      metadata:
        description: Node.js 16 application
        displayName: Node.js Runtime
        icon: https://nodejs.org/static/images/logos/nodejs-new-pantone-black.svg
        language: JavaScript
        name: odotest
        projectType: Node.js
        tags:
        - Node.js
        - Express
        - ubi8
        version: 2.1.1
      schemaVersion: 2.1.0
      starterProjects:
      - git:
          remotes:
            origin: https://github.com/Basavaraju-G/robot-shop.git
        name: nodejs-starter
    question: "Could you generate a devfile sample with name odotest using Node.js, Express, ubi8 and JavaScript as programming language? The devfile should\
      \ have 4 commands. 1: id install, 2: id run, 3: id debug, 4: id test. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-16:latest."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: nodejs
        version: 2.1.1
        displayName: Node.js Runtime
        description: Stack with Node.js 16
        tags:
        - Node.js
        - Express
        - ubi8
        projectType: Node.js
        language: JavaScript
        attributes:
          alpha.dockerimage-port: 3001
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: nodejs
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: nodejs-image:latest
          dockerfile:
            uri: Dockerfile
            buildContext: .
            rootRequired: false
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deploy
        composite:
          commands:
          - build-image
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name nodejs using Node.js, Express, ubi8 and JavaScript as programming language? The devfile should\
      \ have 2 commands. 1: id build-image, 2: id deploy. The devfile should have 1 components. 1: name image-build and container image ."
  - answer: |
      commands:
      - apply:
          component: truststore-initcontainer
        id: mount-truststore
      - exec:
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository compile
          component: tools
          workingDir: $PROJECTS_ROOT
        id: init-compile
      - exec:
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository quarkus:dev -Dquarkus.http.host=0.0.0.0
            -Djava.util.logging.manager=org.jboss.logmanager.LogManager
          component: tools
          group:
            isDefault: true
            kind: run
          hotReloadCapable: true
          workingDir: $PROJECTS_ROOT
        id: dev-run
      - exec:
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository quarkus:dev -Dquarkus.http.host=0.0.0.0
            -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Ddebug=${DEBUG_PORT}
          component: tools
          group:
            isDefault: true
            kind: debug
          hotReloadCapable: true
          workingDir: $PROJECTS_ROOT
        id: dev-debug
      components:
      - container:
          endpoints:
          - name: 8080-http
            targetPort: 8080
          image: registry.access.redhat.com/ubi8/openjdk-11
          memoryLimit: 512Mi
          mountSources: true
          volumeMounts:
          - name: m2
            path: /home/user/.m2
          - name: truststore-volume
            path: /mnt
          - name: infinispan-identities
            path: /var/run/secrets/ie.dev
        name: tools
      - container:
          image: quay.io/murph83/truststore-initcontainer@sha256:b817ab95fbdda03049c6cd970ea481ac7672e9fd6dbbe96e3668a1599461a539
          mountSources: false
          command:
          - /bin/bash
          args:
          - -c
          - csplit -z -f crt- $ca_bundle '/-----BEGIN CERTIFICATE-----/' '{*}' && for file
            in crt-*; do keytool -import -noprompt -keystore $truststore_jks -file $file
            -storepass password -alias service-$file; done
          env:
          - name: ca_bundle
            value: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
          - name: truststore_jks
            value: /var/run/secrets/java.io/keystores/clientcerts
          volumeMounts:
          - name: truststore-volume
            path: /var/run/secrets/java.io/keystores
        name: truststore-initcontainer
      - name: truststore-volume
        volume:
          size: 1Gi
      - name: m2
        volume:
          size: 3Gi
      - kubernetes:
          uri: kubernetes/odo-service-cache-service.yaml
        name: cache-service
      events:
        preStart:
        - mount-truststore
        postStart:
        - init-compile
      metadata:
        description: Quarkus with Java
        displayName: Quarkus Java
        icon: https://design.jboss.org/quarkus/logo/final/SVG/quarkus_icon_rgb_default.svg
        language: java
        name: challenge-server
        projectType: quarkus
        tags:
        - Java
        - Quarkus
        version: 1.1.0
        website: https://quarkus.io
      schemaVersion: 2.0.0
      starterProjects:
      - name: community
        zip:
          location: https://code.quarkus.io/d?e=io.quarkus%3Aquarkus-resteasy&e=io.quarkus%3Aquarkus-micrometer&e=io.quarkus%3Aquarkus-smallrye-health&e=io.quarkus%3Aquarkus-openshift&cn=devfile
      - name: redhat-product
        zip:
          location: https://code.quarkus.redhat.com/d?e=io.quarkus%3Aquarkus-resteasy&e=io.quarkus%3Aquarkus-smallrye-health&e=io.quarkus%3Aquarkus-openshift
    question: "Could you generate a devfile sample with name challenge-server using Java, Quarkus and java as programming language? The devfile should have\
      \ 4 commands. 1: id mount-truststore, 2: id init-compile, 3: id dev-run, 4: id dev-debug. The devfile should have 5 components. 1: name tools and\
      \ container image registry.access.redhat.com/ubi8/openjdk-11, 2: name truststore-initcontainer and container image quay.io/murph83/truststore-initcontainer@sha256:b817ab95fbdda03049c6cd970ea481ac7672e9fd6dbbe96e3668a1599461a539,\
      \ 3: name truststore-volume and container image , 4: name m2 and container image , 5: name cache-service and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-springboot
        version: 1.2.1
        attributes:
          alpha.dockerimage-port: 8081
        displayName: "Spring Boot\xAE"
        description: "Spring Boot\xAE using Maven"
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/spring.svg
        tags:
        - Java
        - Spring
        projectType: springboot
        language: Java
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: java-springboot
        registryUrl: https://registry.devfile.io
      components:
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 300Mi
          deployment/memoryRequest: 180Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      commands:
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-springboot using Java, Spring and Java as programming language? The devfile should have\
      \ 2 commands. 1: id deployk8s, 2: id deploy. The devfile should have 1 components. 1: name kubernetes-deploy and container image ."
  - answer: |
      commands:
      - exec:
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository compile
          component: tools
          workingDir: ${PROJECT_SOURCE}
        id: init-compile
      - exec:
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository quarkus:dev -Dquarkus.http.host=0.0.0.0
            -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Dquarkus.openshift.route.expose=true
          component: tools
          group:
            isDefault: true
            kind: run
          hotReloadCapable: true
          workingDir: ${PROJECT_SOURCE}
        id: dev-run
      - exec:
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository quarkus:dev -Dquarkus.http.host=0.0.0.0
            -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Ddebug=${DEBUG_PORT}
            -Dquarkus.openshift.route.expose=true
          component: tools
          group:
            isDefault: true
            kind: debug
          hotReloadCapable: true
          workingDir: ${PROJECT_SOURCE}
        id: dev-debug
      components:
      - container:
          args:
          - tail
          - -f
          - /dev/null
          endpoints:
          - name: http-quarkus
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
          env:
          - name: DEBUG_PORT
            value: '5858'
          image: registry.access.redhat.com/ubi8/openjdk-17
          memoryLimit: 512Mi
          mountSources: true
          volumeMounts:
          - name: m2
            path: /home/user/.m2
        name: tools
      - name: m2
        volume:
          size: 3Gi
      events:
        postStart:
        - init-compile
      metadata:
        description: Quarkus with Java
        displayName: Quarkus Java
        icon: https://design.jboss.org/quarkus/logo/final/SVG/quarkus_icon_rgb_default.svg
        language: Java
        name: quarkus-rest-plusplus
        projectType: Quarkus
        tags:
        - Java
        - Quarkus
        version: 1.3.0
        website: https://quarkus.io
      schemaVersion: 2.1.0
      starterProjects:
      - name: community
        zip:
          location: https://code.quarkus.io/d?e=io.quarkus%3Aquarkus-resteasy&e=io.quarkus%3Aquarkus-micrometer&e=io.quarkus%3Aquarkus-smallrye-health&e=io.quarkus%3Aquarkus-openshift&cn=devfile
      - name: redhat-product
        zip:
          location: https://code.quarkus.redhat.com/d?e=io.quarkus%3Aquarkus-resteasy&e=io.quarkus%3Aquarkus-smallrye-health&e=io.quarkus%3Aquarkus-openshift
    question: "Could you generate a devfile sample with name quarkus-rest-plusplus using Java, Quarkus and Java as programming language? The devfile should\
      \ have 3 commands. 1: id init-compile, 2: id dev-run, 3: id dev-debug. The devfile should have 2 components. 1: name tools and container image registry.access.redhat.com/ubi8/openjdk-17,\
      \ 2: name m2 and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: fbc-v4.15
        displayName: FBC v4.15
        description: File based catalog
        language: fbc
        provider: Red Hat
      components:
      - name: image-build
        image:
          imageName: ''
          dockerfile:
            uri: catalog.Dockerfile
            buildContext: ''
      - name: kubernetes
        kubernetes:
          inlined: placeholder
        attributes:
          deployment/container-port: 50051
          deployment/cpuRequest: 100m
          deployment/memoryRequest: 512Mi
          deployment/replicas: 1
          deployment/storageRequest: '0'
      commands:
      - id: build-image
        apply:
          component: image-build
    question: "Could you generate a devfile sample with name fbc-v4.15 and fbc as programming language? The devfile should have 1 commands. 1: id build-image.\
      \ The devfile should have 2 components. 1: name image-build and container image , 2: name kubernetes and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: go
        language: go
        projectType: go
        tags:
        - Go
        version: 1.0.0
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: go
        registryUrl: https://registry.devfile.io
      components:
      - name: outerloop-build
        image:
          imageName: go-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: outerloop-deploy
        attributes:
          deployment/replicas: 1
          deployment/route: route1
          deployment/storageLimit: 400Mi
          deployment/storageRequest: 200Mi
          deployment/cpuLimit: '2'
          deployment/cpuRequest: 700m
          deployment/memoryLimit: 500Mi
          deployment/memoryRequest: 400Mi
          deployment/containerimage-port: 8081
        kubernetes:
          uri: outerloop-deploy.yaml
      commands:
      - id: build-image
        apply:
          component: outerloop-build
      - id: deployk8s
        apply:
          component: outerloop-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name go using Go and go as programming language? The devfile should have 3 commands. 1: id build-image,\
      \ 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name outerloop-build and container image , 2: name outerloop-deploy and\
      \ container image ."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: nodejs-angular
        displayName: Angular
        description: 'Angular is a development platform, built on TypeScript. As a platform,
          Angular includes: A component-based framework for building scalable web applications
          A collection of well-integrated libraries that cover a wide variety of features,
          including routing, forms management, client-server communication, and more A suite
          of developer tools to help you develop, build, test, and update your code'
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/angular.svg
        tags:
        - Node.js
        - Angular
        projectType: Angular
        language: TypeScript
        provider: Red Hat
        version: 2.1.0
      starterProjects:
      - name: nodejs-angular-starter
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stack-nodejs-angular.git
      components:
      - container:
          endpoints:
          - name: http-angular
            targetPort: 4200
          image: registry.access.redhat.com/ubi8/nodejs-18:1-94
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
        name: runtime
      commands:
      - exec:
          commandLine: npm install
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: install
      - exec:
          commandLine: npm run start
          component: runtime
          group:
            isDefault: true
            kind: run
          hotReloadCapable: true
          workingDir: ${PROJECT_SOURCE}
        id: run
    question: "Could you generate a devfile sample with name nodejs-angular using Node.js, Angular and TypeScript as programming language? The devfile should\
      \ have 2 commands. 1: id install, 2: id run. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-18:1-94."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: fbc-v4.12
        displayName: FBC v4.12
        description: File based catalog
        language: fbc
        provider: Red Hat
      components:
      - name: image-build
        image:
          imageName: ''
          dockerfile:
            uri: catalog.Dockerfile
            buildContext: ''
      - name: kubernetes
        kubernetes:
          inlined: placeholder
        attributes:
          deployment/container-port: 50051
          deployment/cpuRequest: 100m
          deployment/memoryRequest: 512Mi
          deployment/replicas: 1
          deployment/storageRequest: '0'
      commands:
      - id: build-image
        apply:
          component: image-build
    question: "Could you generate a devfile sample with name fbc-v4.12 and fbc as programming language? The devfile should have 1 commands. 1: id build-image.\
      \ The devfile should have 2 components. 1: name image-build and container image , 2: name kubernetes and container image ."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: aws-universal
        version: 1.0.1
        displayName: AWS Universal
        description: Stack with AWS Universal Tooling
        tags:
        - aws
        - a12
        projectType: aws
      components:
      - name: aws-runtime
        container:
          image: public.ecr.aws/aws-mde/universal-image:latest
          mountSources: true
          volumeMounts:
          - name: docker-store
            path: /var/lib/docker
      - name: docker-store
        volume:
          size: 16Gi
    question: "Could you generate a devfile sample with name aws-universal using aws, a12? The devfile should have 2 components. 1: name aws-runtime and\
      \ container image public.ecr.aws/aws-mde/universal-image:latest, 2: name docker-store and container image ."
  - answer: |
      commands:
      - exec:
          commandLine: npm install
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: install
      - exec:
          commandLine: npm start
          component: runtime
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
      - exec:
          commandLine: npm run debug
          component: runtime
          group:
            isDefault: true
            kind: debug
          workingDir: ${PROJECT_SOURCE}
        id: debug
      - exec:
          commandLine: npm test
          component: runtime
          group:
            isDefault: true
            kind: test
          workingDir: ${PROJECT_SOURCE}
        id: test
      components:
      - container:
          args:
          - tail
          - -f
          - /dev/null
          endpoints:
          - name: http-node
            targetPort: 3000
          - exposure: none
            name: debug
            targetPort: 5858
          env:
          - name: DEBUG_PORT
            value: '5858'
          image: registry.access.redhat.com/ubi8/nodejs-16:latest
          memoryLimit: 1024Mi
          mountSources: true
        name: runtime
      metadata:
        description: Node.js 16 application
        displayName: Node.js Runtime
        icon: https://nodejs.org/static/images/logos/nodejs-new-pantone-black.svg
        language: JavaScript
        name: nodejs-starter
        projectType: Node.js
        tags:
        - Node.js
        - Express
        - ubi8
        version: 2.1.1
      schemaVersion: 2.1.0
      starterProjects:
      - git:
          remotes:
            origin: https://github.com/odo-devfiles/nodejs-ex.git
        name: nodejs-starter
    question: "Could you generate a devfile sample with name nodejs-starter using Node.js, Express, ubi8 and JavaScript as programming language? The devfile\
      \ should have 4 commands. 1: id install, 2: id run, 3: id debug, 4: id test. The devfile should have 1 components. 1: name runtime and container image\
      \ registry.access.redhat.com/ubi8/nodejs-16:latest."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: nodejs-vue
        displayName: Vue
        description: Vue 3 is a JavaScript framework for building user interfaces. It builds
          on top of standard HTML, CSS and JavaScript, and provides a declarative and component-based
          programming model that helps you efficiently develop user interfaces, be it simple
          or complex
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/vue.svg
        tags:
        - Node.js
        - Vue
        projectType: Vue
        language: TypeScript
        provider: Red Hat
        version: 1.1.0
      starterProjects:
      - name: nodejs-vue-starter
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stack-nodejs-vue.git
      components:
      - container:
          env:
          - name: CYPRESS_CACHE_FOLDER
            value: ${PROJECT_SOURCE}
          endpoints:
          - name: http-vue
            targetPort: 3000
          image: registry.access.redhat.com/ubi8/nodejs-18:1-94
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
        name: runtime
      commands:
      - exec:
          commandLine: npm install
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: install
      - exec:
          commandLine: npm run dev
          component: runtime
          group:
            isDefault: true
            kind: run
          hotReloadCapable: true
          workingDir: ${PROJECT_SOURCE}
        id: build
    question: "Could you generate a devfile sample with name nodejs-vue using Node.js, Vue and TypeScript as programming language? The devfile should have\
      \ 2 commands. 1: id install, 2: id build. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-18:1-94."
  - answer: |
      commands:
      - exec:
          commandLine: pip install -r requirements.txt
          component: py
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: pip-install-requirements
      - exec:
          commandLine: python src/app.py
          component: py
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run-app
      - exec:
          commandLine: pip install debugpy && python -m debugpy --listen 0.0.0.0:${DEBUG_PORT}
            app.py
          component: py
          group:
            kind: debug
          workingDir: ${PROJECT_SOURCE}
        id: debug-py
      - apply:
          component: build
        id: build-image
      - apply:
          component: deploy
        id: deployk8s
      - composite:
          commands:
          - build-image
          - deployk8s
          group:
            isDefault: true
            kind: deploy
        id: deploy
      components:
      - container:
          args:
          - tail
          - -f
          - /dev/null
          endpoints:
          - name: http-python
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
          env:
          - name: DEBUG_PORT
            value: '5858'
          image: registry.access.redhat.com/ubi9/python-39:1-108
          mountSources: true
        name: py
      - image:
          dockerfile:
            buildContext: .
            rootRequired: false
            uri: docker/Dockerfile
          imageName: registry.ocp4.example.com:8443/developer/hello-flask
        name: build
      - kubernetes:
          endpoints:
          - name: http-8081
            targetPort: 8081
          uri: kubernetes/deploy.yaml
        name: deploy
      metadata:
        displayName: Python
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/python.svg
        language: Python
        name: hello-flask
        projectType: Python
        provider: Red Hat
        tags:
        - Python
        - Pip
        - Flask
        version: 3.0.0
      schemaVersion: 2.2.0
    question: "Could you generate a devfile sample with name hello-flask using Python, Pip, Flask and Python as programming language? The devfile should\
      \ have 6 commands. 1: id pip-install-requirements, 2: id run-app, 3: id debug-py, 4: id build-image, 5: id deployk8s, 6: id deploy. The devfile should\
      \ have 3 components. 1: name py and container image registry.access.redhat.com/ubi9/python-39:1-108, 2: name build and container image , 3: name deploy\
      \ and container image ."
  - answer: |
      commands:
      - exec:
          commandLine: make build
          component: runtime
          env:
          - name: GOPATH
            value: ${PROJECT_SOURCE}/.go
          - name: GOCACHE
            value: ${PROJECT_SOURCE}/.cache
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: build
      - exec:
          commandLine: ./build/gosnappass
          component: runtime
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
      components:
      - container:
          args:
          - tail
          - -f
          - /dev/null
          endpoints:
          - name: port-5000-tcp
            protocol: tcp
            targetPort: 5000
          image: docker.io/golang:1.19
          memoryLimit: 1024Mi
          mountSources: true
        name: runtime
      - container:
          image: docker.io/redis/redis-stack
          memoryLimit: 1024Mi
        name: db
      metadata:
        description: Share Passwords Securely
        displayName: GoSnappass
        icon: https://raw.githubusercontent.com/concerthall/gosnappass/main/assets/gosnappass.svg
        language: Go
        name: gosnappass
        projectType: Go
        provider: The Concert Hall
        tags:
        - Go
        version: 0.0.1
      schemaVersion: 2.1.0
    question: "Could you generate a devfile sample with name gosnappass using Go and Go as programming language? The devfile should have 2 commands. 1:\
      \ id build, 2: id run. The devfile should have 2 components. 1: name runtime and container image docker.io/golang:1.19, 2: name db and container image\
      \ docker.io/redis/redis-stack."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: java-openliberty
        version: 0.5.0
        description: Java application stack using Open Liberty runtime
        displayName: Open Liberty
        language: java
        projectType: docker
        alpha.build-dockerfile: https://github.com/OpenLiberty/application-stack/releases/download/outer-loop-0.5.1/Dockerfile
        alpha.deployment-manifest: https://github.com/OpenLiberty/application-stack/releases/download/outer-loop-0.5.1/app-deploy.yaml
      starterProjects:
      - name: user-app
        git:
          remotes:
            origin: https://github.com/OpenLiberty/application-stack-starters.git
      components:
      - name: devruntime
        container:
          image: openliberty/application-stack:0.5
          memoryLimit: 1512Mi
          mountSources: true
          endpoints:
          - exposure: public
            path: /
            name: ep1
            targetPort: 9080
            protocol: http
      commands:
      - id: build
        exec:
          component: devruntime
          commandLine: /stack/ol/scripts/devbuild-cmd.sh 21.0.0.3
          workingDir: /projects
          hotReloadCapable: true
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: devruntime
          commandLine: mvn -Dliberty.runtime.version=21.0.0.3 -Ddebug=false -DhotTests=true
            -DcompileWait=3 liberty:dev
          workingDir: /projects
          hotReloadCapable: true
          group:
            kind: run
            isDefault: true
      - id: run-test-off
        exec:
          component: devruntime
          commandLine: mvn -Dliberty.runtime.version=21.0.0.3 -Ddebug=false liberty:dev
          workingDir: /projects
          hotReloadCapable: true
          group:
            kind: run
            isDefault: false
      - id: debug
        exec:
          component: devruntime
          commandLine: mvn -Dliberty.runtime.version=21.0.0.3 -DdebugPort=${DEBUG_PORT}
            liberty:dev -Dliberty.env.WLP_DEBUG_REMOTE=y
          workingDir: /projects
          hotReloadCapable: true
          group:
            kind: debug
            isDefault: true
      - id: test
        exec:
          component: devruntime
          commandLine: mvn failsafe:integration-test failsafe:verify
          workingDir: /projects
          hotReloadCapable: true
          group:
            kind: test
            isDefault: true
    question: "Could you generate a devfile sample with name java-openliberty and java as programming language? The devfile should have 5 commands. 1: id\
      \ build, 2: id run, 3: id run-test-off, 4: id debug, 5: id test. The devfile should have 1 components. 1: name devruntime and container image openliberty/application-stack:0.5."
  - answer: |
      commands:
      - apply:
          component: build
        id: build-image
      - apply:
          component: deploy
        id: deployk8s
      - composite:
          commands:
          - build-image
          - deployk8s
          group:
            isDefault: true
            kind: deploy
        id: deploy
      - exec:
          commandLine: go build main.go
          component: runtime
          env:
          - name: GOPATH
            value: ${PROJECT_SOURCE}/.go
          - name: GOCACHE
            value: ${PROJECT_SOURCE}/.cache
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: build
      - exec:
          commandLine: ./main
          component: runtime
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
      components:
      - image:
          dockerfile:
            buildContext: .
            rootRequired: false
            uri: docker/Dockerfile
          imageName: go-image:latest
        name: build
      - kubernetes:
          endpoints:
          - name: http-8081
            targetPort: 8081
          inlined: "kind: Service\napiVersion: v1\nmetadata:\n  name: my-go-svc\nspec:\n\
            \  ports:\n    - name: http-8081\n      port: 8081\n      protocol: TCP\n  \
            \    targetPort: 8081\n  selector:\n    app: go-app\n---\nkind: Deployment\n\
            apiVersion: apps/v1\nmetadata:\n  name: my-go\nspec:\n  replicas: 1\n  selector:\n\
            \    matchLabels:\n      app: go-app\n  template:\n    metadata:\n      labels:\n\
            \        app: go-app\n    spec:\n      containers:\n        - name: my-go\n\
            \          image: go-image:latest\n          ports:\n            - name: http\n\
            \              containerPort: 8081\n              protocol: TCP\n          resources:\n\
            \            requests:\n              memory: \"10Mi\"\n              cpu: \"\
            10m\"\n            limits:\n              memory: \"100Mi\"\n              cpu:\
            \ \"100m\"\n"
        name: deploy
      - container:
          args:
          - tail
          - -f
          - /dev/null
          endpoints:
          - name: http-go
            targetPort: 8080
          image: registry.access.redhat.com/ubi9/go-toolset:latest
          memoryLimit: 1024Mi
          mountSources: true
        name: runtime
      metadata:
        description: Go is an open source programming language that makes it easy to build
          simple, reliable, and efficient software.
        displayName: Go Runtime
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/golang.svg
        language: Go
        name: my-go-app
        projectType: Go
        provider: Red Hat
        tags:
        - Go
        version: 2.0.0
      schemaVersion: 2.2.0
      starterProjects:
      - description: A Go project with a simple HTTP server
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stack-go.git
        name: go-starter
    question: "Could you generate a devfile sample with name my-go-app using Go and Go as programming language? The devfile should have 5 commands. 1: id\
      \ build-image, 2: id deployk8s, 3: id deploy, 4: id build, 5: id run. The devfile should have 3 components. 1: name build and container image , 2:\
      \ name deploy and container image , 3: name runtime and container image registry.access.redhat.com/ubi9/go-toolset:latest."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-quarkus
        version: 1.2.1
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        icon: https://design.jboss.org/quarkus/logo/final/SVG/quarkus_icon_rgb_default.svg
        website: https://quarkus.io
        displayName: Quarkus Java
        description: Quarkus with Java
        tags:
        - Java
        - Quarkus
        projectType: Quarkus
        language: Java
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: java-quarkus
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: java-quarkus-image:latest
          dockerfile:
            uri: src/main/docker/Dockerfile.jvm.staged
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 100Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-quarkus using Java, Quarkus and Java as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      commands:
      - exec:
          commandLine: pip install -r requirements.txt
          component: py-web
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: pip-install-requirements
      - exec:
          commandLine: python app.py
          component: py-web
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run-app
      - exec:
          commandLine: pip install debugpy && python -m debugpy --listen 0.0.0.0:${DEBUG_PORT}
            app.py
          component: py-web
          group:
            kind: debug
          workingDir: ${PROJECT_SOURCE}
        id: debugpy
      components:
      - container:
          args:
          - tail
          - -f
          - /dev/null
          endpoints:
          - name: http-python
            targetPort: 8080
          env:
          - name: DEBUG_PORT
            value: '5858'
          - name: POSTGRESQL_SERVICE_HOST
            value: postgresql.odo-demo
          - name: POSTGRESQL_DATABASE
            value: postgres
          - name: POSTGRESQL_USER
            value: postgres
          - name: POSTGRESQL_PASSWORD
            value: postgres
          image: registry.access.redhat.com/ubi9/python-39:latest
          mountSources: true
        name: py-web
      metadata:
        description: "Flask is a web framework, it\u2019s a Python module that lets you\
          \ develop web applications easily. It\u2019s has a small and easy-to-extend core:\
          \ it\u2019s a microframework that doesn\u2019t include an ORM (Object Relational\
          \ Manager) or such features."
        displayName: Flask
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/flask.svg
        language: Python
        name: flask-example
        projectType: Flask
        provider: Red Hat
        tags:
        - Flask
        - Python
        - Pip
        version: 2.0.1
      schemaVersion: 2.1.0
      starterProjects:
      - git:
          remotes:
            origin: https://github.com/devfile-samples/python-ex
        name: flask-example
    question: "Could you generate a devfile sample with name flask-example using Flask, Python, Pip and Python as programming language? The devfile should\
      \ have 3 commands. 1: id pip-install-requirements, 2: id run-app, 3: id debugpy. The devfile should have 1 components. 1: name py-web and container\
      \ image registry.access.redhat.com/ubi9/python-39:latest."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        description: Service Names and Port Numbers
        displayName: Service Names and Port Numbers
        language: kotlin
        name: service-names-port-numbers
        projectType: spring
        tags:
        - gradle
        - kotlin
        - spring
        - service-names-port-numbers
        version: 0.1.0
      variables:
        gradle_cmd: ./gradlew -g /var/lib/gradle-cache --info --no-daemon
      commands:
      - exec:
          commandLine: '{{gradle_cmd}}  :service-names-port-numbers-app:build -x test'
          component: tools
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: build
      - exec:
          commandLine: '{{gradle_cmd}} :service-names-port-numbers-app:test'
          component: tools
          group:
            isDefault: true
            kind: test
          workingDir: ${PROJECT_SOURCE}
        id: test
      - exec:
          commandLine: '{{gradle_cmd}} :service-names-port-numbers-app:bootRun'
          component: tools
          group:
            isDefault: true
            kind: run
          hotReloadCapable: true
          workingDir: ${PROJECT_SOURCE}
        id: run
      - exec:
          commandLine: '{{gradle_cmd}}  :service-names-port-numbers-app:bootRun --debug-jvm'
          component: tools
          group:
            isDefault: true
            kind: debug
          hotReloadCapable: true
          workingDir: ${PROJECT_SOURCE}
        id: debug
      components:
      - container:
          args:
          - -f
          - /dev/null
          command:
          - tail
          endpoints:
          - name: http-gradle
            targetPort: 8080
          - name: http-actuator
            targetPort: 8081
            exposure: none
          - name: debug
            targetPort: 5005
            exposure: none
          image: eclipse-temurin:17-jdk
          memoryLimit: 1024Mi
          mountSources: true
          volumeMounts:
          - name: gradle-cache
            path: /var/lib/gradle-cache
        name: tools
      - name: gradle-cache
        volume:
          size: 2Gi
    question: "Could you generate a devfile sample with name service-names-port-numbers using gradle, kotlin, spring, service-names-port-numbers and kotlin\
      \ as programming language? The devfile should have 4 commands. 1: id build, 2: id test, 3: id run, 4: id debug. The devfile should have 2 components.\
      \ 1: name tools and container image eclipse-temurin:17-jdk, 2: name gradle-cache and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: golang
        projectType: golang
        language: golang
        version: 1.0.0
        provider: Red Hat
      components:
      - name: outerloop-build
        image:
          imageName: fib-go:latest
          dockerfile:
            uri: services/fib-go/Dockerfile
            buildContext: services/fib-go
            rootRequired: false
      - name: outerloop-deploy
        kubernetes:
          uri: deploy/services/fib-go/deployment.yaml
      commands:
      - id: build-image
        apply:
          component: outerloop-build
      - id: deployk8s
        apply:
          component: outerloop-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name golang and golang as programming language? The devfile should have 3 commands. 1: id build-image,\
      \ 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name outerloop-build and container image , 2: name outerloop-deploy and\
      \ container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: quarkus-restapi
        displayName: Quarkus RESTApi
        description: Java stack with OpenJDK 11, Maven 3.6.3 and Quarkus tools for building
          RESTful APIs
        language: java
        tags:
        - Java
        - Quarkus
        - Maven
        - REST
        - API
        icon: https://design.jboss.org/quarkus/logo/final/SVG/quarkus_icon_rgb_default.svg
        version: 0.0.1
        projectType: quarkus
        provider: rprakashg
        supportUrl: https://rprakashg.github.io/devfileregistry
        website: https://rprakashg.github.io
        links: null
      starterProjects:
      - git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/rprakashg/quarkus-restapi-starter.git
        name: quarkus-restapi-starter
      commands:
      - id: compile
        exec:
          commandLine: ./mvnw -Dmaven.repo.local=/home/user/.m2/repository compile
          component: mvn
          workingDir: $PROJECTS_ROOT
      - id: analyze
        exec:
          commandLine: ./mvnw clean verify sonar:sonar
          component: mvn
          workingDir: $PROJECTS_ROOT
      - id: package
        exec:
          commandLine: ./mvnw clean package -Dquarkus.native.container-build=true -Dquarkus.container-image.build=true
            -Dquarkus.native.container-runtime=podman
          component: mvn
          workingDir: $PROJECTS_ROOT
      - id: rununittests
        exec:
          commandLine: ./mvnw verify -Dquarkus.http.test-host=1.2.3.4 -Dquarkus.http.test-port=4321
          component: mvn
          workingDir: $PROJECTS_ROOT
      - id: run
        exec:
          commandLine: ./mvnw -Dmaven.repo.local=/home/user/.m2/repository quarkus:dev -Dquarkus.http.host=0.0.0.0
            -Djava.util.logging.manager=org.jboss.logmanager.LogManager
          component: mvn
          group:
            kind: run
          hotReloadCapable: true
          workingDir: $PROJECTS_ROOT
      - id: debug
        exec:
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository quarkus:dev -Dquarkus.http.host=0.0.0.0
            -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Ddebug=${DEBUG_PORT}
          component: mvn
          group:
            kind: debug
          hotReloadCapable: true
          workingDir: $PROJECTS_ROOT
      - id: build
        composite:
          commands:
          - compile
          - analyze
          - rununittests
          - package
      components:
      - name: mvn
        container:
          image: registry.access.redhat.com/ubi8/openjdk-11
          memoryLimit: 512Mi
          mountSources: true
          endpoints:
          - name: http
            targetPort: 8080
          - name: debug
            targetPort: 5005
          volumeMounts:
          - name: m2
            path: /home/user/.m2
      - name: m2
        volume:
          size: 3Gi
      events:
        postStart:
        - compile
    question: "Could you generate a devfile sample with name quarkus-restapi using Java, Quarkus, Maven, REST, API and java as programming language? The\
      \ devfile should have 7 commands. 1: id compile, 2: id analyze, 3: id package, 4: id rununittests, 5: id run, 6: id debug, 7: id build. The devfile\
      \ should have 2 components. 1: name mvn and container image registry.access.redhat.com/ubi8/openjdk-11, 2: name m2 and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-springboot
        displayName: "Spring Boot\xAE"
        description: "Java application using Spring Boot\xAE and OpenJDK 11"
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/spring.svg
        tags:
        - Java
        - Spring
        projectType: springboot
        language: Java
        version: 2.0.0
        globalMemoryLimit: 2674Mi
      starterProjects:
      - name: springbootproject
        git:
          remotes:
            origin: https://github.com/odo-devfiles/springboot-ex.git
      components:
      - name: tools
        container:
          image: registry.access.redhat.com/ubi8/openjdk-11:1.18-2.1705602259
          command:
          - tail
          - -f
          - /dev/null
          memoryLimit: 768Mi
          mountSources: true
          endpoints:
          - name: http-springboot
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
          volumeMounts:
          - name: m2
            path: /home/user/.m2
          env:
          - name: DEBUG_PORT
            value: '5858'
      - name: m2
        volume:
          size: 3Gi
      - name: build
        image:
          imageName: java-springboot-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: deploy
        kubernetes:
          uri: kubernetes/deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
      commands:
      - id: build
        exec:
          component: tools
          workingDir: ${PROJECT_SOURCE}
          commandLine: mvn clean -Dmaven.repo.local=/home/user/.m2/repository package -Dmaven.test.skip=true
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: tools
          workingDir: ${PROJECT_SOURCE}
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository spring-boot:run
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: tools
          workingDir: ${PROJECT_SOURCE}
          commandLine: java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=${DEBUG_PORT},suspend=n
            -jar target/*.jar
          group:
            kind: debug
            isDefault: true
      - id: build-image
        apply:
          component: build
      - id: deployk8s
        apply:
          component: deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-springboot using Java, Spring and Java as programming language? The devfile should have\
      \ 6 commands. 1: id build, 2: id run, 3: id debug, 4: id build-image, 5: id deployk8s, 6: id deploy. The devfile should have 4 components. 1: name\
      \ tools and container image registry.access.redhat.com/ubi8/openjdk-11:1.18-2.1705602259, 2: name m2 and container image , 3: name build and container\
      \ image , 4: name deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: ux-github-actions
        projectType: container
        language: container
        attributes:
          alpha.dockerimage-port: 8080
        version: 1.0.0
        provider: Red Hat
      components:
      - name: outerloop-build
        image:
          imageName: ux-github-actions
          dockerfile:
            uri: Dockerfile
            buildContext: .
            rootRequired: false
      commands:
      - id: build-image
        apply:
          component: outerloop-build
    question: "Could you generate a devfile sample with name ux-github-actions and container as programming language? The devfile should have 1 commands.\
      \ 1: id build-image. The devfile should have 1 components. 1: name outerloop-build and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: nodejs-react
        displayName: React
        description: React is a free and open-source front-end JavaScript library for building
          user interfaces based on UI components. It is maintained by Meta and a community
          of individual developers and companies.
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/react.svg
        tags:
        - Node.js
        - React
        projectType: React
        language: TypeScript
        provider: Red Hat
        version: 2.2.0
      starterProjects:
      - name: nodejs-react-starter
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stacks-nodejs-react.git
      components:
      - container:
          endpoints:
          - name: http-react
            targetPort: 3000
          image: registry.access.redhat.com/ubi8/nodejs-18:1-94
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
        name: runtime
      commands:
      - exec:
          commandLine: npm install
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: install
      - exec:
          commandLine: npm run dev
          component: runtime
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
    question: "Could you generate a devfile sample with name nodejs-react using Node.js, React and TypeScript as programming language? The devfile should\
      \ have 2 commands. 1: id install, 2: id run. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-18:1-94."
  - answer: |
      metadata:
        description: Upstream Vert.x using Java
        displayName: Vert.x Java
        language: java
        name: gateway-vertx
        projectType: vertx
        tags:
        - Java
        - Vert.x
        version: 1.1.0
      schemaVersion: 2.2.0
      parent:
        id: java-vertx
        registryUrl: https://registry.devfile.io
      components:
      - name: outerloop-build
        image:
          imageName: java-vertx-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: outerloop-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 300Mi
          deployment/memoryRequest: 180Mi
          deployment/container-port: 8080
          deployment/containerENV:
          - name: CATALOG_COOLSTORE_SERVICE_PORT
            value: '9000'
          - name: INVENTORY_COOLSTORE_SERVICE_PORT
            value: '8080'
          - name: CATALOG_COOLSTORE_SERVICE_HOST
            value: 172.30.139.137
          - name: INVENTORY_COOLSTORE_SERVICE_HOST
            value: 172.30.214.182
        kubernetes:
          uri: outerloop-deploy.yaml
    question: "Could you generate a devfile sample with name gateway-vertx using Java, Vert.x and java as programming language? The devfile should have\
      \ 2 components. 1: name outerloop-build and container image , 2: name outerloop-deploy and container image ."
  - answer: |
      commands:
      - exec:
          commandLine: mvn clean -Dmaven.repo.local=/home/user/.m2/repository package -Dmaven.test.skip=true
          component: tools
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: build
      - exec:
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository spring-boot:run
          component: tools
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
      - exec:
          commandLine: java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=${DEBUG_PORT},suspend=n
            -jar target/*.jar
          component: tools
          group:
            isDefault: true
            kind: debug
          workingDir: ${PROJECT_SOURCE}
        id: debug
      components:
      - container:
          command:
          - tail
          - -f
          - /dev/null
          endpoints:
          - name: http-springboot
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
          env:
          - name: DEBUG_PORT
            value: '5858'
          image: registry.access.redhat.com/ubi8/openjdk-11:latest
          memoryLimit: 768Mi
          mountSources: true
          volumeMounts:
          - name: m2
            path: /home/user/.m2
        name: tools
      - name: m2
        volume:
          size: 3Gi
      metadata:
        description: "Spring Boot\xAE using Java"
        displayName: "Spring Boot\xAE"
        globalMemoryLimit: 2674Mi
        icon: https://spring.io/images/projects/spring-edf462fec682b9d48cf628eaf9e19521.svg
        language: Java
        name: demo
        projectType: springboot
        tags:
        - Java
        - Spring
        version: 1.2.0
      schemaVersion: 2.1.0
      starterProjects:
      - git:
          remotes:
            origin: https://github.com/odo-devfiles/springboot-ex.git
        name: springbootproject
    question: "Could you generate a devfile sample with name demo using Java, Spring and Java as programming language? The devfile should have 3 commands.\
      \ 1: id build, 2: id run, 3: id debug. The devfile should have 2 components. 1: name tools and container image registry.access.redhat.com/ubi8/openjdk-11:latest,\
      \ 2: name m2 and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: nodejs-vue
        displayName: Vue
        description: Vue 3 is a JavaScript framework for building user interfaces. It builds
          on top of standard HTML, CSS and JavaScript, and provides a declarative and component-based
          programming model that helps you efficiently develop user interfaces, be it simple
          or complex
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/vue.svg
        tags:
        - Node.js
        - Vue
        projectType: Vue
        language: TypeScript
        provider: Red Hat
        version: 1.2.0
      starterProjects:
      - name: nodejs-vue-starter
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stack-nodejs-vue.git
      components:
      - container:
          env:
          - name: CYPRESS_CACHE_FOLDER
            value: ${PROJECT_SOURCE}
          endpoints:
          - name: http-vue
            targetPort: 3000
          image: registry.access.redhat.com/ubi8/nodejs-18:1-94
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
        name: runtime
      commands:
      - exec:
          commandLine: npm install
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: install
      - exec:
          commandLine: npm run dev
          component: runtime
          group:
            isDefault: true
            kind: run
          hotReloadCapable: true
          workingDir: ${PROJECT_SOURCE}
        id: build
    question: "Could you generate a devfile sample with name nodejs-vue using Node.js, Vue and TypeScript as programming language? The devfile should have\
      \ 2 commands. 1: id install, 2: id build. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-18:1-94."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: dotnet-basic
        displayName: Basic .NET
        version: 1.1.1
        icon: https://github.com/dotnet/brand/raw/main/logo/dotnet-logo.png
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        language: .NET
        projectType: dotnet
        tags:
        - .NET
        attributes:
          alpha.dockerimage-port: 8081
      starterProjects:
      - name: s2i-example
        git:
          checkoutFrom:
            remote: origin
            revision: dotnet-6.0
          remotes:
            origin: https://github.com/redhat-developer/s2i-dotnetcore-ex
        subDir: app
      components:
      - name: dotnet
        container:
          image: registry.access.redhat.com/ubi8/dotnet-60:6.0
          command:
          - tail
          - -f
          - /dev/null
          mountSources: true
          env:
          - name: CONFIGURATION
            value: Debug
          - name: STARTUP_PROJECT
            value: app.csproj
          - name: ASPNETCORE_ENVIRONMENT
            value: Development
          endpoints:
          - name: http-8080
            targetPort: 8080
      - name: image-build
        image:
          imageName: dotnet-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 100Mi
          deployment/container-port: 8081
        kubernetes:
          uri: kubernetes/deployment.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      - name: kubernetes-service
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 100Mi
          deployment/container-port: 8081
        kubernetes:
          uri: kubernetes/service.yaml
      commands:
      - id: build
        exec:
          workingDir: ${PROJECT_SOURCE}
          commandLine: kill $(pidof dotnet); dotnet build -c $CONFIGURATION $STARTUP_PROJECT
            /p:UseSharedCompilation=false
          component: dotnet
          group:
            isDefault: true
            kind: build
      - id: run
        exec:
          workingDir: ${PROJECT_SOURCE}
          commandLine: dotnet run -c $CONFIGURATION --no-build --project $STARTUP_PROJECT
            --no-launch-profile
          component: dotnet
          group:
            isDefault: true
            kind: run
      - id: build-image
        apply:
          component: image-build
      - id: deploy-deployment
        apply:
          component: kubernetes-deploy
      - id: deploy-service
        apply:
          component: kubernetes-service
      - id: deploy
        composite:
          commands:
          - build-image
          - deploy-deployment
          - deploy-service
          group:
            isDefault: true
            kind: deploy
    question: "Could you generate a devfile sample with name dotnet-basic using .NET and .NET as programming language? The devfile should have 6 commands.\
      \ 1: id build, 2: id run, 3: id build-image, 4: id deploy-deployment, 5: id deploy-service, 6: id deploy. The devfile should have 4 components. 1:\
      \ name dotnet and container image registry.access.redhat.com/ubi8/dotnet-60:6.0, 2: name image-build and container image , 3: name kubernetes-deploy\
      \ and container image , 4: name kubernetes-service and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: nodejs
        icon: https://nodejs.org/static/images/logos/nodejs-new-pantone-black.svg
        version: 1.0.0
        displayName: NodeJS Runtime
        description: Stack with NodeJS 12
        tags:
        - NodeJS
        - Express
        - ubi8
        projectType: nodejs
        language: nodejs
      starterProjects:
      - name: nodejs-starter
        git:
          remotes:
            origin: https://github.com/odo-devfiles/nodejs-ex.git
      components:
      - name: runtime
        container:
          image: registry.access.redhat.com/ubi8/nodejs-14:latest
          memoryLimit: 1024Mi
          mountSources: true
          sourceMapping: /project
          endpoints:
          - name: http-3000
            targetPort: 3000
      commands:
      - id: install
        exec:
          component: runtime
          commandLine: npm install
          workingDir: /project
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: runtime
          commandLine: npm start
          workingDir: /project
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: runtime
          commandLine: npm run debug
          workingDir: /project
          group:
            kind: debug
            isDefault: true
      - id: test
        exec:
          component: runtime
          commandLine: npm test
          workingDir: /project
          group:
            kind: test
            isDefault: true
    question: "Could you generate a devfile sample with name nodejs using NodeJS, Express, ubi8 and nodejs as programming language? The devfile should have\
      \ 4 commands. 1: id install, 2: id run, 3: id debug, 4: id test. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-14:latest."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: java-maven
        version: 1.1.0
        displayName: Maven Java
        description: Upstream Maven and OpenJDK 11
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/java-maven.jpg
        tags:
        - Java
        - Maven
        projectType: maven
        language: java
        architectures:
        - amd64
        - arm64
        - s390x
      starterProjects:
      - name: springbootproject-offline
        zip:
          location: springbootproject.zip
      - name: springbootproject
        git:
          remotes:
            origin: https://github.com/odo-devfiles/springboot-ex.git
      components:
      - name: tools
        container:
          image: quay.io/eclipse/che-java11-maven:nightly
          memoryLimit: 512Mi
          mountSources: true
          endpoints:
          - name: http-8080
            targetPort: 8080
          volumeMounts:
          - name: m2
            path: /home/user/.m2
      - name: m2
        volume: {}
      commands:
      - id: mvn-package
        exec:
          component: tools
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository package
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: tools
          commandLine: java -jar target/*.jar
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: tools
          commandLine: java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=${DEBUG_PORT},suspend=n
            -jar target/*.jar
          group:
            kind: debug
            isDefault: true
    question: "Could you generate a devfile sample with name java-maven using Java, Maven and java as programming language? The devfile should have 3 commands.\
      \ 1: id mvn-package, 2: id run, 3: id debug. The devfile should have 2 components. 1: name tools and container image quay.io/eclipse/che-java11-maven:nightly,\
      \ 2: name m2 and container image ."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: java-maven
        displayName: Maven Java
        description: Java application based on Maven 3.6 and OpenJDK 17
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/java-maven.jpg
        tags:
        - Java
        - Maven
        projectType: Maven
        language: Java
        version: 1.3.0
      starterProjects:
      - name: springbootproject
        git:
          remotes:
            origin: https://github.com/odo-devfiles/springboot-ex.git
      components:
      - name: tools
        container:
          image: registry.access.redhat.com/ubi9/openjdk-17:1.17-1
          command:
          - tail
          - -f
          - /dev/null
          memoryLimit: 512Mi
          mountSources: true
          endpoints:
          - name: http-maven
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
          volumeMounts:
          - name: m2
            path: /home/user/.m2
          env:
          - name: DEBUG_PORT
            value: '5858'
      - name: m2
        volume: {}
      commands:
      - id: mvn-package
        exec:
          component: tools
          workingDir: ${PROJECT_SOURCE}
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository package
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: tools
          workingDir: ${PROJECT_SOURCE}
          commandLine: java -jar target/*.jar
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: tools
          workingDir: ${PROJECT_SOURCE}
          commandLine: java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=${DEBUG_PORT},suspend=n
            -jar target/*.jar
          group:
            kind: debug
            isDefault: true
    question: "Could you generate a devfile sample with name java-maven using Java, Maven and Java as programming language? The devfile should have 3 commands.\
      \ 1: id mvn-package, 2: id run, 3: id debug. The devfile should have 2 components. 1: name tools and container image registry.access.redhat.com/ubi9/openjdk-17:1.17-1,\
      \ 2: name m2 and container image ."
  - answer: |
      commands:
      - exec:
          commandLine: npm install
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: install
      - exec:
          commandLine: npm run dev
          component: runtime
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
      components:
      - container:
          args:
          - tail
          - -f
          - /dev/null
          endpoints:
          - name: http-react
            targetPort: 3000
          image: registry.access.redhat.com/ubi8/nodejs-18:latest
          memoryLimit: 1024Mi
        name: runtime
      metadata:
        description: React is a free and open-source front-end JavaScript library for building
          user interfaces based on UI components. It is maintained by Meta and a community
          of individual developers and companies.
        displayName: React
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/react.svg
        language: Typescript
        name: comp4
        projectType: React
        provider: Red Hat
        tags:
        - Node.js
        - React
        version: 2.0.1
      schemaVersion: 2.1.0
      starterProjects:
      - git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stacks-nodejs-react.git
        name: nodejs-react-starter
    question: "Could you generate a devfile sample with name comp4 using Node.js, React and Typescript as programming language? The devfile should have\
      \ 2 commands. 1: id install, 2: id run. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-18:latest."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: fbc-v4.15
        displayName: FBC v4.15
        description: File based catalog
        language: fbc
        provider: Red Hat
      components:
      - name: image-build
        image:
          imageName: ''
          dockerfile:
            uri: catalog.Dockerfile
            buildContext: ''
      - name: kubernetes
        kubernetes:
          inlined: placeholder
        attributes:
          deployment/container-port: 50051
          deployment/cpuRequest: 100m
          deployment/memoryRequest: 512Mi
          deployment/replicas: 1
          deployment/storageRequest: '0'
      commands:
      - id: build-image
        apply:
          component: image-build
    question: "Could you generate a devfile sample with name fbc-v4.15 and fbc as programming language? The devfile should have 1 commands. 1: id build-image.\
      \ The devfile should have 2 components. 1: name image-build and container image , 2: name kubernetes and container image ."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: aws-universal
        version: 1.0.1
        displayName: AWS Universal
        description: Stack with AWS Universal Tooling
        tags:
        - aws
        - a12
        projectType: aws
      components:
      - name: aws-runtime
        container:
          image: public.ecr.aws/aws-mde/universal-image:latest
          mountSources: true
          volumeMounts:
          - name: docker-store
            path: /var/lib/docker
      - name: docker-store
        volume:
          size: 16Gi
    question: "Could you generate a devfile sample with name aws-universal using aws, a12? The devfile should have 2 components. 1: name aws-runtime and\
      \ container image public.ecr.aws/aws-mde/universal-image:latest, 2: name docker-store and container image ."
  - answer: |
      commands:
      - exec:
          commandLine: pip install -r requirements.txt
          component: py
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: pip-install-requirements
      - exec:
          commandLine: python src/app.py
          component: py
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run-app
      - exec:
          commandLine: pip install debugpy && python -m debugpy --listen 0.0.0.0:${DEBUG_PORT}
            app.py
          component: py
          group:
            kind: debug
          workingDir: ${PROJECT_SOURCE}
        id: debug-py
      - apply:
          component: build
        id: build-image
      - apply:
          component: deploy
        id: deployk8s
      - composite:
          commands:
          - build-image
          - deployk8s
          group:
            isDefault: true
            kind: deploy
        id: deploy
      components:
      - container:
          args:
          - tail
          - -f
          - /dev/null
          endpoints:
          - name: http-python
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
          env:
          - name: DEBUG_PORT
            value: '5858'
          image: registry.access.redhat.com/ubi9/python-39:1-108
          mountSources: true
        name: py
      - image:
          dockerfile:
            buildContext: .
            rootRequired: false
            uri: docker/Dockerfile
          imageName: registry.ocp4.example.com:8443/developer/hello-flask
        name: build
      - kubernetes:
          endpoints:
          - name: http-8081
            targetPort: 8081
          uri: kubernetes/deploy.yaml
        name: deploy
      metadata:
        displayName: Python
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/python.svg
        language: Python
        name: hello-flask
        projectType: Python
        provider: Red Hat
        tags:
        - Python
        - Pip
        - Flask
        version: 3.0.0
      schemaVersion: 2.2.0
    question: "Could you generate a devfile sample with name hello-flask using Python, Pip, Flask and Python as programming language? The devfile should\
      \ have 6 commands. 1: id pip-install-requirements, 2: id run-app, 3: id debug-py, 4: id build-image, 5: id deployk8s, 6: id deploy. The devfile should\
      \ have 3 components. 1: name py and container image registry.access.redhat.com/ubi9/python-39:1-108, 2: name build and container image , 3: name deploy\
      \ and container image ."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: java-openliberty
        version: 0.5.0
        description: Java application stack using Open Liberty runtime
        displayName: Open Liberty
        language: java
        projectType: docker
        alpha.build-dockerfile: https://github.com/OpenLiberty/application-stack/releases/download/outer-loop-0.5.1/Dockerfile
        alpha.deployment-manifest: https://github.com/OpenLiberty/application-stack/releases/download/outer-loop-0.5.1/app-deploy.yaml
      starterProjects:
      - name: user-app
        git:
          remotes:
            origin: https://github.com/OpenLiberty/application-stack-starters.git
      components:
      - name: devruntime
        container:
          image: openliberty/application-stack:0.5
          memoryLimit: 1512Mi
          mountSources: true
          endpoints:
          - exposure: public
            path: /
            name: ep1
            targetPort: 9080
            protocol: http
      commands:
      - id: build
        exec:
          component: devruntime
          commandLine: /stack/ol/scripts/devbuild-cmd.sh 21.0.0.3
          workingDir: /projects
          hotReloadCapable: true
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: devruntime
          commandLine: mvn -Dliberty.runtime.version=21.0.0.3 -Ddebug=false -DhotTests=true
            -DcompileWait=3 liberty:dev
          workingDir: /projects
          hotReloadCapable: true
          group:
            kind: run
            isDefault: true
      - id: run-test-off
        exec:
          component: devruntime
          commandLine: mvn -Dliberty.runtime.version=21.0.0.3 -Ddebug=false liberty:dev
          workingDir: /projects
          hotReloadCapable: true
          group:
            kind: run
            isDefault: false
      - id: debug
        exec:
          component: devruntime
          commandLine: mvn -Dliberty.runtime.version=21.0.0.3 -DdebugPort=${DEBUG_PORT}
            liberty:dev -Dliberty.env.WLP_DEBUG_REMOTE=y
          workingDir: /projects
          hotReloadCapable: true
          group:
            kind: debug
            isDefault: true
      - id: test
        exec:
          component: devruntime
          commandLine: mvn failsafe:integration-test failsafe:verify
          workingDir: /projects
          hotReloadCapable: true
          group:
            kind: test
            isDefault: true
    question: "Could you generate a devfile sample with name java-openliberty and java as programming language? The devfile should have 5 commands. 1: id\
      \ build, 2: id run, 3: id run-test-off, 4: id debug, 5: id test. The devfile should have 1 components. 1: name devruntime and container image openliberty/application-stack:0.5."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-quarkus
        version: 1.2.1
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        icon: https://design.jboss.org/quarkus/logo/final/SVG/quarkus_icon_rgb_default.svg
        website: https://quarkus.io
        displayName: Quarkus Java
        description: Quarkus with Java
        tags:
        - Java
        - Quarkus
        projectType: Quarkus
        language: Java
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: java-quarkus
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: java-quarkus-image:latest
          dockerfile:
            uri: src/main/docker/Dockerfile.jvm.staged
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 100Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-quarkus using Java, Quarkus and Java as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-quarkus
        version: 1.2.1
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        icon: https://design.jboss.org/quarkus/logo/final/SVG/quarkus_icon_rgb_default.svg
        website: https://quarkus.io
        displayName: Quarkus Java
        description: Quarkus with Java
        tags:
        - Java
        - Quarkus
        projectType: Quarkus
        language: Java
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: java-quarkus
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: java-quarkus-image:latest
          dockerfile:
            uri: src/main/docker/Dockerfile.jvm.staged
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 100Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-quarkus using Java, Quarkus and Java as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      metadata:
        description: Upstream Vert.x using Java
        displayName: Vert.x Java
        language: java
        name: gateway-vertx
        projectType: vertx
        tags:
        - Java
        - Vert.x
        version: 1.1.0
      schemaVersion: 2.2.0
      parent:
        id: java-vertx
        registryUrl: https://registry.devfile.io
      components:
      - name: outerloop-build
        image:
          imageName: java-vertx-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: outerloop-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 300Mi
          deployment/memoryRequest: 180Mi
          deployment/container-port: 8080
          deployment/containerENV:
          - name: CATALOG_COOLSTORE_SERVICE_PORT
            value: '9000'
          - name: INVENTORY_COOLSTORE_SERVICE_PORT
            value: '8080'
          - name: CATALOG_COOLSTORE_SERVICE_HOST
            value: 172.30.139.137
          - name: INVENTORY_COOLSTORE_SERVICE_HOST
            value: 172.30.214.182
        kubernetes:
          uri: outerloop-deploy.yaml
    question: "Could you generate a devfile sample with name gateway-vertx using Java, Vert.x and java as programming language? The devfile should have\
      \ 2 components. 1: name outerloop-build and container image , 2: name outerloop-deploy and container image ."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: java-maven
        displayName: Maven Java
        description: Java application based on Maven 3.6 and OpenJDK 17
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/java-maven.jpg
        tags:
        - Java
        - Maven
        projectType: Maven
        language: Java
        version: 1.3.0
      starterProjects:
      - name: springbootproject
        git:
          remotes:
            origin: https://github.com/odo-devfiles/springboot-ex.git
      components:
      - name: tools
        container:
          image: registry.access.redhat.com/ubi9/openjdk-17:1.17-1
          command:
          - tail
          - -f
          - /dev/null
          memoryLimit: 512Mi
          mountSources: true
          endpoints:
          - name: http-maven
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
          volumeMounts:
          - name: m2
            path: /home/user/.m2
          env:
          - name: DEBUG_PORT
            value: '5858'
      - name: m2
        volume: {}
      commands:
      - id: mvn-package
        exec:
          component: tools
          workingDir: ${PROJECT_SOURCE}
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository package
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: tools
          workingDir: ${PROJECT_SOURCE}
          commandLine: java -jar target/*.jar
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: tools
          workingDir: ${PROJECT_SOURCE}
          commandLine: java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=${DEBUG_PORT},suspend=n
            -jar target/*.jar
          group:
            kind: debug
            isDefault: true
    question: "Could you generate a devfile sample with name java-maven using Java, Maven and Java as programming language? The devfile should have 3 commands.\
      \ 1: id mvn-package, 2: id run, 3: id debug. The devfile should have 2 components. 1: name tools and container image registry.access.redhat.com/ubi9/openjdk-17:1.17-1,\
      \ 2: name m2 and container image ."
  - answer: |
      commands:
      - exec:
          commandLine: mvn clean -Dmaven.repo.local=/home/user/.m2/repository package -Dmaven.test.skip=true
          component: tools
          group:
            isDefault: true
            kind: build
        id: build
      - exec:
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository spring-boot:run
          component: tools
          group:
            isDefault: true
            kind: run
        id: run
      - exec:
          commandLine: java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=${DEBUG_PORT},suspend=n
            -jar target/*.jar
          component: tools
          group:
            isDefault: true
            kind: debug
        id: debug
      - apply:
          component: outerloop-build
        id: build-image
      - apply:
          component: outerloop-deploy
        id: deployk8s
      - composite:
          commands:
          - build-image
          - deployk8s
          group:
            isDefault: true
            kind: deploy
        id: deploy
      components:
      - image:
          dockerfile:
            buildContext: .
            rootRequired: false
            uri: ../docker/Dockerfile
          imageName: java-springboot-image:latest
        name: outerloop-build
      - kubernetes:
          uri: ../outerloop-deploy.yaml
        name: outerloop-deploy
      - attributes:
          appstudio.has/ephemeralStorageLimit: 500Mi
          appstudio.has/ephemeralStorageRequest: 400Mi
          appstudio.has/replicas: 1
          appstudio.has/route: route111
          appstudio.has/storageLimit: 400Mi
          appstudio.has/storageRequest: 200Mi
        container:
          cpuLimit: '2'
          cpuRequest: 700m
          endpoints:
          - name: 8080-tcp
            targetPort: 1111
          env:
          - name: FOO
            value: foo1
          - name: BAR
            value: bar1
          image: quay.io/eclipse/che-java11-maven:7.36.0
          memoryLimit: 500Mi
          memoryRequest: 400Mi
          mountSources: true
          volumeMounts:
          - name: m2
            path: /home/user/.m2
        name: tools
      - name: m2
        volume:
          size: 3Gi
      metadata:
        attributes:
          alpha.dockerimage-port: 8081
        description: Java Spring Boot using Maven
        displayName: Java Spring Boot
        language: java
        name: java-springboot
        projectType: springboot
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        tags:
        - Java
        - Spring
        version: 1.1.0
      schemaVersion: 2.2.0
      starterProjects:
      - git:
          remotes:
            origin: https://github.com/odo-devfiles/springboot-ex.git
        name: springbootproject
    question: "Could you generate a devfile sample with name java-springboot using Java, Spring and java as programming language? The devfile should have\
      \ 6 commands. 1: id build, 2: id run, 3: id debug, 4: id build-image, 5: id deployk8s, 6: id deploy. The devfile should have 4 components. 1: name\
      \ outerloop-build and container image , 2: name outerloop-deploy and container image , 3: name tools and container image quay.io/eclipse/che-java11-maven:7.36.0,\
      \ 4: name m2 and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: python
        projectType: Python
        displayName: Python
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/python.svg
        description: Python is an interpreted, object-oriented, high-level programming language
          with dynamic semantics. Its high-level built in data structures, combined with
          dynamic typing and dynamic binding, make it very attractive for Rapid Application
          Development, as well as for use as a scripting or glue language to connect existing
          components together.
        language: Python
        version: 1.0.1
        provider: Red Hat
        tags:
        - Python
        - Pip
        - Flask
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: python
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: python-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 50Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
            secure: true
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name python using Python, Pip, Flask and Python as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.1.0
      components:
      - container:
          command:
          - tail
          - -f
          - /dev/null
          endpoints:
          - name: http-springboot
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
          env:
          - name: DEBUG_PORT
            value: '5858'
          - name: HISTFILE
            value: /home/user/.history-mount/.bash_history
          image: quay.io/devfile/universal-developer-image:ubi8-latest
          memoryLimit: 768Mi
          mountSources: true
          volumeMounts:
          - name: m2
            path: /home/user/.m2
          - name: bash-history-mount
            path: /home/user/.history-mount
        name: tools
      - name: postgres
        container:
          image: registry.redhat.io/rhel8/postgresql-12
          memoryLimit: 512Mi
          env:
          - name: POSTGRESQL_USER
            value: user
          - name: POSTGRESQL_PASSWORD
            value: pass
          - name: POSTGRESQL_DATABASE
            value: db
          endpoints:
          - name: postgres
            targetPort: 5432
            exposure: none
      - name: m2
        volume:
          size: 3Gi
      - name: bash-history-mount
        volume:
          size: 512Mi
      commands:
      - exec:
          commandLine: mvn clean -Dmaven.repo.local=/home/user/.m2/repository package -Dmaven.test.skip=true
          component: tools
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: build
      - exec:
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository spring-boot:run
          component: tools
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
      - exec:
          commandLine: java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=${DEBUG_PORT},suspend=n
            -jar target/*.jar
          component: tools
          group:
            isDefault: true
            kind: debug
          workingDir: ${PROJECT_SOURCE}
        id: debug
      metadata:
        description: "Java application using Spring Boot\xAE and OpenJDK 11"
        displayName: "Spring Boot\xAE"
        globalMemoryLimit: 2674Mi
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/spring.svg
        language: Java
        name: demo
        projectType: springboot
        tags:
        - Java
        - Spring
        version: 1.3.0
      starterProjects:
      - git:
          remotes:
            origin: https://github.com/odo-devfiles/springboot-ex.git
        name: springbootproject
    question: "Could you generate a devfile sample with name demo using Java, Spring and Java as programming language? The devfile should have 3 commands.\
      \ 1: id build, 2: id run, 3: id debug. The devfile should have 4 components. 1: name tools and container image quay.io/devfile/universal-developer-image:ubi8-latest,\
      \ 2: name postgres and container image registry.redhat.io/rhel8/postgresql-12, 3: name m2 and container image , 4: name bash-history-mount and container\
      \ image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: service-provider-integration-oauth
        projectType: container
        language: container
        version: 1.0.0
        provider: Red Hat
      components:
      - name: outerloop-build
        image:
          imageName: service-provider-integration-oauth:latest
          dockerfile:
            uri: Dockerfile
            buildContext: .
            rootRequired: false
      commands:
      - id: build-image
        apply:
          component: outerloop-build
    question: "Could you generate a devfile sample with name service-provider-integration-oauth and container as programming language? The devfile should\
      \ have 1 commands. 1: id build-image. The devfile should have 1 components. 1: name outerloop-build and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-quarkus
        version: 1.1.0
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        website: https://quarkus.io
        displayName: Quarkus Java
        description: Upstream Quarkus with Java+GraalVM
        tags:
        - Java
        - Quarkus
        projectType: quarkus
        language: java
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: java-quarkus
        registryUrl: https://registry.devfile.io
      components:
      - name: outerloop-build
        image:
          imageName: java-quarkus-image:latest
          dockerfile:
            uri: src/main/docker/Dockerfile.jvm.staged
            buildContext: .
            rootRequired: false
      - name: outerloop-deploy
        attributes:
          deployment/replicas: 1
          deployment/route: route1
          deployment/storageLimit: 400Mi
          deployment/storageRequest: 200Mi
          deployment/cpuLimit: '2'
          deployment/cpuRequest: 700m
          deployment/memoryLimit: 500Mi
          deployment/memoryRequest: 400Mi
          deployment/container-port: 8081
        kubernetes:
          uri: outerloop-deploy.yaml
      commands:
      - id: build-image
        apply:
          component: outerloop-build
      - id: deployk8s
        apply:
          component: outerloop-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-quarkus using Java, Quarkus and java as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name outerloop-build and container image\
      \ , 2: name outerloop-deploy and container image ."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: python
        displayName: Python
        description: test
        projectType: Python
        language: Python
        version: 2.0.2
    question: "Could you generate a devfile sample with name python and Python as programming language?"
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: dotnet50
        displayName: .NET 5.0
        description: .NET 5.0 application
        icon: https://github.com/dotnet/brand/raw/main/logo/dotnet-logo.png
        tags:
        - .NET
        - .NET 5.0
        projectType: dotnet
        language: .NET
        version: 1.0.3
      starterProjects:
      - name: dotnet50-example
        git:
          checkoutFrom:
            remote: origin
            revision: dotnet-5.0
          remotes:
            origin: https://github.com/redhat-developer/s2i-dotnetcore-ex
        subDir: app
      components:
      - name: dotnet
        container:
          image: registry.access.redhat.com/ubi8/dotnet-50:5.0-39
          args:
          - tail
          - -f
          - /dev/null
          mountSources: true
          env:
          - name: CONFIGURATION
            value: Debug
          - name: STARTUP_PROJECT
            value: app.csproj
          - name: ASPNETCORE_ENVIRONMENT
            value: Development
          - name: ASPNETCORE_URLS
            value: http://*:8080
          endpoints:
          - name: http-dotnet50
            targetPort: 8080
      commands:
      - id: build
        exec:
          workingDir: ${PROJECT_SOURCE}
          commandLine: kill $(pidof dotnet); dotnet build -c $CONFIGURATION $STARTUP_PROJECT
            /p:UseSharedCompilation=false
          component: dotnet
          group:
            isDefault: true
            kind: build
      - id: run
        exec:
          workingDir: ${PROJECT_SOURCE}
          commandLine: dotnet run -c $CONFIGURATION --no-build --project $STARTUP_PROJECT
            --no-launch-profile
          component: dotnet
          group:
            isDefault: true
            kind: run
    question: "Could you generate a devfile sample with name dotnet50 using .NET, .NET 5.0 and .NET as programming language? The devfile should have 2 commands.\
      \ 1: id build, 2: id run. The devfile should have 1 components. 1: name dotnet and container image registry.access.redhat.com/ubi8/dotnet-50:5.0-39."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: python
        projectType: Python
        displayName: Python - Trusted Application Pipeline
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/python.svg
        description: Python is an interpreted,  object-oriented, high-level programming
          language with dynamic semantics. This sample demonstrates software supply chain
          security functionalty using an advanced continuous integration pipeline covering
          building, CVE scanning, security scanning, signatures, attestations, SLSA provenance
          and SBOM along with Gitops-based continuous deployment.
        language: Python
        version: 1.0.1
        provider: Red Hat
        tags:
        - Python
        - Pip
        - Flask
        - sscs
        - sbom
        - acs
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: python
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: python-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 50Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
            secure: true
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name python using Python, Pip, Flask, sscs, sbom, acs and Python as programming language? The devfile\
      \ should have 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container\
      \ image , 2: name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: python
        displayName: Python
        description: Python (version 3.9.x) is an interpreted, object-oriented, high-level
          programming language with dynamic semantics. Its high-level built in data structures,
          combined with dynamic typing and dynamic binding, make it very attractive for
          Rapid Application Development, as well as for use as a scripting or glue language
          to connect existing components together.
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/python.svg
        tags:
        - Python
        - Pip
        - Flask
        projectType: Python
        language: Python
        provider: Red Hat
        version: 3.0.0
      starterProjects:
      - name: flask-example
        description: "Flask is a web framework, it\u2019s a Python module that lets you\
          \ develop web applications easily. It\u2019s has a small and easy-to-extend core:\
          \ it\u2019s a microframework that doesn\u2019t include an ORM (Object Relational\
          \ Manager) or such features."
        git:
          remotes:
            origin: https://github.com/devfile-samples/python-ex
      components:
      - name: py
        container:
          image: registry.access.redhat.com/ubi9/python-39:1-165
          args:
          - tail
          - -f
          - /dev/null
          mountSources: true
          endpoints:
          - name: http-python
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
          env:
          - name: DEBUG_PORT
            value: '5858'
      - name: build
        image:
          imageName: python-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: deploy
        kubernetes:
          uri: kubernetes/deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
      commands:
      - id: pip-install-requirements
        exec:
          commandLine: pip install -r requirements.txt
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: build
            isDefault: true
          component: py
      - id: run-app
        exec:
          commandLine: python app.py
          workingDir: ${PROJECT_SOURCE}
          component: py
          group:
            kind: run
            isDefault: true
      - id: debug-py
        exec:
          commandLine: pip install debugpy && python -m debugpy --listen 0.0.0.0:${DEBUG_PORT}
            app.py
          workingDir: ${PROJECT_SOURCE}
          component: py
          group:
            kind: debug
      - id: build-image
        apply:
          component: build
      - id: deployk8s
        apply:
          component: deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name python using Python, Pip, Flask and Python as programming language? The devfile should have\
      \ 6 commands. 1: id pip-install-requirements, 2: id run-app, 3: id debug-py, 4: id build-image, 5: id deployk8s, 6: id deploy. The devfile should\
      \ have 3 components. 1: name py and container image registry.access.redhat.com/ubi9/python-39:1-165, 2: name build and container image , 3: name deploy\
      \ and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-springboot
        version: 1.2.1
        attributes:
          alpha.dockerimage-port: 8081
        displayName: "Spring Boot\xAE"
        description: "Spring Boot\xAE using Maven"
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/spring.svg
        tags:
        - Java
        - Spring
        projectType: springboot
        language: Java
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: java-springboot
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: java-springboot-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: image-build2
        image:
          imageName: java-springboot-image:next
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 300Mi
          deployment/memoryRequest: 180Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
    question: "Could you generate a devfile sample with name java-springboot using Java, Spring and Java as programming language? The devfile should have\
      \ 3 components. 1: name image-build and container image , 2: name image-build2 and container image , 3: name kubernetes-deploy and container image\
      \ ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: kcp
        projectType: container
        language: container
        version: 1.0.0
        provider: Red Hat
      components:
      - name: outerloop-build
        image:
          imageName: kcp
          dockerfile:
            uri: Dockerfile
            buildContext: .
            rootRequired: false
      commands:
      - id: build-image
        apply:
          component: outerloop-build
    question: "Could you generate a devfile sample with name kcp and container as programming language? The devfile should have 1 commands. 1: id build-image.\
      \ The devfile should have 1 components. 1: name outerloop-build and container image ."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: nodejs-angular
        displayName: Angular
        description: 'Angular is a development platform, built on TypeScript. As a platform,
          Angular includes: A component-based framework for building scalable web applications
          A collection of well-integrated libraries that cover a wide variety of features,
          including routing, forms management, client-server communication, and more A suite
          of developer tools to help you develop, build, test, and update your code'
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/angular.svg
        tags:
        - Node.js
        - Angular
        projectType: Angular
        language: TypeScript
        provider: Red Hat
        version: 2.0.2
      starterProjects:
      - name: nodejs-angular-starter
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stack-nodejs-angular.git
      components:
      - container:
          endpoints:
          - name: http-angular
            targetPort: 4200
          image: registry.access.redhat.com/ubi8/nodejs-16:1-105.1684740145
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
        name: runtime
      commands:
      - exec:
          commandLine: npm install
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: install
      - exec:
          commandLine: npm run start
          component: runtime
          group:
            isDefault: true
            kind: run
          hotReloadCapable: true
          workingDir: ${PROJECT_SOURCE}
        id: run
    question: "Could you generate a devfile sample with name nodejs-angular using Node.js, Angular and TypeScript as programming language? The devfile should\
      \ have 2 commands. 1: id install, 2: id run. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-16:1-105.1684740145."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: fbc-4.10
        language: fbc
      components:
      - name: image-build
        image:
          imageName: ''
          dockerfile:
            uri: catalog.Dockerfile
            buildContext: '4.10'
      - name: kubernetes
        kubernetes:
          inlined: placeholder
        attributes:
          deployment/container-port: 50051
          deployment/cpuRequest: 100m
          deployment/memoryRequest: 512Mi
          deployment/replicas: 1
          deployment/storageRequest: '0'
      commands:
      - id: build-image
        apply:
          component: image-build
    question: "Could you generate a devfile sample with name fbc-4.10 and fbc as programming language? The devfile should have 1 commands. 1: id build-image.\
      \ The devfile should have 2 components. 1: name image-build and container image , 2: name kubernetes and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: go
        displayName: Go Runtime
        description: Go (version 1.18.x) is an open source programming language that makes
          it easy to build simple, reliable, and efficient software.
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/golang.svg
        tags:
        - Go
        - Deprecated
        projectType: Go
        language: Go
        provider: Red Hat
        version: 2.0.0
      starterProjects:
      - name: go-starter
        description: A Go project with a simple HTTP server
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stack-go.git
      components:
      - name: build
        image:
          imageName: go-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: deploy
        kubernetes:
          uri: kubernetes/deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
      - container:
          endpoints:
          - name: http-go
            targetPort: 8080
          image: registry.access.redhat.com/ubi9/go-toolset:1.18.10-4
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
          mountSources: true
        name: runtime
      commands:
      - id: build-image
        apply:
          component: build
      - id: deployk8s
        apply:
          component: deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
      - exec:
          env:
          - name: GOPATH
            value: ${PROJECT_SOURCE}/.go
          - name: GOCACHE
            value: ${PROJECT_SOURCE}/.cache
          commandLine: go build main.go
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: build
      - exec:
          commandLine: ./main
          component: runtime
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
    question: "Could you generate a devfile sample with name go using Go, Deprecated and Go as programming language? The devfile should have 5 commands.\
      \ 1: id build-image, 2: id deployk8s, 3: id deploy, 4: id build, 5: id run. The devfile should have 3 components. 1: name build and container image\
      \ , 2: name deploy and container image , 3: name runtime and container image registry.access.redhat.com/ubi9/go-toolset:1.18.10-4."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-quarkus
        version: 1.1.0
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        website: https://quarkus.io
        displayName: Quarkus Java
        description: Upstream Quarkus with Java+GraalVM
        tags:
        - Java
        - Quarkus
        projectType: quarkus
        language: java
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: java-quarkus
        registryUrl: https://registry.devfile.io
      components:
      - name: outerloop-build
        image:
          imageName: java-quarkus-image:latest
          dockerfile:
            uri: src/main/docker/Dockerfile.jvm.staged
            buildContext: .
            rootRequired: false
      - name: outerloop-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 250Mi
          deployment/memoryRequest: 100Mi
          deployment/container-port: 8081
        kubernetes:
          uri: outerloop-deploy.yaml
      commands:
      - id: build-image
        apply:
          component: outerloop-build
      - id: deployk8s
        apply:
          component: outerloop-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-quarkus using Java, Quarkus and java as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name outerloop-build and container image\
      \ , 2: name outerloop-deploy and container image ."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: java-maven
        version: 1.1.0
        displayName: Maven Java
        description: Upstream Maven and OpenJDK 11
        tags:
        - Java
        - Maven
        projectType: maven
        language: java
      starterProjects:
      - name: springbootproject
        git:
          remotes:
            origin: https://github.com/odo-devfiles/springboot-ex.git
      components:
      - name: tools
        container:
          image: quay.io/eclipse/che-java11-maven:nightly
          memoryLimit: 512Mi
          mountSources: true
          endpoints:
          - name: http-8080
            targetPort: 8080
          volumeMounts:
          - name: m2
            path: /home/user/.m2
      - name: m2
        volume: {}
      commands:
      - id: mvn-package
        exec:
          component: tools
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository package
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: tools
          commandLine: java -jar target/*.jar
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: tools
          commandLine: java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=${DEBUG_PORT},suspend=n
            -jar target/*.jar
          group:
            kind: debug
            isDefault: true
    question: "Could you generate a devfile sample with name java-maven using Java, Maven and java as programming language? The devfile should have 3 commands.\
      \ 1: id mvn-package, 2: id run, 3: id debug. The devfile should have 2 components. 1: name tools and container image quay.io/eclipse/che-java11-maven:nightly,\
      \ 2: name m2 and container image ."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: nodejs-svelte
        displayName: Svelte
        description: Svelte is a radical new approach to building user interfaces. Whereas
          traditional frameworks like React and Vue do the bulk of their work in the browser,
          Svelte shifts that work into a compile step that happens when you build your app.
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/svelte.svg
        tags:
        - Node.js
        - Svelte
        projectType: Svelte
        language: TypeScript
        provider: Red Hat
        version: 1.0.3
      starterProjects:
      - name: nodejs-svelte-starter
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stack-nodejs-svelte.git
      components:
      - container:
          endpoints:
          - name: http-svelte
            targetPort: 3000
          image: registry.access.redhat.com/ubi8/nodejs-16:1-153
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
        name: runtime
      commands:
      - exec:
          commandLine: npm install
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: install
      - exec:
          commandLine: npm run dev
          component: runtime
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
    question: "Could you generate a devfile sample with name nodejs-svelte using Node.js, Svelte and TypeScript as programming language? The devfile should\
      \ have 2 commands. 1: id install, 2: id run. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-16:1-153."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: onguard
        version: 1.0.0
        provider: Red Hat
        supportUrl: https://github.com/RHEcosystemAppEng/onguard/issues
        website: https://github.com/RHEcosystemAppEng/onguard
        displayName: ONGUard
        description: ONGuard Service that aggregates data from OSV and NVD
        tags:
        - Exhort
        - RHTPA
        - Java
        - Quarkus
        - NVD
        - OSV
        projectType: Quarkus
        language: Java
      parent:
        id: java-quarkus
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: onguard:latest
          dockerfile:
            uri: src/main/docker/Dockerfile.multi-stage
            buildContext: .
            rootRequired: false
      commands:
      - id: build-image
        apply:
          component: image-build
    question: "Could you generate a devfile sample with name onguard using Exhort, RHTPA, Java, Quarkus, NVD, OSV and Java as programming language? The\
      \ devfile should have 1 commands. 1: id build-image. The devfile should have 1 components. 1: name image-build and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: nodejs-angular
        displayName: Angular
        description: 'Angular is a development platform, built on TypeScript. As a platform,
          Angular includes: A component-based framework for building scalable web applications
          A collection of well-integrated libraries that cover a wide variety of features,
          including routing, forms management, client-server communication, and more A suite
          of developer tools to help you develop, build, test, and update your code'
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/angular.svg
        tags:
        - Node.js
        - Angular
        projectType: Angular
        language: TypeScript
        provider: Red Hat
        version: 2.2.0
      starterProjects:
      - name: nodejs-angular-starter
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stack-nodejs-angular.git
      components:
      - container:
          endpoints:
          - name: http-angular
            targetPort: 4200
          image: registry.access.redhat.com/ubi8/nodejs-18:1-94
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
        name: runtime
      commands:
      - exec:
          commandLine: npm install
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: install
      - exec:
          commandLine: npm run start
          component: runtime
          group:
            isDefault: true
            kind: run
          hotReloadCapable: true
          workingDir: ${PROJECT_SOURCE}
        id: run
    question: "Could you generate a devfile sample with name nodejs-angular using Node.js, Angular and TypeScript as programming language? The devfile should\
      \ have 2 commands. 1: id install, 2: id run. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-18:1-94."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: java-quarkus
        version: 1.1.0
        website: https://quarkus.io
        displayName: Quarkus Java
        description: Upstream Quarkus with Java+GraalVM
        tags:
        - Java
        - Quarkus
        projectType: quarkus
        language: java
      starterProjects:
      - name: community
        zip:
          location: https://code.quarkus.io/d?e=io.quarkus%3Aquarkus-resteasy&e=io.quarkus%3Aquarkus-micrometer&e=io.quarkus%3Aquarkus-smallrye-health&e=io.quarkus%3Aquarkus-openshift&cn=devfile
      - name: redhat-product
        zip:
          location: https://code.quarkus.redhat.com/d?e=io.quarkus%3Aquarkus-resteasy&e=io.quarkus%3Aquarkus-smallrye-health&e=io.quarkus%3Aquarkus-openshift
      components:
      - name: tools
        container:
          image: quay.io/eclipse/che-quarkus:nightly
          memoryLimit: 1512Mi
          mountSources: true
          volumeMounts:
          - name: m2
            path: /home/user/.m2
          endpoints:
          - name: 8080-http
            targetPort: 8080
      - name: m2
        volume:
          size: 3Gi
      commands:
      - id: init-compile
        exec:
          component: tools
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository compile
          workingDir: $PROJECTS_ROOT
      - id: dev-run
        exec:
          component: tools
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository quarkus:dev -Dquarkus.http.host=0.0.0.0
            -Djava.util.logging.manager=org.jboss.logmanager.LogManager
          hotReloadCapable: true
          group:
            kind: run
            isDefault: true
          workingDir: $PROJECTS_ROOT
      - id: dev-debug
        exec:
          component: tools
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository quarkus:dev -Dquarkus.http.host=0.0.0.0
            -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Ddebug=${DEBUG_PORT}
          hotReloadCapable: true
          group:
            kind: debug
            isDefault: true
          workingDir: $PROJECTS_ROOT
      events:
        postStart:
        - init-compile
    question: "Could you generate a devfile sample with name java-quarkus using Java, Quarkus and java as programming language? The devfile should have\
      \ 3 commands. 1: id init-compile, 2: id dev-run, 3: id dev-debug. The devfile should have 2 components. 1: name tools and container image quay.io/eclipse/che-quarkus:nightly,\
      \ 2: name m2 and container image ."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: aws-universal
        version: 3.0.0
        displayName: AWS Universal
        description: Stack with AWS Universal Tooling
        tags:
        - aws
        - al2
        projectType: aws
      components:
      - name: aws-runtime
        container:
          image: public.ecr.aws/aws-mde/universal-image:3.0
          mountSources: true
          volumeMounts:
          - name: docker-store
            path: /var/lib/docker
      - name: docker-store
        volume:
          size: 16Gi
    question: "Could you generate a devfile sample with name aws-universal using aws, al2? The devfile should have 2 components. 1: name aws-runtime and\
      \ container image public.ecr.aws/aws-mde/universal-image:3.0, 2: name docker-store and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: go
        displayName: Go Runtime - Trusted Application Pipeline
        description: Go Runtime http based application with advanced continuous integration
          pipeline covering building, CVE scanning, security scanning, signatures,  attestations,
          SLSA provenance and SBOM along with Gitops-based continuous deployment
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/golang.svg
        language: Go
        projectType: Go
        tags:
        - Go
        - sscs
        - sbom
        - acs
        version: 1.1.0
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: go
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: go-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 10Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
            secure: true
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name go using Go, sscs, sbom, acs and Go as programming language? The devfile should have 3 commands.\
      \ 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2: name kubernetes-deploy\
      \ and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: nodejs
        version: 1.0.1
        displayName: Node.js Runtime
        description: Stack with Node.js 14
        tags:
        - NodeJS
        - Express
        - ubi8
        projectType: nodejs
        language: nodejs
        attributes:
          alpha.dockerimage-port: 3001
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: nodejs
        registryUrl: https://registry.devfile.io
      components:
      - name: outerloop-build
        image:
          imageName: nodejs-image:latest
          dockerfile:
            uri: Dockerfile
            buildContext: .
            rootRequired: false
      commands:
      - id: build-image
        apply:
          component: outerloop-build
    question: "Could you generate a devfile sample with name nodejs using NodeJS, Express, ubi8 and nodejs as programming language? The devfile should have\
      \ 1 commands. 1: id build-image. The devfile should have 1 components. 1: name outerloop-build and container image ."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: nodejs
        version: 1.0.0
        displayName: NodeJS Runtime
        description: Stack with NodeJS 12
        tags:
        - NodeJS
        - Express
        - ubi8
        projectType: nodejs
        language: nodejs
      starterProjects:
      - name: nodejs-starter
        git:
          remotes:
            origin: https://github.com/odo-devfiles/nodejs-ex.git
      components:
      - name: runtime
        container:
          image: registry.access.redhat.com/ubi8/nodejs-14:latest
          memoryLimit: 1024Mi
          mountSources: true
          sourceMapping: /project
          endpoints:
          - name: http-3000
            targetPort: 3000
      commands:
      - id: install
        exec:
          component: runtime
          commandLine: npm install
          workingDir: /project
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: runtime
          commandLine: npm start
          workingDir: /project
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: runtime
          commandLine: npm run debug
          workingDir: /project
          group:
            kind: debug
            isDefault: true
      - id: test
        exec:
          component: runtime
          commandLine: npm test
          workingDir: /project
          group:
            kind: test
            isDefault: true
    question: "Could you generate a devfile sample with name nodejs using NodeJS, Express, ubi8 and nodejs as programming language? The devfile should have\
      \ 4 commands. 1: id install, 2: id run, 3: id debug, 4: id test. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-14:latest."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: java-maven
        displayName: Maven Java
        description: Java application based on Maven 3.6 and OpenJDK 11
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/java-maven.jpg
        tags:
        - Java
        - Maven
        projectType: Maven
        language: Java
        version: 1.2.0
      starterProjects:
      - name: springbootproject
        git:
          remotes:
            origin: https://github.com/odo-devfiles/springboot-ex.git
      components:
      - name: tools
        container:
          image: registry.access.redhat.com/ubi8/openjdk-11:1.18-2.1705602259
          command:
          - tail
          - -f
          - /dev/null
          memoryLimit: 512Mi
          mountSources: true
          endpoints:
          - name: http-maven
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
          volumeMounts:
          - name: m2
            path: /home/user/.m2
          env:
          - name: DEBUG_PORT
            value: '5858'
      - name: m2
        volume: {}
      commands:
      - id: mvn-package
        exec:
          component: tools
          workingDir: ${PROJECT_SOURCE}
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository package
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: tools
          workingDir: ${PROJECT_SOURCE}
          commandLine: java -jar target/*.jar
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: tools
          workingDir: ${PROJECT_SOURCE}
          commandLine: java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=${DEBUG_PORT},suspend=n
            -jar target/*.jar
          group:
            kind: debug
            isDefault: true
    question: "Could you generate a devfile sample with name java-maven using Java, Maven and Java as programming language? The devfile should have 3 commands.\
      \ 1: id mvn-package, 2: id run, 3: id debug. The devfile should have 2 components. 1: name tools and container image registry.access.redhat.com/ubi8/openjdk-11:1.18-2.1705602259,\
      \ 2: name m2 and container image ."
  - answer: |
      metadata:
        description: Stack with Node.js 14
        displayName: Node.js Runtime
        language: nodejs
        name: web-nodejs
        projectType: nodejs
        tags:
        - NodeJS
        - Express
        - ubi8
        version: 1.0.1
      schemaVersion: 2.0.0
      parent:
        id: nodejs
        registryUrl: https://registry.devfile.io
        components:
        - container:
            endpoints:
            - exposure: public
              name: web
              targetPort: 3000
            - name: http-3000
              targetPort: 3000
              exposure: internal
          name: runtime
    question: "Could you generate a devfile sample with name web-nodejs using NodeJS, Express, ubi8 and nodejs as programming language?"
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: java-openliberty-gradle
        displayName: Open Liberty Gradle
        description: Java application based on Java 11, Gradle using the Open Liberty runtime
          22.0.0.1
        icon: https://raw.githubusercontent.com/OpenLiberty/logos/7fbb132949b9b2589e18c8d5665c1b107028a21d/logomark/svg/OL_logomark.svg
        tags:
        - Java
        - Gradle
        architectures:
        - amd64
        - ppc64le
        - s390x
        projectType: Open Liberty
        language: Java
        version: 0.4.0
        alpha.build-dockerfile: https://github.com/OpenLiberty/devfile-stack/releases/download/open-liberty-gradle-0.3.1/Dockerfile
        alpha.deployment-manifest: https://github.com/OpenLiberty/devfile-stack/releases/download/open-liberty-gradle-0.3.1/app-deploy.yaml
      starterProjects:
      - name: rest
        git:
          remotes:
            origin: https://github.com/OpenLiberty/devfile-stack-starters.git
      variables:
        liberty-version: 22.0.0.1
        gradle-cmd: gradle
      components:
      - name: dev
        container:
          image: icr.io/appcafe/open-liberty-devfile-stack:{{liberty-version}}-gradle
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1280Mi
          mountSources: true
          endpoints:
          - exposure: public
            path: /
            name: http-gradle
            targetPort: 9080
            protocol: http
          - exposure: none
            name: debug
            targetPort: 5858
          env:
          - name: DEBUG_PORT
            value: '5858'
      commands:
      - id: run
        exec:
          component: dev
          commandLine: echo "gradle run command"; {{gradle-cmd}} -Dgradle.user.home=/.gradle
            libertyDev -Pliberty.runtime.version={{liberty-version}} -Pliberty.runtime.name=openliberty-runtime
            -Pliberty.runtime.group=io.openliberty --libertyDebug=false --hotTests --compileWait=3
          workingDir: ${PROJECT_SOURCE}
          hotReloadCapable: true
          group:
            kind: run
            isDefault: true
      - id: run-test-off
        exec:
          component: dev
          commandLine: echo "gradle run-tests-off command "; {{gradle-cmd}} -Dgradle.user.home=/.gradle
            libertyDev -Pliberty.runtime.version={{liberty-version}} -Pliberty.runtime.name=openliberty-runtime
            -Pliberty.runtime.group=io.openliberty --libertyDebug=false
          workingDir: ${PROJECT_SOURCE}
          hotReloadCapable: true
          group:
            kind: run
            isDefault: false
      - id: debug
        exec:
          component: dev
          commandLine: echo "gradle debug command "; {{gradle-cmd}} -Dgradle.user.home=/.gradle
            libertyDev -Pliberty.runtime.version={{liberty-version}} -Pliberty.runtime.name=openliberty-runtime
            -Pliberty.runtime.group=io.openliberty --libertyDebugPort=${DEBUG_PORT} -Pliberty.server.env.WLP_DEBUG_REMOTE=y
          workingDir: ${PROJECT_SOURCE}
          hotReloadCapable: true
          group:
            kind: debug
            isDefault: true
      - id: test
        exec:
          component: dev
          commandLine: echo "gradle test command "; {{gradle-cmd}} -Dgradle.user.home=/.gradle
            test -Pliberty.runtime.version={{liberty-version}} -Pliberty.runtime.name=openliberty-runtime
            -Pliberty.runtime.group=io.openliberty
          workingDir: ${PROJECT_SOURCE}
          hotReloadCapable: true
          group:
            kind: test
            isDefault: true
    question: "Could you generate a devfile sample with name java-openliberty-gradle using Java, Gradle and Java as programming language? The devfile should\
      \ have 4 commands. 1: id run, 2: id run-test-off, 3: id debug, 4: id test. The devfile should have 1 components. 1: name dev and container image icr.io/appcafe/open-liberty-devfile-stack:{{liberty-version}}-gradle."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-quarkus
        version: 1.2.1
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        icon: https://design.jboss.org/quarkus/logo/final/SVG/quarkus_icon_rgb_default.svg
        website: https://quarkus.io
        displayName: Quarkus Java
        description: Quarkus with Java
        tags:
        - Java
        - Quarkus
        projectType: Quarkus
        language: Java
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: java-quarkus
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: java-quarkus-image:latest
          dockerfile:
            uri: src/main/docker/Dockerfile.jvm.staged
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 100Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
            secure: true
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-quarkus using Java, Quarkus and Java as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-springboot
        version: 1.2.1
        attributes:
          alpha.dockerimage-port: 8081
        displayName: "Spring Boot\xAE"
        description: "Spring Boot\xAE using Maven"
        icon: https://spring.io/images/projects/spring-edf462fec682b9d48cf628eaf9e19521.svg
        tags:
        - Java
        - Spring Boot
        projectType: springboot
        language: Java
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      components:
      - name: image-build
        image:
          imageName: java-springboot-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-no-cmd-ref
        attributes:
          deployment/replicas: 3
          deployment/route: route333
          deployment/cpuLimit: 133m
          deployment/cpuRequest: 13m
          deployment/memoryLimit: 333Mi
          deployment/memoryRequest: 133Mi
          deployment/storageLimit: 333Mi
          deployment/storageRequest: 133Mi
          deployment/container-port: 8381
        kubernetes:
          uri: onlydeploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
    question: "Could you generate a devfile sample with name java-springboot using Java, Spring Boot and Java as programming language? The devfile should\
      \ have 2 components. 1: name image-build and container image , 2: name kubernetes-no-cmd-ref and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: golang
        projectType: golang
        language: golang
        version: 1.0.0
        provider: Red Hat
      components:
      - name: outerloop-build
        image:
          imageName: fib-go:latest
          dockerfile:
            uri: fib-go/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 100Mi
          deployment/memoryRequest: 50Mi
          deployment/container-port: 8080
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8080
            targetPort: 8080
            path: /
      commands:
      - id: build-image
        apply:
          component: outerloop-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name golang and golang as programming language? The devfile should have 3 commands. 1: id build-image,\
      \ 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name outerloop-build and container image , 2: name kubernetes-deploy and\
      \ container image ."
  - answer: |
      commands:
      - exec:
          commandLine: mvn clean -Dmaven.repo.local=/home/user/.m2/repository package -Dmaven.test.skip=true
          component: tools
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: build
      - exec:
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository spring-boot:run
          component: tools
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
      - exec:
          commandLine: java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=${DEBUG_PORT},suspend=n
            -jar target/*.jar
          component: tools
          group:
            isDefault: true
            kind: debug
          workingDir: ${PROJECT_SOURCE}
        id: debug
      components:
      - container:
          command:
          - tail
          - -f
          - /dev/null
          endpoints:
          - name: http-springboot
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
          env:
          - name: DEBUG_PORT
            value: '5858'
          image: registry.access.redhat.com/ubi8/openjdk-11:1.16-1
          memoryLimit: 768Mi
          mountSources: true
          volumeMounts:
          - name: m2
            path: /home/user/.m2
        name: tools
      - name: m2
        volume:
          size: 3Gi
      metadata:
        description: "Java application using Spring Boot\xAE and OpenJDK 11"
        displayName: "Spring Boot\xAE"
        globalMemoryLimit: 2674Mi
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/spring.svg
        language: Java
        name: hello-rest-comp
        projectType: springboot
        tags:
        - Java
        - Spring
        version: 1.2.0
      schemaVersion: 2.1.0
      starterProjects:
      - git:
          remotes:
            origin: https://github.com/odo-devfiles/springboot-ex.git
        name: springbootproject
    question: "Could you generate a devfile sample with name hello-rest-comp using Java, Spring and Java as programming language? The devfile should have\
      \ 3 commands. 1: id build, 2: id run, 3: id debug. The devfile should have 2 components. 1: name tools and container image registry.access.redhat.com/ubi8/openjdk-11:1.16-1,\
      \ 2: name m2 and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: binary
        projectType: binary
        language: binary
        version: 1.0.0
        provider: Red Hat
      components:
      - name: outerloop-build
        image:
          imageName: frontend:latest
          dockerfile:
            uri: services/frontend/Dockerfile
            buildContext: services/frontend
            rootRequired: false
      - name: outerloop-deploy
        kubernetes:
          uri: deploy/frontend/deployment.yaml
      commands:
      - id: build-image
        apply:
          component: outerloop-build
      - id: deployk8s
        apply:
          component: outerloop-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name binary and binary as programming language? The devfile should have 3 commands. 1: id build-image,\
      \ 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name outerloop-build and container image , 2: name outerloop-deploy and\
      \ container image ."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: nodejs-angular
        displayName: Angular
        description: 'Angular is a development platform, built on TypeScript. As a platform,
          Angular includes: A component-based framework for building scalable web applications
          A collection of well-integrated libraries that cover a wide variety of features,
          including routing, forms management, client-server communication, and more A suite
          of developer tools to help you develop, build, test, and update your code'
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/angular.svg
        tags:
        - Node.js
        - Angular
        projectType: Angular
        language: TypeScript
        provider: Red Hat
        version: 2.0.2
      starterProjects:
      - name: nodejs-angular-starter
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stack-nodejs-angular.git
      components:
      - container:
          endpoints:
          - name: http-angular
            targetPort: 8080
          image: registry.access.redhat.com/ubi8/nodejs-18:1-86
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
        name: runtime
      commands:
      - exec:
          commandLine: npm install
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: install
      - exec:
          commandLine: npm run start
          component: runtime
          group:
            isDefault: true
            kind: run
          hotReloadCapable: true
          workingDir: ${PROJECT_SOURCE}
        id: run
    question: "Could you generate a devfile sample with name nodejs-angular using Node.js, Angular and TypeScript as programming language? The devfile should\
      \ have 2 commands. 1: id install, 2: id run. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-18:1-86."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: python
        projectType: Python
        displayName: Python
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/python.svg
        description: Python is an interpreted, object-oriented, high-level programming language
          with dynamic semantics. Its high-level built in data structures, combined with
          dynamic typing and dynamic binding, make it very attractive for Rapid Application
          Development, as well as for use as a scripting or glue language to connect existing
          components together.
        language: Python
        version: 1.0.1
        provider: Red Hat
        tags:
        - Python
        - Pip
        - Flask
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: python
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: python-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 50Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name python using Python, Pip, Flask and Python as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: nodejs
        version: 1.0.1
        displayName: Node.js Runtime
        description: Stack with Node.js 14
        tags:
        - NodeJS
        - Express
        - ubi8
        projectType: nodejs
        language: nodejs
      starterProjects:
      - name: nodejs-starter
        git:
          remotes:
            origin: https://github.com/odo-devfiles/nodejs-ex.git
      components:
      - name: runtime
        container:
          image: registry.access.redhat.com/ubi8/nodejs-14:latest
          memoryLimit: 1024Mi
          mountSources: true
          sourceMapping: /project
          endpoints:
          - name: http-3000
            targetPort: 3000
      commands:
      - id: install
        exec:
          component: runtime
          commandLine: npm install
          workingDir: /project
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: runtime
          commandLine: npm start
          workingDir: /project
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: runtime
          commandLine: npm run debug
          workingDir: /project
          group:
            kind: debug
            isDefault: true
      - id: test
        exec:
          component: runtime
          commandLine: npm test
          workingDir: /project
          group:
            kind: test
            isDefault: true
    question: "Could you generate a devfile sample with name nodejs using NodeJS, Express, ubi8 and nodejs as programming language? The devfile should have\
      \ 4 commands. 1: id install, 2: id run, 3: id debug, 4: id test. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-14:latest."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: hacbs-jvm-build-test-project
        version: 1.1.0
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        displayName: hacbs-jvm-build-test-project
        description: hacbs-jvm-build-test-project
        tags:
        - Java
        - Maven
        projectType: maven
        language: java
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: java-maven
        registryUrl: https://registry.devfile.io
    question: "Could you generate a devfile sample with name hacbs-jvm-build-test-project using Java, Maven and java as programming language?"
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: fbc-v4.14
        displayName: FBC v4.14
        description: File based catalog
        language: fbc
        provider: Red Hat
      components:
      - name: image-build
        image:
          imageName: ''
          dockerfile:
            uri: Dockerfile
            buildContext: ''
      - name: kubernetes
        kubernetes:
          inlined: placeholder
        attributes:
          deployment/container-port: 50051
          deployment/cpuRequest: 100m
          deployment/memoryRequest: 512Mi
          deployment/replicas: 1
          deployment/storageRequest: '0'
      commands:
      - id: build-image
        apply:
          component: image-build
    question: "Could you generate a devfile sample with name fbc-v4.14 and fbc as programming language? The devfile should have 1 commands. 1: id build-image.\
      \ The devfile should have 2 components. 1: name image-build and container image , 2: name kubernetes and container image ."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: java-quarkus
        version: 1.1.0
        website: https://quarkus.io
        displayName: Quarkus Java
        description: Quarkus with Java
        tags:
        - Java
        - Quarkus
        projectType: quarkus
        language: java
      starterProjects:
      - name: community
        zip:
          location: https://code.quarkus.io/d?e=io.quarkus%3Aquarkus-resteasy&e=io.quarkus%3Aquarkus-micrometer&e=io.quarkus%3Aquarkus-smallrye-health&e=io.quarkus%3Aquarkus-openshift&cn=devfile
      - name: redhat-product
        zip:
          location: https://code.quarkus.redhat.com/d?e=io.quarkus%3Aquarkus-resteasy&e=io.quarkus%3Aquarkus-smallrye-health&e=io.quarkus%3Aquarkus-openshift
      components:
      - name: tools
        container:
          image: registry.access.redhat.com/ubi8/openjdk-11
          memoryLimit: 512Mi
          mountSources: true
          volumeMounts:
          - name: m2
            path: /home/user/.m2
          endpoints:
          - name: 8080-http
            targetPort: 8080
      - name: m2
        volume:
          size: 3Gi
      commands:
      - id: init-compile
        exec:
          component: tools
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository compile
          workingDir: $PROJECTS_ROOT
      - id: dev-run
        exec:
          component: tools
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository quarkus:dev -Dquarkus.http.host=0.0.0.0
            -Djava.util.logging.manager=org.jboss.logmanager.LogManager
          hotReloadCapable: true
          group:
            kind: run
            isDefault: true
          workingDir: $PROJECTS_ROOT
      - id: dev-debug
        exec:
          component: tools
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository quarkus:dev -Dquarkus.http.host=0.0.0.0
            -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Ddebug=${DEBUG_PORT}
          hotReloadCapable: true
          group:
            kind: debug
            isDefault: true
          workingDir: $PROJECTS_ROOT
      events:
        postStart:
        - init-compile
    question: "Could you generate a devfile sample with name java-quarkus using Java, Quarkus and java as programming language? The devfile should have\
      \ 3 commands. 1: id init-compile, 2: id dev-run, 3: id dev-debug. The devfile should have 2 components. 1: name tools and container image registry.access.redhat.com/ubi8/openjdk-11,\
      \ 2: name m2 and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: python
        version: 1.0.0
        displayName: Python
        description: Python Stack with Python 3.7
        tags:
        - Python
        - pip
        projectType: python
        language: python
      starterProjects:
      - name: python-example
        git:
          remotes:
            origin: https://github.com/odo-devfiles/python-ex
      components:
      - name: py-web
        container:
          image: quay.io/eclipse/che-python-3.7:nightly
          mountSources: true
          endpoints:
          - name: web
            targetPort: 8080
      commands:
      - id: pip-install-requirements
        exec:
          commandLine: pip install --user -r requirements.txt
          group:
            kind: build
            isDefault: true
          component: py-web
      - id: run-app
        exec:
          commandLine: python app.py
          workingDir: ${PROJECTS_ROOT}
          component: py-web
          group:
            kind: run
            isDefault: true
      - id: debugpy
        exec:
          commandLine: pip install --user debugpy && python -m debugpy --listen 0.0.0.0:${DEBUG_PORT}
            app.py
          workingDir: ${PROJECTS_ROOT}
          component: py-web
          group:
            kind: debug
    question: "Could you generate a devfile sample with name python using Python, pip and python as programming language? The devfile should have 3 commands.\
      \ 1: id pip-install-requirements, 2: id run-app, 3: id debugpy. The devfile should have 1 components. 1: name py-web and container image quay.io/eclipse/che-python-3.7:nightly."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: nodejs
        version: 1.0.1
        displayName: Node.js Runtime
        description: Stack with Node.js 14
        tags:
        - NodeJS
        - Express
        - ubi8
        projectType: nodejs
        language: nodejs
        attributes:
          alpha.build-context: .
          alpha.build-dockerfile: Dockerfile
      components:
      - name: buildguidance
        attributes:
          tool: console-import
        container:
          image: buildguidanceimage-placeholder
          memoryLimit: 1024Mi
          endpoints:
          - name: http-3001
            targetPort: 3001
      - name: runtime
        container:
          image: registry.access.redhat.com/ubi8/nodejs-14:latest
          memoryLimit: 1024Mi
          mountSources: true
          sourceMapping: /project
          endpoints:
          - name: http-3000
            targetPort: 3000
      commands:
      - id: install
        exec:
          component: runtime
          commandLine: npm install
          workingDir: /project
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: runtime
          commandLine: npm start
          workingDir: /project
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: runtime
          commandLine: npm run debug
          workingDir: /project
          group:
            kind: debug
            isDefault: true
      - id: test
        exec:
          component: runtime
          commandLine: npm test
          workingDir: /project
          group:
            kind: test
            isDefault: true
    question: "Could you generate a devfile sample with name nodejs using NodeJS, Express, ubi8 and nodejs as programming language? The devfile should have\
      \ 4 commands. 1: id install, 2: id run, 3: id debug, 4: id test. The devfile should have 2 components. 1: name buildguidance and container image buildguidanceimage-placeholder,\
      \ 2: name runtime and container image registry.access.redhat.com/ubi8/nodejs-14:latest."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-quarkus
        icon: https://design.jboss.org/quarkus/logo/final/SVG/quarkus_icon_rgb_default.svg
        version: 1.1.0
        website: https://quarkus.io
        displayName: Quarkus Java
        description: Upstream Quarkus with Java+GraalVM
        tags:
        - Java
        - Quarkus
        projectType: quarkus
        language: java
        provider: Red Hat
      starterProjects:
      - name: community
        zip:
          location: https://code.quarkus.io/d?e=io.quarkus%3Aquarkus-resteasy&e=io.quarkus%3Aquarkus-micrometer&e=io.quarkus%3Aquarkus-smallrye-health&e=io.quarkus%3Aquarkus-openshift&cn=devfile
      - name: redhat-product
        zip:
          location: https://code.quarkus.redhat.com/d?e=io.quarkus%3Aquarkus-resteasy&e=io.quarkus%3Aquarkus-smallrye-health&e=io.quarkus%3Aquarkus-openshift
      components:
      - name: tools
        container:
          image: quay.io/eclipse/che-quarkus:nightly
          memoryLimit: 1512Mi
          mountSources: true
          volumeMounts:
          - name: m2
            path: /home/user/.m2
          endpoints:
          - name: 8080-http
            targetPort: 8080
      - name: m2
        volume:
          size: 3Gi
      commands:
      - id: init-compile
        exec:
          component: tools
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository compile
          workingDir: $PROJECTS_ROOT
      - id: dev-run
        exec:
          component: tools
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository quarkus:dev -Dquarkus.http.host=0.0.0.0
            -Djava.util.logging.manager=org.jboss.logmanager.LogManager
          hotReloadCapable: true
          group:
            kind: run
            isDefault: true
          workingDir: $PROJECTS_ROOT
      - id: dev-debug
        exec:
          component: tools
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository quarkus:dev -Dquarkus.http.host=0.0.0.0
            -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Ddebug=${DEBUG_PORT}
          hotReloadCapable: true
          group:
            kind: debug
            isDefault: true
          workingDir: $PROJECTS_ROOT
      events:
        postStart:
        - init-compile
    question: "Could you generate a devfile sample with name java-quarkus using Java, Quarkus and java as programming language? The devfile should have\
      \ 3 commands. 1: id init-compile, 2: id dev-run, 3: id dev-debug. The devfile should have 2 components. 1: name tools and container image quay.io/eclipse/che-quarkus:nightly,\
      \ 2: name m2 and container image ."
  - answer: |
      commands:
      - exec:
          commandLine: ./main {{ PARAMS }}
          component: runtime
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
      components:
      - container:
          endpoints:
          - name: http
            targetPort: 8080
          image: golang:latest
          memoryLimit: 1024Mi
          mountSources: true
        name: runtime
      - kubernetes:
          uri: http://127.0.0.1:8080/outerloop-deploy.yaml
        name: outerloop-deploy
      - openshift:
          uri: http://127.0.0.1:8080/outerloop-service.yaml
        name: outerloop-deploy2
      metadata:
        description: Stack with the latest Go version
        displayName: Go Runtime (devfile.yaml)
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/golang.svg
        language: go
        name: my-go-app
        projectType: go
        tags:
        - Go
        version: 1.0.0
      schemaVersion: 2.2.0
    question: "Could you generate a devfile sample with name my-go-app using Go and go as programming language? The devfile should have 1 commands. 1: id\
      \ run. The devfile should have 3 components. 1: name runtime and container image golang:latest, 2: name outerloop-deploy and container image , 3:\
      \ name outerloop-deploy2 and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: nodejs-angular
        displayName: Angular
        description: 'Angular is a development platform, built on TypeScript. As a platform,
          Angular includes: A component-based framework for building scalable web applications
          A collection of well-integrated libraries that cover a wide variety of features,
          including routing, forms management, client-server communication, and more A suite
          of developer tools to help you develop, build, test, and update your code'
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/angular.svg
        tags:
        - Node.js
        - Angular
        projectType: Angular
        language: TypeScript
        provider: Red Hat
        version: 2.2.0
      starterProjects:
      - name: nodejs-angular-starter
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stack-nodejs-angular.git
      components:
      - container:
          endpoints:
          - name: http-angular
            targetPort: 4200
          image: registry.access.redhat.com/ubi8/nodejs-18:1-81
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
        name: runtime
      commands:
      - exec:
          commandLine: npm install
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: install
      - exec:
          commandLine: npm run start
          component: runtime
          group:
            isDefault: true
            kind: run
          hotReloadCapable: true
          workingDir: ${PROJECT_SOURCE}
        id: run
    question: "Could you generate a devfile sample with name nodejs-angular using Node.js, Angular and TypeScript as programming language? The devfile should\
      \ have 2 commands. 1: id install, 2: id run. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-18:1-81."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: python
        projectType: Python
        displayName: Python
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/python.svg
        description: Python is an interpreted, object-oriented, high-level programming language
          with dynamic semantics. Its high-level built in data structures, combined with
          dynamic typing and dynamic binding, make it very attractive for Rapid Application
          Development, as well as for use as a scripting or glue language to connect existing
          components together.
        language: Python
        version: 1.0.1
        provider: Red Hat
        tags:
        - Python
        - Pip
        - Flask
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: python
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: python-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 50Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
            secure: true
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name python using Python, Pip, Flask and Python as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: python
        displayName: Python
        description: test
        projectType: Python
        language: Python
        version: 2.0.2
    question: "Could you generate a devfile sample with name python and Python as programming language?"
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: python
        displayName: Python
        description: test
        projectType: Python
        language: Python
        version: 2.0.2
    question: "Could you generate a devfile sample with name python and Python as programming language?"
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: python
        displayName: Python
        description: test
        projectType: Python
        language: Python
        version: 2.0.2
    question: "Could you generate a devfile sample with name python and Python as programming language?"
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: python
        displayName: Python
        description: test
        projectType: Python
        language: Python
        version: 2.0.2
    question: "Could you generate a devfile sample with name python and Python as programming language?"
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: dotnet50
        displayName: .NET 5.0
        description: .NET 5.0 application
        icon: https://github.com/dotnet/brand/raw/main/logo/dotnet-logo.png
        tags:
        - .NET
        - .NET 5.0
        projectType: dotnet
        language: .NET
        version: 1.0.3
      starterProjects:
      - name: dotnet50-example
        git:
          checkoutFrom:
            remote: origin
            revision: dotnet-5.0
          remotes:
            origin: https://github.com/redhat-developer/s2i-dotnetcore-ex
        subDir: app
      components:
      - name: dotnet
        container:
          image: registry.access.redhat.com/ubi8/dotnet-50:5.0-39
          args:
          - tail
          - -f
          - /dev/null
          mountSources: true
          env:
          - name: CONFIGURATION
            value: Debug
          - name: STARTUP_PROJECT
            value: app.csproj
          - name: ASPNETCORE_ENVIRONMENT
            value: Development
          - name: ASPNETCORE_URLS
            value: http://*:8080
          endpoints:
          - name: http-dotnet50
            targetPort: 8080
      commands:
      - id: build
        exec:
          workingDir: ${PROJECT_SOURCE}
          commandLine: kill $(pidof dotnet); dotnet build -c $CONFIGURATION $STARTUP_PROJECT
            /p:UseSharedCompilation=false
          component: dotnet
          group:
            isDefault: true
            kind: build
      - id: run
        exec:
          workingDir: ${PROJECT_SOURCE}
          commandLine: dotnet run -c $CONFIGURATION --no-build --project $STARTUP_PROJECT
            --no-launch-profile
          component: dotnet
          group:
            isDefault: true
            kind: run
    question: "Could you generate a devfile sample with name dotnet50 using .NET, .NET 5.0 and .NET as programming language? The devfile should have 2 commands.\
      \ 1: id build, 2: id run. The devfile should have 1 components. 1: name dotnet and container image registry.access.redhat.com/ubi8/dotnet-50:5.0-39."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: dotnet50
        displayName: .NET 5.0
        description: .NET 5.0 application
        icon: https://github.com/dotnet/brand/raw/main/logo/dotnet-logo.png
        tags:
        - .NET
        - .NET 5.0
        projectType: dotnet
        language: .NET
        version: 1.0.3
      starterProjects:
      - name: dotnet50-example
        git:
          checkoutFrom:
            remote: origin
            revision: dotnet-5.0
          remotes:
            origin: https://github.com/redhat-developer/s2i-dotnetcore-ex
        subDir: app
      components:
      - name: dotnet
        container:
          image: registry.access.redhat.com/ubi8/dotnet-50:5.0-39
          args:
          - tail
          - -f
          - /dev/null
          mountSources: true
          env:
          - name: CONFIGURATION
            value: Debug
          - name: STARTUP_PROJECT
            value: app.csproj
          - name: ASPNETCORE_ENVIRONMENT
            value: Development
          - name: ASPNETCORE_URLS
            value: http://*:8080
          endpoints:
          - name: http-dotnet50
            targetPort: 8080
      commands:
      - id: build
        exec:
          workingDir: ${PROJECT_SOURCE}
          commandLine: kill $(pidof dotnet); dotnet build -c $CONFIGURATION $STARTUP_PROJECT
            /p:UseSharedCompilation=false
          component: dotnet
          group:
            isDefault: true
            kind: build
      - id: run
        exec:
          workingDir: ${PROJECT_SOURCE}
          commandLine: dotnet run -c $CONFIGURATION --no-build --project $STARTUP_PROJECT
            --no-launch-profile
          component: dotnet
          group:
            isDefault: true
            kind: run
    question: "Could you generate a devfile sample with name dotnet50 using .NET, .NET 5.0 and .NET as programming language? The devfile should have 2 commands.\
      \ 1: id build, 2: id run. The devfile should have 1 components. 1: name dotnet and container image registry.access.redhat.com/ubi8/dotnet-50:5.0-39."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: java-maven
        version: 1.1.0
        displayName: Maven Java
        description: Upstream Maven and OpenJDK 11
        tags:
        - Java
        - Maven
        projectType: maven
        language: java
      starterProjects:
      - name: springbootproject
        git:
          remotes:
            origin: https://github.com/odo-devfiles/springboot-ex.git
      components:
      - name: tools
        container:
          image: quay.io/eclipse/che-java11-maven:nightly
          memoryLimit: 512Mi
          mountSources: true
          endpoints:
          - name: http-8080
            targetPort: 8080
          volumeMounts:
          - name: m2
            path: /home/user/.m2
      - name: m2
        volume: {}
      commands:
      - id: mvn-package
        exec:
          component: tools
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository package
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: tools
          commandLine: java -jar target/*.jar
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: tools
          commandLine: java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=${DEBUG_PORT},suspend=n
            -jar target/*.jar
          group:
            kind: debug
            isDefault: true
    question: "Could you generate a devfile sample with name java-maven using Java, Maven and java as programming language? The devfile should have 3 commands.\
      \ 1: id mvn-package, 2: id run, 3: id debug. The devfile should have 2 components. 1: name tools and container image quay.io/eclipse/che-java11-maven:nightly,\
      \ 2: name m2 and container image ."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: java-maven
        version: 1.1.0
        displayName: Maven Java
        description: Upstream Maven and OpenJDK 11
        tags:
        - Java
        - Maven
        projectType: maven
        language: java
      starterProjects:
      - name: springbootproject
        git:
          remotes:
            origin: https://github.com/odo-devfiles/springboot-ex.git
      components:
      - name: tools
        container:
          image: quay.io/eclipse/che-java11-maven:nightly
          memoryLimit: 512Mi
          mountSources: true
          endpoints:
          - name: http-8080
            targetPort: 8080
          volumeMounts:
          - name: m2
            path: /home/user/.m2
      - name: m2
        volume: {}
      commands:
      - id: mvn-package
        exec:
          component: tools
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository package
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: tools
          commandLine: java -jar target/*.jar
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: tools
          commandLine: java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=${DEBUG_PORT},suspend=n
            -jar target/*.jar
          group:
            kind: debug
            isDefault: true
    question: "Could you generate a devfile sample with name java-maven using Java, Maven and java as programming language? The devfile should have 3 commands.\
      \ 1: id mvn-package, 2: id run, 3: id debug. The devfile should have 2 components. 1: name tools and container image quay.io/eclipse/che-java11-maven:nightly,\
      \ 2: name m2 and container image ."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: java-quarkus
        version: 1.1.0
        website: https://quarkus.io
        displayName: Quarkus Java
        description: Upstream Quarkus with Java+GraalVM
        tags:
        - Java
        - Quarkus
        projectType: quarkus
        language: java
      starterProjects:
      - name: community
        zip:
          location: https://code.quarkus.io/d?e=io.quarkus%3Aquarkus-resteasy&e=io.quarkus%3Aquarkus-micrometer&e=io.quarkus%3Aquarkus-smallrye-health&e=io.quarkus%3Aquarkus-openshift&cn=devfile
      - name: redhat-product
        zip:
          location: https://code.quarkus.redhat.com/d?e=io.quarkus%3Aquarkus-resteasy&e=io.quarkus%3Aquarkus-smallrye-health&e=io.quarkus%3Aquarkus-openshift
      components:
      - name: tools
        container:
          image: quay.io/eclipse/che-quarkus:nightly
          memoryLimit: 1512Mi
          mountSources: true
          volumeMounts:
          - name: m2
            path: /home/user/.m2
          endpoints:
          - name: 8080-http
            targetPort: 8080
      - name: m2
        volume:
          size: 3Gi
      commands:
      - id: init-compile
        exec:
          component: tools
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository compile
          workingDir: $PROJECTS_ROOT
      - id: dev-run
        exec:
          component: tools
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository quarkus:dev -Dquarkus.http.host=0.0.0.0
            -Djava.util.logging.manager=org.jboss.logmanager.LogManager
          hotReloadCapable: true
          group:
            kind: run
            isDefault: true
          workingDir: $PROJECTS_ROOT
      - id: dev-debug
        exec:
          component: tools
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository quarkus:dev -Dquarkus.http.host=0.0.0.0
            -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Ddebug=${DEBUG_PORT}
          hotReloadCapable: true
          group:
            kind: debug
            isDefault: true
          workingDir: $PROJECTS_ROOT
      events:
        postStart:
        - init-compile
    question: "Could you generate a devfile sample with name java-quarkus using Java, Quarkus and java as programming language? The devfile should have\
      \ 3 commands. 1: id init-compile, 2: id dev-run, 3: id dev-debug. The devfile should have 2 components. 1: name tools and container image quay.io/eclipse/che-quarkus:nightly,\
      \ 2: name m2 and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: go
        displayName: Go Runtime - Trusted Application Pipeline
        description: Go Runtime http based application with advanced continuous integration
          pipeline covering building, CVE scanning, security scanning, signatures,  attestations,
          SLSA provenance and SBOM along with Gitops-based continuous deployment
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/golang.svg
        language: Go
        projectType: Go
        tags:
        - Go
        - sscs
        - sbom
        - acs
        version: 1.1.0
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: go
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: go-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 10Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
            secure: true
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name go using Go, sscs, sbom, acs and Go as programming language? The devfile should have 3 commands.\
      \ 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2: name kubernetes-deploy\
      \ and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: go
        displayName: Go Runtime - Trusted Application Pipeline
        description: Go Runtime http based application with advanced continuous integration
          pipeline covering building, CVE scanning, security scanning, signatures,  attestations,
          SLSA provenance and SBOM along with Gitops-based continuous deployment
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/golang.svg
        language: Go
        projectType: Go
        tags:
        - Go
        - sscs
        - sbom
        - acs
        version: 1.1.0
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: go
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: go-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 10Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
            secure: true
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name go using Go, sscs, sbom, acs and Go as programming language? The devfile should have 3 commands.\
      \ 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2: name kubernetes-deploy\
      \ and container image ."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: nodejs
        version: 1.0.0
        displayName: NodeJS Runtime
        description: Stack with NodeJS 12
        tags:
        - NodeJS
        - Express
        - ubi8
        projectType: nodejs
        language: nodejs
      starterProjects:
      - name: nodejs-starter
        git:
          remotes:
            origin: https://github.com/odo-devfiles/nodejs-ex.git
      components:
      - name: runtime
        container:
          image: registry.access.redhat.com/ubi8/nodejs-14:latest
          memoryLimit: 1024Mi
          mountSources: true
          sourceMapping: /project
          endpoints:
          - name: http-3000
            targetPort: 3000
      commands:
      - id: install
        exec:
          component: runtime
          commandLine: npm install
          workingDir: /project
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: runtime
          commandLine: npm start
          workingDir: /project
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: runtime
          commandLine: npm run debug
          workingDir: /project
          group:
            kind: debug
            isDefault: true
      - id: test
        exec:
          component: runtime
          commandLine: npm test
          workingDir: /project
          group:
            kind: test
            isDefault: true
    question: "Could you generate a devfile sample with name nodejs using NodeJS, Express, ubi8 and nodejs as programming language? The devfile should have\
      \ 4 commands. 1: id install, 2: id run, 3: id debug, 4: id test. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-14:latest."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: nodejs
        version: 1.0.0
        displayName: NodeJS Runtime
        description: Stack with NodeJS 12
        tags:
        - NodeJS
        - Express
        - ubi8
        projectType: nodejs
        language: nodejs
      starterProjects:
      - name: nodejs-starter
        git:
          remotes:
            origin: https://github.com/odo-devfiles/nodejs-ex.git
      components:
      - name: runtime
        container:
          image: registry.access.redhat.com/ubi8/nodejs-14:latest
          memoryLimit: 1024Mi
          mountSources: true
          sourceMapping: /project
          endpoints:
          - name: http-3000
            targetPort: 3000
      commands:
      - id: install
        exec:
          component: runtime
          commandLine: npm install
          workingDir: /project
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: runtime
          commandLine: npm start
          workingDir: /project
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: runtime
          commandLine: npm run debug
          workingDir: /project
          group:
            kind: debug
            isDefault: true
      - id: test
        exec:
          component: runtime
          commandLine: npm test
          workingDir: /project
          group:
            kind: test
            isDefault: true
    question: "Could you generate a devfile sample with name nodejs using NodeJS, Express, ubi8 and nodejs as programming language? The devfile should have\
      \ 4 commands. 1: id install, 2: id run, 3: id debug, 4: id test. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-14:latest."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-quarkus
        version: 1.2.1
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        icon: https://design.jboss.org/quarkus/logo/final/SVG/quarkus_icon_rgb_default.svg
        website: https://quarkus.io
        displayName: Quarkus Java
        description: Quarkus with Java
        tags:
        - Java
        - Quarkus
        projectType: Quarkus
        language: Java
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: java-quarkus
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: java-quarkus-image:latest
          dockerfile:
            uri: src/main/docker/Dockerfile.jvm.staged
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 100Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
            secure: true
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-quarkus using Java, Quarkus and Java as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: nodejs
        version: 1.0.1
        displayName: Node.js Runtime
        description: Stack with Node.js 14
        tags:
        - NodeJS
        - Express
        - ubi8
        projectType: nodejs
        language: nodejs
      starterProjects:
      - name: nodejs-starter
        git:
          remotes:
            origin: https://github.com/odo-devfiles/nodejs-ex.git
      components:
      - name: runtime
        container:
          image: registry.access.redhat.com/ubi8/nodejs-14:latest
          memoryLimit: 1024Mi
          mountSources: true
          sourceMapping: /project
          endpoints:
          - name: http-3000
            targetPort: 3000
      commands:
      - id: install
        exec:
          component: runtime
          commandLine: npm install
          workingDir: /project
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: runtime
          commandLine: npm start
          workingDir: /project
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: runtime
          commandLine: npm run debug
          workingDir: /project
          group:
            kind: debug
            isDefault: true
      - id: test
        exec:
          component: runtime
          commandLine: npm test
          workingDir: /project
          group:
            kind: test
            isDefault: true
    question: "Could you generate a devfile sample with name nodejs using NodeJS, Express, ubi8 and nodejs as programming language? The devfile should have\
      \ 4 commands. 1: id install, 2: id run, 3: id debug, 4: id test. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-14:latest."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: hacbs-jvm-build-test-project
        version: 1.1.0
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        displayName: hacbs-jvm-build-test-project
        description: hacbs-jvm-build-test-project
        tags:
        - Java
        - Maven
        projectType: maven
        language: java
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: java-maven
        registryUrl: https://registry.devfile.io
    question: "Could you generate a devfile sample with name hacbs-jvm-build-test-project using Java, Maven and java as programming language?"
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: nodejs-angular
        displayName: Angular
        description: 'Angular is a development platform, built on TypeScript. As a platform,
          Angular includes: A component-based framework for building scalable web applications
          A collection of well-integrated libraries that cover a wide variety of features,
          including routing, forms management, client-server communication, and more A suite
          of developer tools to help you develop, build, test, and update your code'
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/angular.svg
        tags:
        - Node.js
        - Angular
        projectType: Angular
        language: TypeScript
        provider: Red Hat
        version: 2.2.0
      starterProjects:
      - name: nodejs-angular-starter
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stack-nodejs-angular.git
      components:
      - container:
          endpoints:
          - name: http-angular
            targetPort: 4200
          image: registry.access.redhat.com/ubi8/nodejs-18:1-81
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
        name: runtime
      commands:
      - exec:
          commandLine: npm install
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: install
      - exec:
          commandLine: npm run start
          component: runtime
          group:
            isDefault: true
            kind: run
          hotReloadCapable: true
          workingDir: ${PROJECT_SOURCE}
        id: run
    question: "Could you generate a devfile sample with name nodejs-angular using Node.js, Angular and TypeScript as programming language? The devfile should\
      \ have 2 commands. 1: id install, 2: id run. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-18:1-81."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: python22222
        projectType: python
        language: python
        version: 1.0.0
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: python
        registryUrl: https://registry.devfile.io
      components:
      - name: outerloop-build
        image:
          imageName: python-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: outerloop-deploy
        kubernetes:
          uri: outerloop-deploy.yaml
      commands:
      - id: build-image
        apply:
          component: outerloop-build
      - id: deployk8s
        apply:
          component: outerloop-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name python22222 and python as programming language? The devfile should have 3 commands. 1: id build-image,\
      \ 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name outerloop-build and container image , 2: name outerloop-deploy and\
      \ container image ."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: openshift-quickstart
        version: 1.0.0
        description: OpenShift Quickstart Apps
        projectType: springboot
        language: Java
        provider: Red Hat
        tags:
        - Java
        - spring
        displayName: OpenShift Quickstart Apps
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/spring.svg
      components:
      - name: tools
        container:
          image: registry.redhat.io/devspaces/udi-rhel8@sha256:7e942155ebd808256e34a9411b85e41ae41d771353146cf6c15ed0b6bd4caacd
          env:
          - name: DEBUG_PORT
            value: '5858'
          - name: POSTGRES_DB
            value: sampledb
          - name: POSTGRES_USER
            value: spring
          - name: POSTGRES_PASSWORD
            value: spring123
          endpoints:
          - exposure: none
            name: debug
            protocol: tcp
            targetPort: 5858
          - exposure: public
            name: http-endpoint
            protocol: https
            targetPort: 8080
          volumeMounts:
          - name: m2
            path: /home/user/.m2
          cpuLimit: '2'
          cpuRequest: '1'
          memoryLimit: 8G
          memoryRequest: 2G
          mountSources: true
      - name: postgresql
        container:
          image: registry.redhat.io/rhel9/postgresql-15
          env:
          - name: POSTGRESQL_USER
            value: spring
          - name: POSTGRESQL_PASSWORD
            value: spring123
          - name: POSTGRESQL_DATABASE
            value: sampledb
          endpoints:
          - name: postgresql
            exposure: internal
            targetPort: 5432
            attributes:
              discoverable: 'true'
          memoryLimit: 512Mi
          mountSources: true
          volumeMounts:
          - name: postgresql-storage
            path: /var/lib/mongodb/data
      - name: postgres
        openshift:
          uri: deployment.yaml
      - name: m2
        volume:
          size: 1G
      - name: postgresql-storage
        volume:
          size: 256Mi
      commands:
      - id: 1-package
        exec:
          label: 1. Package the application
          component: tools
          workingDir: ${PROJECTS_ROOT}/openshift-quickstart/basic-with-db/person-app
          commandLine: mvn package
          group:
            kind: build
            isDefault: true
      - id: 2-startdev
        exec:
          label: 2. Start Development mod
          component: tools
          workingDir: ${PROJECTS_ROOT}/quarkus-quickstarts/basic-with-db/person-app
          commandLine: mvn compile spring-boot:run
          group:
            kind: run
            isDefault: true
      - id: 3-deploy
        apply:
          component: postgres
    question: "Could you generate a devfile sample with name openshift-quickstart using Java, spring and Java as programming language? The devfile should\
      \ have 3 commands. 1: id 1-package, 2: id 2-startdev, 3: id 3-deploy. The devfile should have 5 components. 1: name tools and container image registry.redhat.io/devspaces/udi-rhel8@sha256:7e942155ebd808256e34a9411b85e41ae41d771353146cf6c15ed0b6bd4caacd,\
      \ 2: name postgresql and container image registry.redhat.io/rhel9/postgresql-15, 3: name postgres and container image , 4: name m2 and container image\
      \ , 5: name postgresql-storage and container image ."
  - answer: |
      commands:
      - exec:
          commandLine: pip install -r requirements.txt
          component: python-39
          group:
            isDefault: true
            kind: build
          hotReloadCapable: false
          workingDir: ${PROJECTS_ROOT}
        id: install-python-requirements-file
      - exec:
          commandLine: ./runapp.sh
          component: python-39
          group:
            isDefault: true
            kind: run
          hotReloadCapable: true
          workingDir: ${PROJECTS_ROOT}
        id: run
      - exec:
          commandLine: python3 ./runapp.py
          component: python-39
          group:
            isDefault: true
            kind: debug
          hotReloadCapable: true
          workingDir: ${PROJECTS_ROOT}
        id: debug
      components:
      - container:
          args:
          - tail
          - -f
          - /dev/null
          endpoints:
          - exposure: internal
            name: debug
            secure: false
            targetPort: 5679
          - exposure: public
            name: http-python
            secure: false
            targetPort: 5000
          env:
          - name: DEBUG_PORT
            value: '5679'
          - name: ODO_DEBUG
            value: 'true'
          - name: APP_MODULE
            value: runapp:app
          - name: APP_CONFIG
            value: ./gunicorn/gunicorn.conf.py
          - name: FLASK_PORT
            value: '5000'
          - name: FLASK_HOST
            value: 0.0.0.0
          image: registry.access.redhat.com/ubi9/python-39:latest
          mountSources: true
        name: python-39
      metadata:
        architectures:
        - amd64
        description: Devfile to help deploy and debug a demo flask application
        displayName: Python
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/python.svg
        language: Python
        name: testflask
        projectType: Python
        provider: Moyo
        tags:
        - Python
        - Pip
        - Flask
        version: 3.0.0
        website: https://github.com/MoOyeg/testFlask
      schemaVersion: 2.2.0
      variables:
        APP_CONFIG: ./gunicorn/gunicorn.conf.py
        APP_MODULE: runapp:app
        APPLICATION_PORT: '5000'
        DEBUG_PORT: '5679'
        ODO_DEBUG: 'true'
        PYTHON_IMAGE: registry.access.redhat.com/ubi9/python-39:latest
        RESOURCE_NAME: testflask
    question: "Could you generate a devfile sample with name testflask using Python, Pip, Flask and Python as programming language? The devfile should have\
      \ 3 commands. 1: id install-python-requirements-file, 2: id run, 3: id debug. The devfile should have 1 components. 1: name python-39 and container\
      \ image registry.access.redhat.com/ubi9/python-39:latest."
  - answer: |
      commands:
      - exec:
          commandLine: mvn clean -Dmaven.repo.local=/home/user/.m2/repository package -Dmaven.test.skip=true
            -P openshift
          component: tools
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: build
      - exec:
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository spring-boot:run
            -P openshift -P openshift
          component: tools
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
      - exec:
          commandLine: java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=${DEBUG_PORT},suspend=n
            -jar target/*.jar
          component: tools
          group:
            isDefault: true
            kind: debug
          workingDir: ${PROJECT_SOURCE}
        id: debug
      components:
      - container:
          endpoints:
          - name: 8080-tcp
            targetPort: 8080
          env:
          - name: DEBUG_PORT
            value: '5858'
          image: quay.io/eclipse/che-java11-maven:next
          memoryLimit: 768Mi
          mountSources: true
          volumeMounts:
          - name: m2
            path: /home/user/.m2
        name: tools
      - name: m2
        volume:
          size: 3Gi
      metadata:
        description: "Spring Boot\xAE using Java"
        displayName: "Spring Boot\xAE"
        globalMemoryLimit: 2674Mi
        icon: https://spring.io/images/projects/spring-edf462fec682b9d48cf628eaf9e19521.svg
        language: java
        name: menu
        projectType: spring
        tags:
        - Java
        - Spring
        version: 1.1.0
      schemaVersion: 2.0.0
      starterProjects:
      - git:
          remotes:
            origin: https://github.com/odo-devfiles/springboot-ex.git
        name: springbootproject
    question: "Could you generate a devfile sample with name menu using Java, Spring and java as programming language? The devfile should have 3 commands.\
      \ 1: id build, 2: id run, 3: id debug. The devfile should have 2 components. 1: name tools and container image quay.io/eclipse/che-java11-maven:next,\
      \ 2: name m2 and container image ."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: nodejs-nextjs
        displayName: Next.js
        description: 'Next.js gives you the best developer experience with all the features
          you need for production: hybrid static & server rendering, TypeScript support,
          smart bundling, route pre-fetching, and more. No config needed.'
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/next-js.svg
        tags:
        - Node.js
        - Next.js
        projectType: Next.js
        language: TypeScript
        provider: Red Hat
        version: 1.0.3
      starterProjects:
      - name: nodejs-nextjs-starter
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stack-nodejs-nextjs.git
      components:
      - container:
          endpoints:
          - name: http-nextjs
            targetPort: 3000
          image: registry.access.redhat.com/ubi8/nodejs-16:1-153
          command:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
        name: runtime
      commands:
      - exec:
          commandLine: npm install
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: install
      - exec:
          commandLine: npm run dev
          component: runtime
          group:
            isDefault: true
            kind: run
          hotReloadCapable: true
          workingDir: ${PROJECT_SOURCE}
        id: run
    question: "Could you generate a devfile sample with name nodejs-nextjs using Node.js, Next.js and TypeScript as programming language? The devfile should\
      \ have 2 commands. 1: id install, 2: id run. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-16:1-153."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-springboot
        version: 1.2.1
        attributes:
          alpha.dockerimage-port: 8081
        displayName: "Spring Boot\xAE"
        description: "Spring Boot\xAE using Maven"
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/spring.svg
        tags:
        - Java
        - Spring
        projectType: springboot
        language: Java
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: java-springboot
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: java-springboot-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 300Mi
          deployment/memoryRequest: 180Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-springboot using Java, Spring and Java as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: nodejs-react
        displayName: React
        description: React is a free and open-source front-end JavaScript library for building
          user interfaces based on UI components. It is maintained by Meta and a community
          of individual developers and companies.
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/react.svg
        tags:
        - Node.js
        - React
        projectType: React
        language: TypeScript
        provider: Red Hat
        version: 2.1.0
      starterProjects:
      - name: nodejs-react-starter
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stacks-nodejs-react.git
      components:
      - container:
          endpoints:
          - name: http-react
            targetPort: 3000
          image: registry.access.redhat.com/ubi8/nodejs-18:1-94
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
        name: runtime
      commands:
      - exec:
          commandLine: npm install
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: install
      - exec:
          commandLine: npm run dev
          component: runtime
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
    question: "Could you generate a devfile sample with name nodejs-react using Node.js, React and TypeScript as programming language? The devfile should\
      \ have 2 commands. 1: id install, 2: id run. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-18:1-94."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: java-springboot
        displayName: "Spring Boot\xAE"
        description: "Java application using Spring Boot\xAE and OpenJDK 11"
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/spring.svg
        tags:
        - Java
        - Spring
        projectType: springboot
        language: Java
        version: 1.2.0
        globalMemoryLimit: 2674Mi
      starterProjects:
      - name: springbootproject
        git:
          remotes:
            origin: https://github.com/odo-devfiles/springboot-ex.git
      components:
      - name: tools
        container:
          image: registry.access.redhat.com/ubi8/openjdk-11:1.18-2.1705602259
          command:
          - tail
          - -f
          - /dev/null
          memoryLimit: 768Mi
          mountSources: true
          endpoints:
          - name: http-springboot
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
          volumeMounts:
          - name: m2
            path: /home/user/.m2
          env:
          - name: DEBUG_PORT
            value: '5858'
      - name: m2
        volume:
          size: 3Gi
      commands:
      - id: build
        exec:
          component: tools
          workingDir: ${PROJECT_SOURCE}
          commandLine: mvn clean -Dmaven.repo.local=/home/user/.m2/repository package -Dmaven.test.skip=true
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: tools
          workingDir: ${PROJECT_SOURCE}
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository spring-boot:run
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: tools
          workingDir: ${PROJECT_SOURCE}
          commandLine: java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=${DEBUG_PORT},suspend=n
            -jar target/*.jar
          group:
            kind: debug
            isDefault: true
    question: "Could you generate a devfile sample with name java-springboot using Java, Spring and Java as programming language? The devfile should have\
      \ 3 commands. 1: id build, 2: id run, 3: id debug. The devfile should have 2 components. 1: name tools and container image registry.access.redhat.com/ubi8/openjdk-11:1.18-2.1705602259,\
      \ 2: name m2 and container image ."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: python
        version: 1.0.0
        displayName: Python
        description: Python Stack with Python 3.7
        icon: https://www.python.org/static/community_logos/python-logo-generic.svg
        tags:
        - Python
        - pip
        projectType: python
        language: python
      starterProjects:
      - name: python-example
        git:
          remotes:
            origin: https://github.com/odo-devfiles/python-ex
      components:
      - name: py-web
        container:
          image: quay.io/eclipse/che-python-3.7:nightly
          mountSources: true
          endpoints:
          - name: web
            targetPort: 8080
      commands:
      - id: pip-install-requirements
        exec:
          commandLine: pip install --user -r requirements.txt
          group:
            kind: build
            isDefault: true
          component: py-web
      - id: run-app
        exec:
          commandLine: python app.py
          workingDir: ${PROJECTS_ROOT}
          component: py-web
          group:
            kind: run
            isDefault: true
      - id: debugpy
        exec:
          commandLine: pip install --user debugpy && python -m debugpy --listen 0.0.0.0:${DEBUG_PORT}
            app.py
          workingDir: ${PROJECTS_ROOT}
          component: py-web
          group:
            kind: debug
    question: "Could you generate a devfile sample with name python using Python, pip and python as programming language? The devfile should have 3 commands.\
      \ 1: id pip-install-requirements, 2: id run-app, 3: id debugpy. The devfile should have 1 components. 1: name py-web and container image quay.io/eclipse/che-python-3.7:nightly."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: nodejs
        projectType: nodejs
        language: golang
        version: 1.0.0
        provider: Red Hat
      components:
      - name: outerloop-build
        image:
          imageName: fib-node:latest
          dockerfile:
            uri: services/fib-node/Dockerfile
            buildContext: services/fib-node
            rootRequired: false
      - name: outerloop-deploy
        kubernetes:
          uri: deploy/services/fib-node/deployment.yaml
      commands:
      - id: build-image
        apply:
          component: outerloop-build
      - id: deployk8s
        apply:
          component: outerloop-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name nodejs and golang as programming language? The devfile should have 3 commands. 1: id build-image,\
      \ 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name outerloop-build and container image , 2: name outerloop-deploy and\
      \ container image ."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: aws-universal
        version: 1.0.1
        displayName: AWS Universal
        description: Stack with AWS Universal Tooling
        tags:
        - aws
        - al2
        projectType: aws
      components:
      - name: aws-runtime
        container:
          image: public.ecr.aws/aws-mde/universal-image:latest
          mountSources: true
          volumeMounts:
          - name: docker-store
            path: /var/lib/docker
          env:
          - name: TEST_ENV
            value: I am testing the environment variable!
          - name: PYTHON_VERSION
            value: 3.12.2 ha ha ha
          - name: TEST_SECRET_1
            value: I am a secret ${Secrets.test_secret}
          - name: TEST_SECRET_2
            value: ${Secrets.test_secret}
          - name: TEST_SECRET_3
            value: ${{Secrets.test_secret}}
          - name: TEST_SECRET_4
            value: '{{Secrets.test_secret}}'
      - name: docker-store
        volume:
          size: 16Gi
      commands:
      - id: install
        exec:
          component: aws-runtime
          commandLine: pip install -r requirements.txt
          workingDir: /projects/advent-of-code-2023
      events:
        postStart:
        - install
    question: "Could you generate a devfile sample with name aws-universal using aws, al2? The devfile should have 1 commands. 1: id install. The devfile\
      \ should have 2 components. 1: name aws-runtime and container image public.ecr.aws/aws-mde/universal-image:latest, 2: name docker-store and container\
      \ image ."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: php-laravel
        displayName: Laravel
        description: Laravel is an open-source PHP framework, which is robust and easy to
          understand. It follows a model-view-controller design pattern. Laravel reuses
          the existing components of different frameworks which helps in creating a web
          application. The web application thus designed is more structured and pragmatic.
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/laravel.svg
        tags:
        - PHP
        - Composer
        - Laravel
        projectType: Laravel
        language: PHP
        provider: Red Hat
        version: 1.0.1
      starterProjects:
      - name: php-laravel-starter
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stack-php-laravel.git
      components:
      - container:
          endpoints:
          - name: http-laravel
            targetPort: 8000
          image: quay.io/devfile/composer:2.5.8
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
          mountSources: true
        name: runtime
      commands:
      - exec:
          commandLine: composer install
          component: runtime
          group:
            isDefault: false
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: install
      - exec:
          commandLine: cp .env.example .env
          component: runtime
          group:
            isDefault: false
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: cp-env
      - exec:
          commandLine: php artisan config:clear
          component: runtime
          group:
            isDefault: false
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: clear-config
      - exec:
          commandLine: php artisan key:generate
          component: runtime
          group:
            isDefault: false
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: gen-new-app-key
      - exec:
          commandLine: composer dump-autoload
          component: runtime
          group:
            isDefault: false
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: composer-dump
      - composite:
          commands:
          - install
          - cp-env
          - clear-config
          - gen-new-app-key
          - composer-dump
          group:
            isDefault: true
            kind: build
          label: Provision Laravel Server
          parallel: false
        id: init-server
      - exec:
          commandLine: php artisan serve --host=0.0.0.0
          component: runtime
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
    question: "Could you generate a devfile sample with name php-laravel using PHP, Composer, Laravel and PHP as programming language? The devfile should\
      \ have 7 commands. 1: id install, 2: id cp-env, 3: id clear-config, 4: id gen-new-app-key, 5: id composer-dump, 6: id init-server, 7: id run. The\
      \ devfile should have 1 components. 1: name runtime and container image quay.io/devfile/composer:2.5.8."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: go
        displayName: Go Runtime
        description: Go is an open source programming language that makes it easy to build
          simple, reliable, and efficient software.
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/golang.svg
        language: Go
        projectType: Go
        tags:
        - Go
        version: 1.1.0
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: go
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: go-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 100Mi
          deployment/memoryRequest: 10Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name go using Go and Go as programming language? The devfile should have 3 commands. 1: id build-image,\
      \ 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2: name kubernetes-deploy and container\
      \ image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-websphereliberty
        version: 0.9.0
        displayName: WebSphere Liberty Maven
        description: Java application Maven-built stack using the WebSphere Liberty runtime
        icon: https://raw.githubusercontent.com/OpenLiberty/logos/7fbb132949b9b2589e18c8d5665c1b107028a21d/logomark/svg/OL_logomark.svg
        tags:
        - Java
        - Maven
        architectures:
        - amd64
        - ppc64le
        - s390x
        language: java
        projectType: websphereliberty
        alpha.build-dockerfile: https://github.com/OpenLiberty/devfile-stack/releases/download/websphere-liberty-maven-0.9.0/Dockerfile
        alpha.deployment-manifest: https://github.com/OpenLiberty/devfile-stack/releases/download/websphere-liberty-maven-0.9.0/app-deploy.yaml
      starterProjects:
      - name: rest
        git:
          remotes:
            origin: https://github.com/OpenLiberty/devfile-stack-starters.git
      variables:
        liberty-version: 22.0.0.1
        liberty-plugin-version: 3.5.1
        mvn-cmd: mvn
        CONTAINER_IMAGE: demo-image:0
        COMPONENT_NAME: demo-app
      components:
      - name: dev
        container:
          image: icr.io/appcafe/websphere-liberty-devfile-stack:{{liberty-version}}
          memoryLimit: 768Mi
          mountSources: true
          endpoints:
          - exposure: public
            path: /
            name: ep1
            targetPort: 9080
            protocol: http
      - name: outerloop-build-app
        image:
          imageName: '{{CONTAINER_IMAGE}}'
          dockerfile:
            uri: ./Dockerfile
            buildContext: ${PROJECTS_ROOT}
      - name: outerloop-build-stack
        image:
          imageName: '{{CONTAINER_IMAGE}}'
          dockerfile:
            uri: ./Dockerfile
            buildContext: ${PROJECTS_ROOT}
      - name: myk8sdeploy
        kubernetes:
          uri: https://github.com/OpenLiberty/devfile-stack/releases/download/websphere-liberty-maven-0.9.0/app-deploy.yaml
      commands:
      - id: run
        exec:
          component: dev
          commandLine: echo "run command "; {{mvn-cmd}} -DinstallDirectory=/opt/ibm/wlp
            -Ddebug=false -DhotTests=true -DcompileWait=3 io.openliberty.tools:liberty-maven-plugin:{{liberty-plugin-version}}:dev
          workingDir: /projects
          hotReloadCapable: true
          group:
            kind: run
            isDefault: true
      - id: run-test-off
        exec:
          component: dev
          commandLine: echo "run-test-off command "; {{mvn-cmd}} -DinstallDirectory=/opt/ibm/wlp
            -Ddebug=false io.openliberty.tools:liberty-maven-plugin:{{liberty-plugin-version}}:dev
          workingDir: /projects
          hotReloadCapable: true
          group:
            kind: run
            isDefault: false
      - id: debug
        exec:
          component: dev
          commandLine: echo "debug command "; {{mvn-cmd}} -DinstallDirectory=/opt/ibm/wlp
            -DdebugPort=${DEBUG_PORT} io.openliberty.tools:liberty-maven-plugin:{{liberty-plugin-version}}:dev
            -Dliberty.env.WLP_DEBUG_REMOTE=y
          workingDir: /projects
          hotReloadCapable: true
          group:
            kind: debug
            isDefault: true
      - id: test
        exec:
          component: dev
          commandLine: echo "test command "; {{mvn-cmd}} compiler:compile failsafe:integration-test
            failsafe:verify
          workingDir: /projects
          hotReloadCapable: true
          group:
            kind: test
            isDefault: true
      - id: build-image-stack-provided
        apply:
          component: outerloop-build-stack
      - id: build-image-app-provided
        apply:
          component: outerloop-build-app
      - id: outerloop-deploy
        apply:
          component: myk8sdeploy
      - id: deploy
        composite:
          commands:
          - build-image-stack-provided
          - outerloop-deploy
          group:
            kind: deploy
            isDefault: true
      - id: deploy-app-image
        composite:
          commands:
          - build-image-app-provided
          - outerloop-deploy
          group:
            kind: deploy
    question: "Could you generate a devfile sample with name java-websphereliberty using Java, Maven and java as programming language? The devfile should\
      \ have 9 commands. 1: id run, 2: id run-test-off, 3: id debug, 4: id test, 5: id build-image-stack-provided, 6: id build-image-app-provided, 7: id\
      \ outerloop-deploy, 8: id deploy, 9: id deploy-app-image. The devfile should have 4 components. 1: name dev and container image icr.io/appcafe/websphere-liberty-devfile-stack:{{liberty-version}},\
      \ 2: name outerloop-build-app and container image , 3: name outerloop-build-stack and container image , 4: name myk8sdeploy and container image ."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: advent-of-code
        displayName: Advent of Code
        description: My advent of code solutions built with Maven 3.6 and OpenJDK 17
        tags:
        - Java
        - Maven
      projects:
      - name: advent-of-code
        git:
          remotes:
            origin: https://github.com/Mbd06b/advent-of-code.git
      components:
      - container:
          endpoints:
          - exposure: none
            name: debug
            protocol: tcp
            targetPort: 5005
          - exposure: public
            name: 8080-tcp
            protocol: http
            targetPort: 8080
          env:
          - name: CHE_DASHBOARD_URL
            value: https://code.ethosengine.com
          - name: CHE_PLUGIN_REGISTRY_URL
            value: https://code.ethosengine.com/plugin-registry/v3
          - name: CHE_PLUGIN_REGISTRY_INTERNAL_URL
            value: http://plugin-registry.eclipse-che.svc:8080/v3
          - name: OPENVSX_REGISTRY_URL
            value: https://open-vsx.org
          image: quay.io/devfile/universal-developer-image@sha256:6e4095cd243be852970fc7aec20935a0e3c334c5541aa82903fb803b61970ca0
          memoryLimit: 3Gi
          sourceMapping: /projects
          volumeMounts:
          - name: m2
            path: /home/user/.m2
        name: tools
      - name: m2
        volume:
          size: 1G
    question: "Could you generate a devfile sample with name advent-of-code using Java, Maven? The devfile should have 2 components. 1: name tools and container\
      \ image quay.io/devfile/universal-developer-image@sha256:6e4095cd243be852970fc7aec20935a0e3c334c5541aa82903fb803b61970ca0, 2: name m2 and container\
      \ image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: go
        displayName: Go Runtime
        description: Go (version 1.20.x) is an open source programming language that makes
          it easy to build simple, reliable, and efficient software.
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/golang.svg
        tags:
        - Go
        projectType: Go
        language: Go
        provider: Red Hat
        version: 2.3.0
      starterProjects:
      - name: go-starter
        description: A Go project with a simple HTTP server
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stack-go.git
      components:
      - name: build
        image:
          imageName: go-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: deploy
        kubernetes:
          uri: kubernetes/deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
      - container:
          endpoints:
          - name: http-go
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
          image: registry.access.redhat.com/ubi9/go-toolset:1.20.10-11
          args:
          - tail
          - -f
          - /dev/null
          env:
          - name: DEBUG_PORT
            value: '5858'
          memoryLimit: 1024Mi
          mountSources: true
        name: runtime
      commands:
      - id: build-image
        apply:
          component: build
      - id: deployk8s
        apply:
          component: deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
      - exec:
          env:
          - name: GOPATH
            value: ${PROJECT_SOURCE}/.go
          - name: GOCACHE
            value: ${PROJECT_SOURCE}/.cache
          commandLine: go build main.go
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: build
      - exec:
          commandLine: ./main
          component: runtime
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
      - exec:
          commandLine: "GOPATH=${PROJECT_SOURCE}/.go \\\nGOCACHE=${PROJECT_SOURCE}/.cache\
            \ \\\ndlv \\\n  --listen=127.0.0.1:${DEBUG_PORT} \\\n  --only-same-user=false\
            \ \\\n  --headless=true \\\n  --api-version=2 \\\n  --accept-multiclient \\\n\
            \  debug --continue main.go\n"
          component: runtime
          group:
            isDefault: true
            kind: debug
          workingDir: ${PROJECT_SOURCE}
        id: debug
    question: "Could you generate a devfile sample with name go using Go and Go as programming language? The devfile should have 6 commands. 1: id build-image,\
      \ 2: id deployk8s, 3: id deploy, 4: id build, 5: id run, 6: id debug. The devfile should have 3 components. 1: name build and container image , 2:\
      \ name deploy and container image , 3: name runtime and container image registry.access.redhat.com/ubi9/go-toolset:1.20.10-11."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: docker-shell-test
        version: 1.0.1
        displayName: Docker Do Nothing
        description: Minimal Dockerfile
        tags:
        - demo
        projectType: none
        language: none
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      components:
      - name: outerloop-build
        image:
          imageName: nodejs-image:latest
          dockerfile:
            uri: Dockerfile
            buildContext: .
            rootRequired: false
    question: "Could you generate a devfile sample with name docker-shell-test using demo and none as programming language? The devfile should have 1 components.\
      \ 1: name outerloop-build and container image ."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        description: 'Angular is a development platform, built on TypeScript. As a platform,
          Angular includes:

          A component-based framework for building scalable web applications

          A collection of well-integrated libraries that cover a wide variety of features,
          including routing, forms management, client-server communication, and more

          A suite of developer tools to help you develop, build, test, and update your code'
        displayName: Angular
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/angular.svg
        name: nodejs-angular
        projectType: Angular
        provider: Red Hat
        language: TypeScript
        tags:
        - NodeJS
        - Angular
        version: 2.0.2
      starterProjects:
      - name: nodejs-angular-starter
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stack-nodejs-angular.git
      components:
      - container:
          endpoints:
          - name: http-angular
            targetPort: 4200
          image: registry.access.redhat.com/ubi8/nodejs-16:latest
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
        name: runtime
      commands:
      - exec:
          commandLine: npm install
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: install
      - exec:
          commandLine: npm run start
          component: runtime
          group:
            isDefault: true
            kind: run
          hotReloadCapable: true
          workingDir: ${PROJECT_SOURCE}
        id: run
    question: "Could you generate a devfile sample with name nodejs-angular using NodeJS, Angular and TypeScript as programming language? The devfile should\
      \ have 2 commands. 1: id install, 2: id run. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-16:latest."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: nodejs
        displayName: Node.js Runtime
        description: Node.js 16 application
        icon: https://nodejs.org/static/images/logos/nodejs-new-pantone-black.svg
        tags:
        - Node.js
        - Express
        - ubi8
        projectType: Node.js
        language: JavaScript
        version: 2.1.1
      starterProjects:
      - name: nodejs-starter
        git:
          remotes:
            origin: https://github.com/odo-devfiles/nodejs-ex.git
      components:
      - name: runtime
        container:
          image: registry.access.redhat.com/ubi8/nodejs-16:latest
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
          mountSources: true
          env:
          - name: DEBUG_PORT
            value: '5858'
          endpoints:
          - name: http-node
            targetPort: 3000
          - exposure: none
            name: debug
            targetPort: 5858
      commands:
      - id: install
        exec:
          component: runtime
          commandLine: npm install
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: runtime
          commandLine: npm start
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: runtime
          commandLine: npm run debug
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: debug
            isDefault: true
      - id: test
        exec:
          component: runtime
          commandLine: npm test
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: test
            isDefault: true
    question: "Could you generate a devfile sample with name nodejs using Node.js, Express, ubi8 and JavaScript as programming language? The devfile should\
      \ have 4 commands. 1: id install, 2: id run, 3: id debug, 4: id test. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-16:latest."
  - answer: |
      commands:
      - exec:
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository compile
          component: tools
          workingDir: ${PROJECT_SOURCE}
        id: init-compile
      - exec:
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository quarkus:dev -Dquarkus.http.host=0.0.0.0
            -Djava.util.logging.manager=org.jboss.logmanager.LogManager
          component: tools
          group:
            isDefault: true
            kind: run
          hotReloadCapable: true
          workingDir: ${PROJECT_SOURCE}
        id: dev-run
      - exec:
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository quarkus:dev -Dquarkus.http.host=0.0.0.0
            -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Ddebug=${DEBUG_PORT}
          component: tools
          group:
            isDefault: true
            kind: debug
          hotReloadCapable: true
          workingDir: ${PROJECT_SOURCE}
        id: dev-debug
      components:
      - container:
          args:
          - tail
          - -f
          - /dev/null
          endpoints:
          - name: http-quarkus
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
          env:
          - name: DEBUG_PORT
            value: '5858'
          image: registry.access.redhat.com/ubi8/openjdk-17
          memoryLimit: 512Mi
          mountSources: true
          volumeMounts:
          - name: m2
            path: /home/user/.m2
        name: tools
      - name: m2
        volume:
          size: 3Gi
      events:
        postStart:
        - init-compile
      metadata:
        description: Quarkus with Java
        displayName: Quarkus Java
        icon: https://design.jboss.org/quarkus/logo/final/SVG/quarkus_icon_rgb_default.svg
        language: Java
        name: serviceb
        projectType: Quarkus
        tags:
        - Java
        - Quarkus
        version: 1.3.0
        website: https://quarkus.io
      schemaVersion: 2.1.0
      starterProjects:
      - name: community
        zip:
          location: https://code.quarkus.io/d?e=io.quarkus%3Aquarkus-resteasy&e=io.quarkus%3Aquarkus-micrometer&e=io.quarkus%3Aquarkus-smallrye-health&e=io.quarkus%3Aquarkus-openshift&cn=devfile
      - name: redhat-product
        zip:
          location: https://code.quarkus.redhat.com/d?e=io.quarkus%3Aquarkus-resteasy&e=io.quarkus%3Aquarkus-smallrye-health&e=io.quarkus%3Aquarkus-openshift
    question: "Could you generate a devfile sample with name serviceb using Java, Quarkus and Java as programming language? The devfile should have 3 commands.\
      \ 1: id init-compile, 2: id dev-run, 3: id dev-debug. The devfile should have 2 components. 1: name tools and container image registry.access.redhat.com/ubi8/openjdk-17,\
      \ 2: name m2 and container image ."
  - answer: |
      commands:
      - exec:
          commandLine: yarn install --frozen-lockfile
          component: builder
          group:
            isDefault: true
            kind: build
          workingDir: /project
        id: install
      - exec:
          commandLine: yarn build && yarn install --production --ignore-scripts --prefer-offline
          component: builder
          group:
            isDefault: true
            kind: run
          workingDir: /project
        id: run
      components:
      - container:
          image: node:slim
          memoryLimit: 1024Mi
          mountSources: true
          sourceMapping: /project
          volumeMounts:
          - name: dist
            path: /project/dist/nodejs-angular
        name: builder
      - container:
          endpoints:
          - name: http
            targetPort: 8080
          image: nginxinc/nginx-unprivileged:alpine
          memoryLimit: 1024Mi
          mountSources: false
          volumeMounts:
          - name: dist
            path: /usr/share/nginx/html
        name: server
      - name: dist
        volume:
          size: 4Gi
      metadata:
        description: Stack with Node.js 14
        displayName: Node.js Runtime
        language: nodejs
        name: nodejs-angular
        projectType: nodejs
        tags:
        - NodeJS
        - Express
        - ubi8
        version: 1.0.1
      schemaVersion: 2.0.0
      starterProjects:
      - name: nodejs-angular-starter
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/schultzp2020/devfile-starter-projects.git
        subDir: nodejs-angular
    question: "Could you generate a devfile sample with name nodejs-angular using NodeJS, Express, ubi8 and nodejs as programming language? The devfile\
      \ should have 2 commands. 1: id install, 2: id run. The devfile should have 3 components. 1: name builder and container image node:slim, 2: name server\
      \ and container image nginxinc/nginx-unprivileged:alpine, 3: name dist and container image ."
  - answer: |
      commands:
      - exec:
          commandLine: npm install
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: install
      - exec:
          commandLine: npm start
          component: runtime
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
      - exec:
          commandLine: npm run debug
          component: runtime
          group:
            isDefault: true
            kind: debug
          workingDir: ${PROJECT_SOURCE}
        id: debug
      - exec:
          commandLine: npm test
          component: runtime
          group:
            isDefault: true
            kind: test
          workingDir: ${PROJECT_SOURCE}
        id: test
      components:
      - container:
          endpoints:
          - name: http-3000
            targetPort: 3000
          - name: port-5858-tcp
            protocol: tcp
            targetPort: 5858
          image: registry.access.redhat.com/ubi8/nodejs-14:latest
          memoryLimit: 1024Mi
          mountSources: true
        name: runtime
      metadata:
        description: Stack with Node.js 14
        displayName: Node.js Runtime
        icon: https://nodejs.org/static/images/logos/nodejs-new-pantone-black.svg
        language: javascript
        name: odo-website
        projectType: nodejs
        tags:
        - NodeJS
        - Express
        - ubi8
        version: 1.0.1
      schemaVersion: 2.0.0
      starterProjects:
      - git:
          remotes:
            origin: https://github.com/odo-devfiles/nodejs-ex.git
        name: nodejs-starter
    question: "Could you generate a devfile sample with name odo-website using NodeJS, Express, ubi8 and javascript as programming language? The devfile\
      \ should have 4 commands. 1: id install, 2: id run, 3: id debug, 4: id test. The devfile should have 1 components. 1: name runtime and container image\
      \ registry.access.redhat.com/ubi8/nodejs-14:latest."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-springboot
        version: 1.2.1
        attributes:
          alpha.dockerimage-port: 8081
        displayName: "Spring Boot\xAE"
        description: "Spring Boot\xAE using Maven"
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/spring.svg
        tags:
        - Java
        - Spring
        projectType: springboot
        language: Java
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: java-springboot
        registryUrl: https://registry.devfile.io
        version: 1.2.0
      components:
      - name: image-build
        image:
          imageName: java-springboot-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 180Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
            secure: true
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-springboot using Java, Spring and Java as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: rhods-quick-course
        displayName: RHODS Quick Course
        description: RHODS Quick Course published using Antora
        icon: https://nodejs.org/static/images/logos/nodejs-new-pantone-black.svg
        tags:
        - Node.js
        - Antora
        - ubi8
        projectType: Node.js
        language: JavaScript
        version: 2.1.1
      starterProjects:
      - name: rhods-quick-course
        git:
          remotes:
            origin: https://github.com/RedHatTraining/rhods-quick-course.git
      components:
      - name: runtime
        container:
          image: registry.access.redhat.com/ubi8/nodejs-16:latest
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
          mountSources: true
          env:
          - name: DEBUG_PORT
            value: '5858'
          endpoints:
          - name: http-node
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
      commands:
      - id: install
        exec:
          component: runtime
          commandLine: npm install
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: runtime
          commandLine: npm start
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: runtime
          commandLine: npm run debug
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: debug
            isDefault: true
      - id: test
        exec:
          component: runtime
          commandLine: npm test
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: test
            isDefault: true
    question: "Could you generate a devfile sample with name rhods-quick-course using Node.js, Antora, ubi8 and JavaScript as programming language? The\
      \ devfile should have 4 commands. 1: id install, 2: id run, 3: id debug, 4: id test. The devfile should have 1 components. 1: name runtime and container\
      \ image registry.access.redhat.com/ubi8/nodejs-16:latest."
  - answer: |
      components:
      - container:
          image: python:3.7-slim
          memoryLimit: 3Gb
        name: python
      metadata:
        tags:
        - devrunner-generated
      schemaVersion: 2.1.0
    question: "Could you generate a devfile sample using devrunner-generated? The devfile should have 1 components. 1: name python and container image python:3.7-slim."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: cheese-quizz
        version: 1.2.0
        displayName: Quarkus Java
        description: Quarkus with Java
        tags:
        - Java
        - Quarkus
        projectType: Quarkus
        language: Java
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/java-maven.jpg
      attributes:
        controller.devfile.io/devworkspace-config:
          name: devworkspace-config
          namespace: openshift-devspaces
        controller.devfile.io/storage-type: per-user
      components:
      - name: tools
        container:
          image: registry.redhat.io/devspaces/udi-rhel8:3.3
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 5.07G
          memoryRequest: 256Mi
          mountSources: true
          volumeMounts:
          - name: m2
            path: /home/user/.m2
          endpoints:
          - exposure: none
            name: debug
            protocol: tcp
            targetPort: 5005
          - name: quizz-question
            targetPort: 8080
          - name: quizz-client
            targetPort: 8081
          env:
          - name: QUARKUS_HTTP_HOST
            value: 0.0.0.0
          - name: CHE_DASHBOARD_URL
            value: https://devspaces.apps.appdev.itix.xyz
          - name: CHE_PLUGIN_REGISTRY_URL
            value: https://devspaces.apps.appdev.itix.xyz/plugin-registry/v3
          - name: CHE_PLUGIN_REGISTRY_INTERNAL_URL
            value: http://plugin-registry.openshift-devspaces.svc:8080/v3
          - name: OPENVSX_REGISTRY_URL
            value: https://open-vsx.org
          - name: MAVEN_OPTS
            value: -Dmaven.repo.local=/home/user/.m2/repository
          - name: MAVEN_USER_HOME
            value: /home/user/.m2
          - name: HOME
            value: /home/user
      - name: m2
        volume:
          size: 3Gi
      - name: kube
        volume: {}
      - name: openshift
        container:
          image: quay.io/openshift/origin-cli:4.11
          command:
          - tail
          - -f
          - /dev/null
          memoryLimit: 512Mi
          mountSources: true
          volumeMounts:
          - name: kube
            path: /home/user/.kube
          env:
          - name: PATH
            value: /tmp/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      commands:
      - id: model-install
        exec:
          component: tools
          workingDir: ${PROJECT_SOURCE}/quizz-model
          commandLine: ./mvnw clean install -DskipTests
          group:
            kind: build
            isDefault: true
      - id: client-devmode
        exec:
          component: tools
          workingDir: ${PROJECT_SOURCE}/quizz-client
          commandLine: ./mvnw compile quarkus:dev
          group:
            kind: build
            isDefault: true
      - id: question-devmode
        exec:
          component: tools
          workingDir: ${PROJECT_SOURCE}/quizz-question
          commandLine: ./mvnw compile quarkus:dev
          group:
            kind: build
            isDefault: true
      - id: tkn-start-pipeline
        exec:
          component: openshift
          workingDir: ${PROJECT_SOURCE}
          commandLine: mkdir -p /tmp/bin ; if [ ! -f /tmp/bin/tkn ]; then curl -sSL https://github.com/tektoncd/cli/releases/download/v0.27.0/tkn_0.27.0_Linux_x86_64.tar.gz
            | tar -zx -C /tmp/bin tkn ; fi ; tkn pipeline start -n cheese-quizz quizz-client-pipeline
          group:
            kind: build
            isDefault: true
    question: "Could you generate a devfile sample with name cheese-quizz using Java, Quarkus and Java as programming language? The devfile should have\
      \ 4 commands. 1: id model-install, 2: id client-devmode, 3: id question-devmode, 4: id tkn-start-pipeline. The devfile should have 4 components. 1:\
      \ name tools and container image registry.redhat.io/devspaces/udi-rhel8:3.3, 2: name m2 and container image , 3: name kube and container image , 4:\
      \ name openshift and container image quay.io/openshift/origin-cli:4.11."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: go
        displayName: Go Runtime
        description: Go (version 1.19.x) is an open source programming language that makes
          it easy to build simple, reliable, and efficient software.
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/golang.svg
        tags:
        - Go
        projectType: Go
        language: Go
        provider: Red Hat
        version: 2.2.0
      starterProjects:
      - name: go-starter
        description: A Go project with a simple HTTP server
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stack-go.git
      components:
      - name: build
        image:
          imageName: go-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: deploy
        kubernetes:
          uri: kubernetes/deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
      - container:
          endpoints:
          - name: http-go
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
          image: registry.access.redhat.com/ubi9/go-toolset:1.19.13-4.1697647145
          args:
          - tail
          - -f
          - /dev/null
          env:
          - name: DEBUG_PORT
            value: '5858'
          memoryLimit: 1024Mi
          mountSources: true
        name: runtime
      commands:
      - id: build-image
        apply:
          component: build
      - id: deployk8s
        apply:
          component: deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
      - exec:
          env:
          - name: GOPATH
            value: ${PROJECT_SOURCE}/.go
          - name: GOCACHE
            value: ${PROJECT_SOURCE}/.cache
          commandLine: go build main.go
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: build
      - exec:
          commandLine: ./main
          component: runtime
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
      - exec:
          commandLine: "GOPATH=${PROJECT_SOURCE}/.go \\\nGOCACHE=${PROJECT_SOURCE}/.cache\
            \ \\\ndlv \\\n  --listen=127.0.0.1:${DEBUG_PORT} \\\n  --only-same-user=false\
            \ \\\n  --headless=true \\\n  --api-version=2 \\\n  --accept-multiclient \\\n\
            \  debug --continue main.go\n"
          component: runtime
          group:
            isDefault: true
            kind: debug
          workingDir: ${PROJECT_SOURCE}
        id: debug
    question: "Could you generate a devfile sample with name go using Go and Go as programming language? The devfile should have 6 commands. 1: id build-image,\
      \ 2: id deployk8s, 3: id deploy, 4: id build, 5: id run, 6: id debug. The devfile should have 3 components. 1: name build and container image , 2:\
      \ name deploy and container image , 3: name runtime and container image registry.access.redhat.com/ubi9/go-toolset:1.19.13-4.1697647145."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: hacbs-jvm-build-test-project
        version: 1.1.0
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        displayName: hacbs-jvm-build-test-project
        description: hacbs-jvm-build-test-project
        tags:
        - Java
        - Maven
        projectType: maven
        language: java
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: java-maven
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: hacbs-jvm-build-test-project:latest
          dockerfile:
            uri: Dockerfile
            buildContext: .
            rootRequired: false
      - name: outerloop-deploy
        kubernetes:
          inlined: "kind: Deployment\napiVersion: apps/v1\nmetadata:\n  name: hacbs-jvm-build-test-project\n\
            spec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: hacbs-jvm-build-test-project\n\
            \  template:\n    metadata:\n      labels:\n        app: hacbs-jvm-build-test-project\n\
            \    spec:\n      containers:\n        - name: hacbs-jvm-build-test-project\n\
            \          image: hacbs-jvm-build-test-project:latest\n          ports:\n  \
            \          - name: http\n              containerPort: 8081\n              protocol:\
            \ TCP\n          resources:\n            limits:\n              memory: \"100Mi\"\
            \n              cpu: \"50m\"\n            requests:\n              memory: \"\
            25Mi\"\n              cpu: \"10m\""
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: outerloop-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name hacbs-jvm-build-test-project using Java, Maven and java as programming language? The devfile\
      \ should have 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container\
      \ image , 2: name outerloop-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: calc-quarkus
        version: 1.2.1
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        icon: https://design.jboss.org/quarkus/logo/final/SVG/quarkus_icon_rgb_default.svg
        website: https://quarkus.io
        displayName: Calc Quarkus
        description: Quarkus with Java
        tags:
        - Java
        - Quarkus
        projectType: Quarkus
        language: Java
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: java-quarkus
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: calc-quarkus-image:latest
          dockerfile:
            uri: src/main/docker/Dockerfile.jvm.staged
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 100Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name calc-quarkus using Java, Quarkus and Java as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      commands:
      - exec:
          commandLine: mvn clean -Dmaven.repo.local=/home/user/.m2/repository package -Dmaven.test.skip=true
          component: tools
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: build
      - exec:
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository spring-boot:run
          component: tools
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
      - exec:
          commandLine: java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=${DEBUG_PORT},suspend=n
            -jar target/*.jar
          component: tools
          group:
            isDefault: true
            kind: debug
          workingDir: ${PROJECT_SOURCE}
        id: debug
      components:
      - container:
          command:
          - tail
          - -f
          - /dev/null
          endpoints:
          - name: http-springboot
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
          env:
          - name: DEBUG_PORT
            value: '5858'
          - name: OTEL_EXPORTER_OTLP_METRICS_ENDPOINT
            value: http://collector:4317
          - name: CINEMA_SERVICE_URL
            value: https://cinema-service-hb-butalia-ibm-dev.apps.sandbox-m3.1530.p1.openshiftapps.com
          image: registry.access.redhat.com/ubi9/openjdk-17:1.17-1
          memoryLimit: 768Mi
          mountSources: true
          volumeMounts:
          - name: m2
            path: /home/user/.m2
        name: tools
      - name: m2
        volume:
          size: 3Gi
      metadata:
        description: "Java application using Spring Boot\xAE and OpenJDK 11"
        displayName: "Spring Boot\xAE"
        globalMemoryLimit: 2674Mi
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/spring.svg
        language: Java
        name: booking-service
        projectType: springboot
        tags:
        - Java
        - Spring
        version: 1.3.0
      schemaVersion: 2.1.0
      starterProjects:
      - git:
          remotes:
            origin: https://github.com/odo-devfiles/springboot-ex.git
        name: springbootproject
    question: "Could you generate a devfile sample with name booking-service using Java, Spring and Java as programming language? The devfile should have\
      \ 3 commands. 1: id build, 2: id run, 3: id debug. The devfile should have 2 components. 1: name tools and container image registry.access.redhat.com/ubi9/openjdk-17:1.17-1,\
      \ 2: name m2 and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-quarkus
        version: 1.1.0
        attributes:
          alpha.dockerimage-port: 8081
        displayName: Java Quarkus
        description: Java Quarkus using Maven
        tags:
        - Java
        - Quarkus
        projectType: quarkus
        language: java
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: java-quarkus
        registryUrl: https://registry.devfile.io
    question: "Could you generate a devfile sample with name java-quarkus using Java, Quarkus and java as programming language?"
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: R
        version: 0.0.1
        description: A web service template.
        projectType: R
        language: R
        provider: CCRN
        tags:
        - R
        - ccrn
        - pq
        architectures:
        - amd64
        displayName: R Computational
        icon: https://ccrn/devfile-stack-icons/main/r.svg
      attributes:
        .vscode/extensions.json: "{\n  \"recommendations\": [\n    \"REditorSupport.r\"\
          ,\n    \"RDebugger.r-debugger\"\n  ]\n}\n"
        .che/che-theia-plugins.yaml: '- id: REditorSupport/r/latest

          - id: RDebugger/r-debugger/latest

          '
      components:
      - name: runtime
        container:
          image: quay.io/hyperkineticnerd/devfile-r:latest
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 2048Mi
          mountSources: true
      starterProjects:
      - name: r-starter
        description: qrcode project.
        git:
          remotes:
            origin: https://github.com/ThierryO/qrcode
    question: "Could you generate a devfile sample with name R using R, ccrn, pq and R as programming language? The devfile should have 1 components. 1:\
      \ name runtime and container image quay.io/hyperkineticnerd/devfile-r:latest."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: nodejs
        version: 1.0.1
        displayName: Node.js Runtime
        description: Stack with Node.js 14
        tags:
        - NodeJS
        - Express
        - ubi8
        projectType: nodejs
        language: nodejs
        attributes:
          alpha.dockerimage-port: 3001
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: nodejs
        registryUrl: https://registry.devfile.io
      components:
      - name: outerloop-build
        image:
          imageName: nodejs-image:latest
          dockerfile:
            uri: Dockerfile
            buildContext: .
            rootRequired: false
      - name: outerloop-deploy
        kubernetes:
          uri: outerloop-deploy.yaml
      commands:
      - id: build-image
        apply:
          component: outerloop-build
      - id: deployk8s
        apply:
          component: outerloop-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name nodejs using NodeJS, Express, ubi8 and nodejs as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name outerloop-build and container image\
      \ , 2: name outerloop-deploy and container image ."
  - answer: |
      commands:
      - exec:
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository compile
          component: tools
          workingDir: ${PROJECT_SOURCE}
        id: init-compile
      - exec:
          commandLine: echo Build command
          component: tools
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: build
      - exec:
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository quarkus:dev -Dquarkus.http.host=0.0.0.0
            -Djava.util.logging.manager=org.jboss.logmanager.LogManager
          component: tools
          group:
            isDefault: true
            kind: run
          hotReloadCapable: true
          workingDir: ${PROJECT_SOURCE}
        id: dev-run
      - exec:
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository quarkus:dev -Dquarkus.http.host=0.0.0.0
            -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Ddebug=${DEBUG_PORT}
          component: tools
          group:
            isDefault: true
            kind: debug
          hotReloadCapable: true
          workingDir: ${PROJECT_SOURCE}
        id: dev-debug
      components:
      - container:
          endpoints:
          - name: http-quarkus
            targetPort: 8080
          env:
          - name: DEBUG_PORT
            value: '5858'
          image: registry.access.redhat.com/ubi8/openjdk-11
          memoryLimit: 512Mi
          mountSources: true
          volumeMounts:
          - name: m2
            path: /home/user/.m2
        name: tools
      - name: m2
        volume:
          size: 3Gi
          ephemeral: true
      events:
        postStart:
        - init-compile
      metadata:
        description: Quarkus with Java
        displayName: Quarkus Java
        icon: https://design.jboss.org/quarkus/logo/final/SVG/quarkus_icon_rgb_default.svg
        language: java
        name: my-component
        projectType: quarkus
        tags:
        - Java
        - Quarkus
        version: 1.1.0
        website: https://quarkus.io
      schemaVersion: 2.2.0
      starterProjects:
      - name: community
        zip:
          location: https://code.quarkus.io/d?e=io.quarkus%3Aquarkus-resteasy&e=io.quarkus%3Aquarkus-micrometer&e=io.quarkus%3Aquarkus-smallrye-health&e=io.quarkus%3Aquarkus-openshift&cn=devfile
      - name: redhat-product
        zip:
          location: https://code.quarkus.redhat.com/d?e=io.quarkus%3Aquarkus-resteasy&e=io.quarkus%3Aquarkus-smallrye-health&e=io.quarkus%3Aquarkus-openshift
    question: "Could you generate a devfile sample with name my-component using Java, Quarkus and java as programming language? The devfile should have\
      \ 4 commands. 1: id init-compile, 2: id build, 3: id dev-run, 4: id dev-debug. The devfile should have 2 components. 1: name tools and container image\
      \ registry.access.redhat.com/ubi8/openjdk-11, 2: name m2 and container image ."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: nodejs
        version: 1.0.0
        displayName: NodeJS Runtime
        description: Stack with NodeJS 12
        icon: https://nodejs.org/static/images/logos/nodejs-new-pantone-black.svg
        tags:
        - NodeJS
        - Express
        - ubi8
        projectType: nodejs
        language: nodejs
        provider: Red Hat
        supportUrl: http://testurl/support.md
        architectures:
        - amd64
        - arm64
      starterProjects:
      - name: nodejs-starter
        git:
          remotes:
            origin: https://github.com/odo-devfiles/nodejs-ex.git
      components:
      - name: runtime
        container:
          image: registry.access.redhat.com/ubi8/nodejs-14:latest
          memoryLimit: 1024Mi
          mountSources: true
          sourceMapping: /project
          endpoints:
          - name: http-3000
            targetPort: 3000
      commands:
      - id: install
        exec:
          component: runtime
          commandLine: npm install
          workingDir: /project
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: runtime
          commandLine: npm start
          workingDir: /project
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: runtime
          commandLine: npm run debug
          workingDir: /project
          group:
            kind: debug
            isDefault: true
      - id: test
        exec:
          component: runtime
          commandLine: npm test
          workingDir: /project
          group:
            kind: test
            isDefault: true
    question: "Could you generate a devfile sample with name nodejs using NodeJS, Express, ubi8 and nodejs as programming language? The devfile should have\
      \ 4 commands. 1: id install, 2: id run, 3: id debug, 4: id test. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-14:latest."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-spring-boot
        language: java
        projectType: springboot
      starterProjects:
      - name: springbootproject
        git:
          remotes:
            origin: https://github.com/odo-devfiles/springboot-ex.git
      components:
      - name: tools
        container:
          image: registry.access.redhat.com/ubi8/openjdk-11:latest
          memoryLimit: 768Mi
          command:
          - tail
          args:
          - -f
          - /dev/null
          mountSources: true
          volumeMounts:
          - name: springbootpvc
            path: /data/cache/.m2
      - name: runtime
        container:
          image: registry.access.redhat.com/ubi8/openjdk-11:latest
          memoryLimit: 768Mi
          endpoints:
          - name: 8080-tcp
            targetPort: 8080
          volumeMounts:
          - name: springbootpvc
            path: /data/cache/.m2
          mountSources: true
      - name: springbootpvc
        volume:
          size: 3Gi
          ephemeral: true
      commands:
      - id: defaultbuild
        exec:
          component: tools
          commandLine: mvn clean -Dmaven.repo.local=/data/cache/.m2/repository package -Dmaven.test.skip=true
          workingDir: /projects
          group:
            kind: build
      - id: defaultrun
        exec:
          component: runtime
          commandLine: mvn -Dmaven.repo.local=/data/cache/.m2/repository spring-boot:run
          workingDir: /projects
          group:
            kind: run
            isDefault: true
    question: "Could you generate a devfile sample with name java-spring-boot and java as programming language? The devfile should have 2 commands. 1: id\
      \ defaultbuild, 2: id defaultrun. The devfile should have 3 components. 1: name tools and container image registry.access.redhat.com/ubi8/openjdk-11:latest,\
      \ 2: name runtime and container image registry.access.redhat.com/ubi8/openjdk-11:latest, 3: name springbootpvc and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-maven
        version: 1.1.0
        displayName: Maven Java
        description: Upstream Maven and OpenJDK 11
        tags:
        - Java
        - Maven
        projectType: maven
        language: java
        provider: Red Hat
      starterProjects:
      - name: springbootproject
        git:
          remotes:
            origin: https://github.com/odo-devfiles/springboot-ex.git
      components:
      - name: tools
        container:
          image: quay.io/eclipse/che-java11-maven:nightly
          memoryLimit: 512Mi
          mountSources: true
          endpoints:
          - name: http-8080
            targetPort: 8080
          volumeMounts:
          - name: m2
            path: /home/user/.m2
      - name: m2
        volume: {}
      commands:
      - id: mvn-package
        exec:
          component: tools
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository package
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: tools
          commandLine: java -jar target/*.jar
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: tools
          commandLine: java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=${DEBUG_PORT},suspend=n
            -jar target/*.jar
          group:
            kind: debug
            isDefault: true
    question: "Could you generate a devfile sample with name java-maven using Java, Maven and java as programming language? The devfile should have 3 commands.\
      \ 1: id mvn-package, 2: id run, 3: id debug. The devfile should have 2 components. 1: name tools and container image quay.io/eclipse/che-java11-maven:nightly,\
      \ 2: name m2 and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: nodejs-react
        displayName: React
        description: React is a free and open-source front-end JavaScript library for building
          user interfaces based on UI components. It is maintained by Meta and a community
          of individual developers and companies.
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/react.svg
        tags:
        - Node.js
        - React
        projectType: React
        language: TypeScript
        provider: Red Hat
        version: 2.2.0
      starterProjects:
      - name: nodejs-react-starter
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stacks-nodejs-react.git
      components:
      - container:
          endpoints:
          - name: http-react
            targetPort: 3000
          image: registry.access.redhat.com/ubi8/nodejs-18:1-81
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
        name: runtime
      commands:
      - exec:
          commandLine: npm install
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: install
      - exec:
          commandLine: npm run dev
          component: runtime
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
    question: "Could you generate a devfile sample with name nodejs-react using Node.js, React and TypeScript as programming language? The devfile should\
      \ have 2 commands. 1: id install, 2: id run. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-18:1-81."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-springboot
        version: 1.2.1
        attributes:
          alpha.dockerimage-port: 8081
        displayName: "Spring Boot\xAE"
        description: "Spring Boot\xAE using Maven"
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/spring.svg
        tags:
        - Java
        - Spring
        projectType: springboot
        language: Java
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: java-springboot
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: java-springboot-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 300Mi
          deployment/memoryRequest: 180Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-springboot using Java, Spring and Java as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-springboot
        version: 1.2.1
        attributes:
          alpha.dockerimage-port: 8081
        displayName: "Spring Boot\xAE"
        description: "Spring Boot\xAE using Maven"
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/spring.svg
        tags:
        - Java
        - Spring
        projectType: springboot
        language: Java
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: java-springboot
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: java-springboot-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 300Mi
          deployment/memoryRequest: 180Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-springboot using Java, Spring and Java as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-springboot
        version: 1.2.1
        attributes:
          alpha.dockerimage-port: 8081
        displayName: "Spring Boot\xAE"
        description: "Spring Boot\xAE using Maven"
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/spring.svg
        tags:
        - Java
        - Spring
        projectType: springboot
        language: Java
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: java-springboot
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: java-springboot-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 300Mi
          deployment/memoryRequest: 180Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-springboot using Java, Spring and Java as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: nodejs
        displayName: Node.js Runtime
        description: Node.js 16 application
        icon: https://nodejs.org/static/images/logos/nodejs-new-pantone-black.svg
        tags:
        - Node.js
        - Express
        - ubi8
        projectType: Node.js
        language: JavaScript
        version: 2.1.1
      starterProjects:
      - name: nodejs-starter
        git:
          remotes:
            origin: https://github.com/odo-devfiles/nodejs-ex.git
      components:
      - name: runtime
        container:
          image: registry.access.redhat.com/ubi8/nodejs-16:latest
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
          mountSources: true
          env:
          - name: DEBUG_PORT
            value: '5858'
          endpoints:
          - name: http-node
            targetPort: 3000
          - exposure: none
            name: debug
            targetPort: 5858
      commands:
      - id: install
        exec:
          component: runtime
          commandLine: npm install
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: runtime
          commandLine: npm start
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: runtime
          commandLine: npm run debug
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: debug
            isDefault: true
      - id: test
        exec:
          component: runtime
          commandLine: npm test
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: test
            isDefault: true
    question: "Could you generate a devfile sample with name nodejs using Node.js, Express, ubi8 and JavaScript as programming language? The devfile should\
      \ have 4 commands. 1: id install, 2: id run, 3: id debug, 4: id test. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-16:latest."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: nodejs
        displayName: Node.js Runtime
        description: Node.js 16 application
        icon: https://nodejs.org/static/images/logos/nodejs-new-pantone-black.svg
        tags:
        - Node.js
        - Express
        - ubi8
        projectType: Node.js
        language: JavaScript
        version: 2.1.1
      starterProjects:
      - name: nodejs-starter
        git:
          remotes:
            origin: https://github.com/odo-devfiles/nodejs-ex.git
      components:
      - name: runtime
        container:
          image: registry.access.redhat.com/ubi8/nodejs-16:latest
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
          mountSources: true
          env:
          - name: DEBUG_PORT
            value: '5858'
          endpoints:
          - name: http-node
            targetPort: 3000
          - exposure: none
            name: debug
            targetPort: 5858
      commands:
      - id: install
        exec:
          component: runtime
          commandLine: npm install
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: runtime
          commandLine: npm start
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: runtime
          commandLine: npm run debug
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: debug
            isDefault: true
      - id: test
        exec:
          component: runtime
          commandLine: npm test
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: test
            isDefault: true
    question: "Could you generate a devfile sample with name nodejs using Node.js, Express, ubi8 and JavaScript as programming language? The devfile should\
      \ have 4 commands. 1: id install, 2: id run, 3: id debug, 4: id test. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-16:latest."
  - answer: |
      commands:
      - exec:
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository compile
          component: tools
          workingDir: ${PROJECT_SOURCE}
        id: init-compile
      - exec:
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository quarkus:dev -Dquarkus.http.host=0.0.0.0
            -Djava.util.logging.manager=org.jboss.logmanager.LogManager
          component: tools
          group:
            isDefault: true
            kind: run
          hotReloadCapable: true
          workingDir: ${PROJECT_SOURCE}
        id: dev-run
      - exec:
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository quarkus:dev -Dquarkus.http.host=0.0.0.0
            -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Ddebug=${DEBUG_PORT}
          component: tools
          group:
            isDefault: true
            kind: debug
          hotReloadCapable: true
          workingDir: ${PROJECT_SOURCE}
        id: dev-debug
      components:
      - container:
          args:
          - tail
          - -f
          - /dev/null
          endpoints:
          - name: http-quarkus
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
          env:
          - name: DEBUG_PORT
            value: '5858'
          image: registry.access.redhat.com/ubi8/openjdk-17
          memoryLimit: 512Mi
          mountSources: true
          volumeMounts:
          - name: m2
            path: /home/user/.m2
        name: tools
      - name: m2
        volume:
          size: 3Gi
      events:
        postStart:
        - init-compile
      metadata:
        description: Quarkus with Java
        displayName: Quarkus Java
        icon: https://design.jboss.org/quarkus/logo/final/SVG/quarkus_icon_rgb_default.svg
        language: Java
        name: serviceb
        projectType: Quarkus
        tags:
        - Java
        - Quarkus
        version: 1.3.0
        website: https://quarkus.io
      schemaVersion: 2.1.0
      starterProjects:
      - name: community
        zip:
          location: https://code.quarkus.io/d?e=io.quarkus%3Aquarkus-resteasy&e=io.quarkus%3Aquarkus-micrometer&e=io.quarkus%3Aquarkus-smallrye-health&e=io.quarkus%3Aquarkus-openshift&cn=devfile
      - name: redhat-product
        zip:
          location: https://code.quarkus.redhat.com/d?e=io.quarkus%3Aquarkus-resteasy&e=io.quarkus%3Aquarkus-smallrye-health&e=io.quarkus%3Aquarkus-openshift
    question: "Could you generate a devfile sample with name serviceb using Java, Quarkus and Java as programming language? The devfile should have 3 commands.\
      \ 1: id init-compile, 2: id dev-run, 3: id dev-debug. The devfile should have 2 components. 1: name tools and container image registry.access.redhat.com/ubi8/openjdk-17,\
      \ 2: name m2 and container image ."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: rhods-quick-course
        displayName: RHODS Quick Course
        description: RHODS Quick Course published using Antora
        icon: https://nodejs.org/static/images/logos/nodejs-new-pantone-black.svg
        tags:
        - Node.js
        - Antora
        - ubi8
        projectType: Node.js
        language: JavaScript
        version: 2.1.1
      starterProjects:
      - name: rhods-quick-course
        git:
          remotes:
            origin: https://github.com/RedHatTraining/rhods-quick-course.git
      components:
      - name: runtime
        container:
          image: registry.access.redhat.com/ubi8/nodejs-16:latest
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
          mountSources: true
          env:
          - name: DEBUG_PORT
            value: '5858'
          endpoints:
          - name: http-node
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
      commands:
      - id: install
        exec:
          component: runtime
          commandLine: npm install
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: runtime
          commandLine: npm start
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: runtime
          commandLine: npm run debug
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: debug
            isDefault: true
      - id: test
        exec:
          component: runtime
          commandLine: npm test
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: test
            isDefault: true
    question: "Could you generate a devfile sample with name rhods-quick-course using Node.js, Antora, ubi8 and JavaScript as programming language? The\
      \ devfile should have 4 commands. 1: id install, 2: id run, 3: id debug, 4: id test. The devfile should have 1 components. 1: name runtime and container\
      \ image registry.access.redhat.com/ubi8/nodejs-16:latest."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: rhods-quick-course
        displayName: RHODS Quick Course
        description: RHODS Quick Course published using Antora
        icon: https://nodejs.org/static/images/logos/nodejs-new-pantone-black.svg
        tags:
        - Node.js
        - Antora
        - ubi8
        projectType: Node.js
        language: JavaScript
        version: 2.1.1
      starterProjects:
      - name: rhods-quick-course
        git:
          remotes:
            origin: https://github.com/RedHatTraining/rhods-quick-course.git
      components:
      - name: runtime
        container:
          image: registry.access.redhat.com/ubi8/nodejs-16:latest
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
          mountSources: true
          env:
          - name: DEBUG_PORT
            value: '5858'
          endpoints:
          - name: http-node
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
      commands:
      - id: install
        exec:
          component: runtime
          commandLine: npm install
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: runtime
          commandLine: npm start
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: runtime
          commandLine: npm run debug
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: debug
            isDefault: true
      - id: test
        exec:
          component: runtime
          commandLine: npm test
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: test
            isDefault: true
    question: "Could you generate a devfile sample with name rhods-quick-course using Node.js, Antora, ubi8 and JavaScript as programming language? The\
      \ devfile should have 4 commands. 1: id install, 2: id run, 3: id debug, 4: id test. The devfile should have 1 components. 1: name runtime and container\
      \ image registry.access.redhat.com/ubi8/nodejs-16:latest."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: rhods-quick-course
        displayName: RHODS Quick Course
        description: RHODS Quick Course published using Antora
        icon: https://nodejs.org/static/images/logos/nodejs-new-pantone-black.svg
        tags:
        - Node.js
        - Antora
        - ubi8
        projectType: Node.js
        language: JavaScript
        version: 2.1.1
      starterProjects:
      - name: rhods-quick-course
        git:
          remotes:
            origin: https://github.com/RedHatTraining/rhods-quick-course.git
      components:
      - name: runtime
        container:
          image: registry.access.redhat.com/ubi8/nodejs-16:latest
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
          mountSources: true
          env:
          - name: DEBUG_PORT
            value: '5858'
          endpoints:
          - name: http-node
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
      commands:
      - id: install
        exec:
          component: runtime
          commandLine: npm install
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: runtime
          commandLine: npm start
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: runtime
          commandLine: npm run debug
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: debug
            isDefault: true
      - id: test
        exec:
          component: runtime
          commandLine: npm test
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: test
            isDefault: true
    question: "Could you generate a devfile sample with name rhods-quick-course using Node.js, Antora, ubi8 and JavaScript as programming language? The\
      \ devfile should have 4 commands. 1: id install, 2: id run, 3: id debug, 4: id test. The devfile should have 1 components. 1: name runtime and container\
      \ image registry.access.redhat.com/ubi8/nodejs-16:latest."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: rhods-quick-course
        displayName: RHODS Quick Course
        description: RHODS Quick Course published using Antora
        icon: https://nodejs.org/static/images/logos/nodejs-new-pantone-black.svg
        tags:
        - Node.js
        - Antora
        - ubi8
        projectType: Node.js
        language: JavaScript
        version: 2.1.1
      starterProjects:
      - name: rhods-quick-course
        git:
          remotes:
            origin: https://github.com/RedHatTraining/rhods-quick-course.git
      components:
      - name: runtime
        container:
          image: registry.access.redhat.com/ubi8/nodejs-16:latest
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
          mountSources: true
          env:
          - name: DEBUG_PORT
            value: '5858'
          endpoints:
          - name: http-node
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
      commands:
      - id: install
        exec:
          component: runtime
          commandLine: npm install
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: runtime
          commandLine: npm start
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: runtime
          commandLine: npm run debug
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: debug
            isDefault: true
      - id: test
        exec:
          component: runtime
          commandLine: npm test
          workingDir: ${PROJECT_SOURCE}
          group:
            kind: test
            isDefault: true
    question: "Could you generate a devfile sample with name rhods-quick-course using Node.js, Antora, ubi8 and JavaScript as programming language? The\
      \ devfile should have 4 commands. 1: id install, 2: id run, 3: id debug, 4: id test. The devfile should have 1 components. 1: name runtime and container\
      \ image registry.access.redhat.com/ubi8/nodejs-16:latest."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: go
        displayName: Go Runtime
        description: Go (version 1.19.x) is an open source programming language that makes
          it easy to build simple, reliable, and efficient software.
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/golang.svg
        tags:
        - Go
        projectType: Go
        language: Go
        provider: Red Hat
        version: 2.2.0
      starterProjects:
      - name: go-starter
        description: A Go project with a simple HTTP server
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stack-go.git
      components:
      - name: build
        image:
          imageName: go-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: deploy
        kubernetes:
          uri: kubernetes/deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
      - container:
          endpoints:
          - name: http-go
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
          image: registry.access.redhat.com/ubi9/go-toolset:1.19.13-4.1697647145
          args:
          - tail
          - -f
          - /dev/null
          env:
          - name: DEBUG_PORT
            value: '5858'
          memoryLimit: 1024Mi
          mountSources: true
        name: runtime
      commands:
      - id: build-image
        apply:
          component: build
      - id: deployk8s
        apply:
          component: deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
      - exec:
          env:
          - name: GOPATH
            value: ${PROJECT_SOURCE}/.go
          - name: GOCACHE
            value: ${PROJECT_SOURCE}/.cache
          commandLine: go build main.go
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: build
      - exec:
          commandLine: ./main
          component: runtime
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
      - exec:
          commandLine: "GOPATH=${PROJECT_SOURCE}/.go \\\nGOCACHE=${PROJECT_SOURCE}/.cache\
            \ \\\ndlv \\\n  --listen=127.0.0.1:${DEBUG_PORT} \\\n  --only-same-user=false\
            \ \\\n  --headless=true \\\n  --api-version=2 \\\n  --accept-multiclient \\\n\
            \  debug --continue main.go\n"
          component: runtime
          group:
            isDefault: true
            kind: debug
          workingDir: ${PROJECT_SOURCE}
        id: debug
    question: "Could you generate a devfile sample with name go using Go and Go as programming language? The devfile should have 6 commands. 1: id build-image,\
      \ 2: id deployk8s, 3: id deploy, 4: id build, 5: id run, 6: id debug. The devfile should have 3 components. 1: name build and container image , 2:\
      \ name deploy and container image , 3: name runtime and container image registry.access.redhat.com/ubi9/go-toolset:1.19.13-4.1697647145."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: go
        displayName: Go Runtime
        description: Go (version 1.19.x) is an open source programming language that makes
          it easy to build simple, reliable, and efficient software.
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/golang.svg
        tags:
        - Go
        projectType: Go
        language: Go
        provider: Red Hat
        version: 2.2.0
      starterProjects:
      - name: go-starter
        description: A Go project with a simple HTTP server
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stack-go.git
      components:
      - name: build
        image:
          imageName: go-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: deploy
        kubernetes:
          uri: kubernetes/deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
      - container:
          endpoints:
          - name: http-go
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
          image: registry.access.redhat.com/ubi9/go-toolset:1.19.13-4.1697647145
          args:
          - tail
          - -f
          - /dev/null
          env:
          - name: DEBUG_PORT
            value: '5858'
          memoryLimit: 1024Mi
          mountSources: true
        name: runtime
      commands:
      - id: build-image
        apply:
          component: build
      - id: deployk8s
        apply:
          component: deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
      - exec:
          env:
          - name: GOPATH
            value: ${PROJECT_SOURCE}/.go
          - name: GOCACHE
            value: ${PROJECT_SOURCE}/.cache
          commandLine: go build main.go
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: build
      - exec:
          commandLine: ./main
          component: runtime
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
      - exec:
          commandLine: "GOPATH=${PROJECT_SOURCE}/.go \\\nGOCACHE=${PROJECT_SOURCE}/.cache\
            \ \\\ndlv \\\n  --listen=127.0.0.1:${DEBUG_PORT} \\\n  --only-same-user=false\
            \ \\\n  --headless=true \\\n  --api-version=2 \\\n  --accept-multiclient \\\n\
            \  debug --continue main.go\n"
          component: runtime
          group:
            isDefault: true
            kind: debug
          workingDir: ${PROJECT_SOURCE}
        id: debug
    question: "Could you generate a devfile sample with name go using Go and Go as programming language? The devfile should have 6 commands. 1: id build-image,\
      \ 2: id deployk8s, 3: id deploy, 4: id build, 5: id run, 6: id debug. The devfile should have 3 components. 1: name build and container image , 2:\
      \ name deploy and container image , 3: name runtime and container image registry.access.redhat.com/ubi9/go-toolset:1.19.13-4.1697647145."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: nodejs
        version: 1.0.1
        displayName: Node.js Runtime
        description: Stack with Node.js 14
        tags:
        - NodeJS
        - Express
        - ubi8
        projectType: nodejs
        language: nodejs
        attributes:
          alpha.dockerimage-port: 3001
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: nodejs
        registryUrl: https://registry.devfile.io
      components:
      - name: outerloop-build
        image:
          imageName: nodejs-image:latest
          dockerfile:
            uri: Dockerfile
            buildContext: .
            rootRequired: false
      - name: outerloop-deploy
        kubernetes:
          uri: outerloop-deploy.yaml
      commands:
      - id: build-image
        apply:
          component: outerloop-build
      - id: deployk8s
        apply:
          component: outerloop-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name nodejs using NodeJS, Express, ubi8 and nodejs as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name outerloop-build and container image\
      \ , 2: name outerloop-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: nodejs
        version: 1.0.1
        displayName: Node.js Runtime
        description: Stack with Node.js 14
        tags:
        - NodeJS
        - Express
        - ubi8
        projectType: nodejs
        language: nodejs
        attributes:
          alpha.dockerimage-port: 3001
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: nodejs
        registryUrl: https://registry.devfile.io
      components:
      - name: outerloop-build
        image:
          imageName: nodejs-image:latest
          dockerfile:
            uri: Dockerfile
            buildContext: .
            rootRequired: false
      - name: outerloop-deploy
        kubernetes:
          uri: outerloop-deploy.yaml
      commands:
      - id: build-image
        apply:
          component: outerloop-build
      - id: deployk8s
        apply:
          component: outerloop-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name nodejs using NodeJS, Express, ubi8 and nodejs as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name outerloop-build and container image\
      \ , 2: name outerloop-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: nodejs
        version: 1.0.1
        displayName: Node.js Runtime
        description: Stack with Node.js 14
        tags:
        - NodeJS
        - Express
        - ubi8
        projectType: nodejs
        language: nodejs
        attributes:
          alpha.dockerimage-port: 3001
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: nodejs
        registryUrl: https://registry.devfile.io
      components:
      - name: outerloop-build
        image:
          imageName: nodejs-image:latest
          dockerfile:
            uri: Dockerfile
            buildContext: .
            rootRequired: false
      - name: outerloop-deploy
        kubernetes:
          uri: outerloop-deploy.yaml
      commands:
      - id: build-image
        apply:
          component: outerloop-build
      - id: deployk8s
        apply:
          component: outerloop-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name nodejs using NodeJS, Express, ubi8 and nodejs as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name outerloop-build and container image\
      \ , 2: name outerloop-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: nodejs-react
        displayName: React
        description: React is a free and open-source front-end JavaScript library for building
          user interfaces based on UI components. It is maintained by Meta and a community
          of individual developers and companies.
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/react.svg
        tags:
        - Node.js
        - React
        projectType: React
        language: TypeScript
        provider: Red Hat
        version: 2.2.0
      starterProjects:
      - name: nodejs-react-starter
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stacks-nodejs-react.git
      components:
      - container:
          endpoints:
          - name: http-react
            targetPort: 3000
          image: registry.access.redhat.com/ubi8/nodejs-18:1-81
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
        name: runtime
      commands:
      - exec:
          commandLine: npm install
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: install
      - exec:
          commandLine: npm run dev
          component: runtime
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
    question: "Could you generate a devfile sample with name nodejs-react using Node.js, React and TypeScript as programming language? The devfile should\
      \ have 2 commands. 1: id install, 2: id run. The devfile should have 1 components. 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-18:1-81."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: nodejs
        version: 1.0.1
        displayName: Node.js Runtime
        description: Stack with Node.js 14
        tags:
        - NodeJS
        - Express
        - ubi8
        projectType: nodejs
        language: nodejs
      variables:
        CONTAINER_IMAGE: node-image:latest
        COMPONENT_NAME: my-node
        PORT: '3001'
      components:
      - name: outerloop-build
        image:
          imageName: '{{CONTAINER_IMAGE}}'
          dockerfile:
            uri: ./utils/Dockerfile
            buildContext: /project
            rootRequired: false
      - name: outerloop-deploy
        kubernetes:
          inlined: "kind: Deployment\napiVersion: apps/v1\nmetadata:\n  name: {{COMPONENT_NAME}}\n\
            spec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: node-app\n \
            \ template:\n    metadata:\n      labels:\n        app: node-app\n    spec:\n\
            \      containers:\n        - name: {{COMPONENT_NAME}}\n          image: {{CONTAINER_IMAGE}}\n\
            \          ports:\n            - name: http\n              containerPort: {{PORT}}\n\
            \              protocol: TCP\n          resources:\n            limits:\n  \
            \            memory: \"128Mi\"\n              cpu: \"500m\"\n"
      - name: runtime
        container:
          image: registry.access.redhat.com/ubi8/nodejs-14:latest
          memoryLimit: 1024Mi
          mountSources: true
          sourceMapping: /project
          endpoints:
          - name: http-3000
            targetPort: 3000
      commands:
      - id: install
        exec:
          component: runtime
          commandLine: npm install
          workingDir: /project
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: runtime
          commandLine: npm start
          workingDir: /project
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: runtime
          commandLine: npm run debug
          workingDir: /project
          group:
            kind: debug
            isDefault: true
      - id: test
        exec:
          component: runtime
          commandLine: npm test
          workingDir: /project
          group:
            kind: test
            isDefault: true
      - id: build-image
        apply:
          component: outerloop-build
      - id: deployk8s
        apply:
          component: outerloop-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
    question: "Could you generate a devfile sample with name nodejs using NodeJS, Express, ubi8 and nodejs as programming language? The devfile should have\
      \ 7 commands. 1: id install, 2: id run, 3: id debug, 4: id test, 5: id build-image, 6: id deployk8s, 7: id deploy. The devfile should have 3 components.\
      \ 1: name outerloop-build and container image , 2: name outerloop-deploy and container image , 3: name runtime and container image registry.access.redhat.com/ubi8/nodejs-14:latest."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: dotnetcore31
        displayName: .NET Core 3.1
        description: .NET Core 3.1 application
        icon: https://github.com/dotnet/brand/raw/main/logo/dotnet-logo.png
        tags:
        - .NET
        - .NET Core App 3.1
        projectType: dotnet
        language: .NET
        version: 1.0.3
      starterProjects:
      - name: dotnetcore-example
        git:
          checkoutFrom:
            remote: origin
            revision: dotnetcore-3.1
          remotes:
            origin: https://github.com/redhat-developer/s2i-dotnetcore-ex
        subDir: app
      components:
      - name: dotnet
        container:
          image: registry.access.redhat.com/ubi8/dotnet-31:3.1-61
          args:
          - tail
          - -f
          - /dev/null
          mountSources: true
          env:
          - name: CONFIGURATION
            value: Debug
          - name: STARTUP_PROJECT
            value: app.csproj
          - name: ASPNETCORE_ENVIRONMENT
            value: Development
          - name: ASPNETCORE_URLS
            value: http://*:8080
          endpoints:
          - name: http-dotnetcore
            targetPort: 8080
      commands:
      - id: build
        exec:
          workingDir: ${PROJECT_SOURCE}
          commandLine: kill $(pidof dotnet); dotnet build -c $CONFIGURATION $STARTUP_PROJECT
            /p:UseSharedCompilation=false
          component: dotnet
          group:
            isDefault: true
            kind: build
      - id: run
        exec:
          workingDir: ${PROJECT_SOURCE}
          commandLine: dotnet run -c $CONFIGURATION --no-build --project $STARTUP_PROJECT
            --no-launch-profile
          component: dotnet
          group:
            isDefault: true
            kind: run
    question: "Could you generate a devfile sample with name dotnetcore31 using .NET, .NET Core App 3.1 and .NET as programming language? The devfile should\
      \ have 2 commands. 1: id build, 2: id run. The devfile should have 1 components. 1: name dotnet and container image registry.access.redhat.com/ubi8/dotnet-31:3.1-61."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: fast-do-nothing-container
        version: 1.0.1
        displayName: Docker Do Nothing
        description: Minimal Dockerfile
        tags:
        - demo
        projectType: none
        language: none
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      components:
      - name: outerloop-build
        image:
          imageName: nodejs-image:latest
          dockerfile:
            uri: Dockerfile
            buildContext: .
            rootRequired: false
    question: "Could you generate a devfile sample with name fast-do-nothing-container using demo and none as programming language? The devfile should have\
      \ 1 components. 1: name outerloop-build and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: binary
        projectType: binary
        language: binary
        version: 1.0.0
        provider: Red Hat
      components:
      - name: outerloop-build
        image:
          imageName: haproxy:latest
          dockerfile:
            uri: services/haproxy/Dockerfile
            buildContext: services/haproxy
            rootRequired: false
      - name: outerloop-deploy
        kubernetes:
          uri: deploy/haproxy/deployment.yaml
      commands:
      - id: build-image
        apply:
          component: outerloop-build
      - id: deployk8s
        apply:
          component: outerloop-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name binary and binary as programming language? The devfile should have 3 commands. 1: id build-image,\
      \ 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name outerloop-build and container image , 2: name outerloop-deploy and\
      \ container image ."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: java-quarkus
        version: 1.1.0
        attributes:
          alpha.build-context: .
          alpha.build-dockerfile: src/main/docker/Dockerfile.jvm.staged
        website: https://quarkus.io
        displayName: Quarkus Java
        description: Upstream Quarkus with Java+GraalVM
        tags:
        - Java
        - Quarkus
        projectType: quarkus
        language: java
      starterProjects:
      - name: community
        zip:
          location: https://code.quarkus.io/d?e=io.quarkus%3Aquarkus-resteasy&e=io.quarkus%3Aquarkus-micrometer&e=io.quarkus%3Aquarkus-smallrye-health&e=io.quarkus%3Aquarkus-openshift&cn=devfile
      - name: redhat-product
        zip:
          location: https://code.quarkus.redhat.com/d?e=io.quarkus%3Aquarkus-resteasy&e=io.quarkus%3Aquarkus-smallrye-health&e=io.quarkus%3Aquarkus-openshift
      components:
      - name: buildguidance
        attributes:
          tool: console-import
        container:
          image: buildguidanceimage-placeholder
          memoryLimit: 1024Mi
          endpoints:
          - name: http-8080
            targetPort: 8080
      - name: tools
        container:
          image: quay.io/eclipse/che-quarkus:nightly
          memoryLimit: 1512Mi
          mountSources: true
          volumeMounts:
          - name: m2
            path: /home/user/.m2
          endpoints:
          - name: 8080-http
            targetPort: 8080
      - name: m2
        volume:
          size: 3Gi
      commands:
      - id: init-compile
        exec:
          component: tools
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository compile
          workingDir: $PROJECTS_ROOT
      - id: dev-run
        exec:
          component: tools
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository quarkus:dev -Dquarkus.http.host=0.0.0.0
            -Djava.util.logging.manager=org.jboss.logmanager.LogManager
          hotReloadCapable: true
          group:
            kind: run
            isDefault: true
          workingDir: $PROJECTS_ROOT
      - id: dev-debug
        exec:
          component: tools
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository quarkus:dev -Dquarkus.http.host=0.0.0.0
            -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Ddebug=${DEBUG_PORT}
          hotReloadCapable: true
          group:
            kind: debug
            isDefault: true
          workingDir: $PROJECTS_ROOT
      events:
        postStart:
        - init-compile
    question: "Could you generate a devfile sample with name java-quarkus using Java, Quarkus and java as programming language? The devfile should have\
      \ 3 commands. 1: id init-compile, 2: id dev-run, 3: id dev-debug. The devfile should have 3 components. 1: name buildguidance and container image\
      \ buildguidanceimage-placeholder, 2: name tools and container image quay.io/eclipse/che-quarkus:nightly, 3: name m2 and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: nodejs-react
        displayName: React
        description: React is a free and open-source front-end JavaScript library for building
          user interfaces based on UI components. It is maintained by Meta and a community
          of individual developers and companies.
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/react.svg
        tags:
        - Node.js
        - React
        projectType: React
        language: TypeScript
        provider: Red Hat
        version: 2.2.0
      starterProjects:
      - name: nodejs-react-starter
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/devfile-samples/devfile-stacks-nodejs-react.git
      components:
      - container:
          endpoints:
          - name: http-react
            targetPort: 3000
          image: quay.io/aobuchow/universal-developer-image:no-node-on-path
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
        name: runtime
      commands:
      - exec:
          commandLine: npm install
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: install
      - exec:
          commandLine: npm run dev
          component: runtime
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
    question: "Could you generate a devfile sample with name nodejs-react using Node.js, React and TypeScript as programming language? The devfile should\
      \ have 2 commands. 1: id install, 2: id run. The devfile should have 1 components. 1: name runtime and container image quay.io/aobuchow/universal-developer-image:no-node-on-path."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-springboot
        version: 1.2.1
        attributes:
          alpha.dockerimage-port: 8081
        displayName: "Spring Boot\xAE"
        description: "Spring Boot\xAE using Maven"
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/spring.svg
        tags:
        - Java
        - Spring
        projectType: springboot
        language: Java
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: java-springboot
        registryUrl: https://registry.devfile.io
        version: 1.2.0
      components:
      - name: image-build
        image:
          imageName: java-springboot-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 180Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-springboot using Java, Spring and Java as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: nodejs
        version: 2.1.1
        displayName: Node.js Runtime
        description: Stack with Node.js 16
        tags:
        - Node.js
        - Express
        - ubi8
        projectType: Node.js
        language: JavaScript
        attributes:
          alpha.dockerimage-port: 3000
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: nodejs
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: nodejs-image:latest
          dockerfile:
            uri: Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 50Mi
          deployment/container-port: 3000
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-3000
            targetPort: 80
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name nodejs using Node.js, Express, ubi8 and JavaScript as programming language? The devfile should\
      \ have 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image\
      \ , 2: name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: fbc-v4.14
        displayName: FBC v4.14
        description: File based catalog
        language: fbc
        provider: Red Hat
      components:
      - name: image-build
        image:
          imageName: ''
          dockerfile:
            uri: catalog.Dockerfile
            buildContext: ''
      - name: kubernetes
        kubernetes:
          inlined: placeholder
        attributes:
          deployment/container-port: 50051
          deployment/cpuRequest: 100m
          deployment/memoryRequest: 512Mi
          deployment/replicas: 1
          deployment/storageRequest: '0'
      commands:
      - id: build-image
        apply:
          component: image-build
    question: "Could you generate a devfile sample with name fbc-v4.14 and fbc as programming language? The devfile should have 1 commands. 1: id build-image.\
      \ The devfile should have 2 components. 1: name image-build and container image , 2: name kubernetes and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        language: javascript
        name: devfile-nodejs-deploy
        projectType: nodejs
      variables:
        CONTAINER_IMAGE: quay.io/tkral/devfile-nodejs-deploy:latest
      commands:
      - id: install
        exec:
          commandLine: npm install
          component: runtime
          group:
            isDefault: true
            kind: build
          workingDir: $PROJECT_SOURCE
      - id: run
        exec:
          commandLine: npm start
          component: runtime
          group:
            isDefault: true
            kind: run
          workingDir: $PROJECT_SOURCE
      - id: build-image
        apply:
          component: prod-image
      - id: deploy-deployment
        apply:
          component: outerloop-deploy
      - id: deploy-service
        apply:
          component: outerloop-service
      - id: deploy
        composite:
          commands:
          - build-image
          - deploy-deployment
          - deploy-service
          group:
            kind: deploy
            isDefault: true
      components:
      - container:
          endpoints:
          - name: http-3000
            targetPort: 3000
          image: registry.access.redhat.com/ubi8/nodejs-14:latest
          memoryLimit: 1024Mi
          mountSources: true
        name: runtime
      - name: prod-image
        image:
          imageName: '{{CONTAINER_IMAGE}}'
          dockerfile:
            uri: ./Dockerfile
            buildContext: ${PROJECT_SOURCE}
      - name: outerloop-deploy
        kubernetes:
          inlined: "kind: Deployment\napiVersion: apps/v1\nmetadata:\n  name: devfile-nodejs-deploy\n\
            spec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: devfile-nodejs-deploy\n\
            \  template:\n    metadata:\n      labels:\n        app: devfile-nodejs-deploy\n\
            \    spec:\n      containers:\n        - name: main\n          image: \"{{CONTAINER_IMAGE}}\"\
            \n          resources: {}\n"
      - name: outerloop-service
        kubernetes:
          inlined: "apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: devfile-nodejs-deploy\n\
            \  name: devfile-nodejs-deploy\nspec:\n  ports:\n  - name: http-3000\n    port:\
            \ 3000\n    protocol: TCP\n    targetPort: 3000\n  selector:\n    app: devfile-nodejs-deploy\n\
            \  type: LoadBalancer\n"
    question: "Could you generate a devfile sample with name devfile-nodejs-deploy and javascript as programming language? The devfile should have 6 commands.\
      \ 1: id install, 2: id run, 3: id build-image, 4: id deploy-deployment, 5: id deploy-service, 6: id deploy. The devfile should have 4 components.\
      \ 1: name runtime and container image registry.access.redhat.com/ubi8/nodejs-14:latest, 2: name prod-image and container image , 3: name outerloop-deploy\
      \ and container image , 4: name outerloop-service and container image ."
  - answer: |
      commands:
      - exec:
          commandLine: mvn clean -Dmaven.repo.local=/home/user/.m2/repository package -Dmaven.test.skip=true
          component: kubernetes-deploy
          group:
            isDefault: true
            kind: build
          workingDir: ${PROJECT_SOURCE}
        id: build
      - exec:
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository spring-boot:run
          component: kubernetes-deploy
          group:
            isDefault: true
            kind: run
          workingDir: ${PROJECT_SOURCE}
        id: run
      - exec:
          commandLine: java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=${DEBUG_PORT},suspend=n
            -jar target/*.jar
          component: kubernetes-deploy
          group:
            isDefault: true
            kind: debug
          workingDir: ${PROJECT_SOURCE}
        id: debug
      - id: deploy
        composite:
          commands:
          - build
          - deploy-k8s
          group:
            kind: deploy
            isDefault: true
      - id: deploy-k8s
        apply:
          component: kubernetes-deploy
      components:
      - container:
          command:
          - tail
          - -f
          - /dev/null
          endpoints:
          - name: http-springboot
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
          env:
          - name: DEBUG_PORT
            value: '5858'
          image: registry.access.redhat.com/ubi9/openjdk-17:1.16
          memoryLimit: 768Mi
          mountSources: true
          volumeMounts:
          - name: m2
            path: /home/user/.m2
        name: kubernetes-deploy
      - name: m2
        volume:
          size: 3Gi
      metadata:
        description: "Java application using Spring Boot\xAE and OpenJDK 11"
        displayName: "Spring Boot\xAE"
        globalMemoryLimit: 2674Mi
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/spring.svg
        language: Java
        name: sample-spring-kotlin-microservice
        projectType: springboot
        tags:
        - Java
        - Spring
        version: 1.2.0
      schemaVersion: 2.2.0
      starterProjects:
      - git:
          remotes:
            origin: https://github.com/odo-devfiles/springboot-ex.git
        name: springbootproject
    question: "Could you generate a devfile sample with name sample-spring-kotlin-microservice using Java, Spring and Java as programming language? The\
      \ devfile should have 5 commands. 1: id build, 2: id run, 3: id debug, 4: id deploy, 5: id deploy-k8s. The devfile should have 2 components. 1: name\
      \ kubernetes-deploy and container image registry.access.redhat.com/ubi9/openjdk-17:1.16, 2: name m2 and container image ."
  - answer: |
      schemaVersion: 2.0.0
      metadata:
        name: java-springboot
        version: 1.1.0
        attributes:
          alpha.build-context: .
          alpha.build-dockerfile: docker/Dockerfile
        displayName: Java Spring Boot
        description: Java Spring Boot using Maven
        tags:
        - Java
        - Spring
        projectType: springboot
        language: java
      starterProjects:
      - name: springbootproject
        git:
          remotes:
            origin: https://github.com/odo-devfiles/springboot-ex.git
      components:
      - name: buildguidance
        attributes:
          tool: console-import
        container:
          image: buildguidanceimage-placeholder
          memoryLimit: 1024Mi
          endpoints:
          - name: http-8081
            targetPort: 8081
      - name: tools
        container:
          image: quay.io/eclipse/che-java11-maven:nightly
          memoryLimit: 768Mi
          mountSources: true
          endpoints:
          - name: 8080-tcp
            targetPort: 8080
          volumeMounts:
          - name: m2
            path: /home/user/.m2
      - name: m2
        volume:
          size: 3Gi
      commands:
      - id: build
        exec:
          component: tools
          commandLine: mvn clean -Dmaven.repo.local=/home/user/.m2/repository package -Dmaven.test.skip=true
          group:
            kind: build
            isDefault: true
      - id: run
        exec:
          component: tools
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository spring-boot:run
          group:
            kind: run
            isDefault: true
      - id: debug
        exec:
          component: tools
          commandLine: java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=${DEBUG_PORT},suspend=n
            -jar target/*.jar
          group:
            kind: debug
            isDefault: true
    question: "Could you generate a devfile sample with name java-springboot using Java, Spring and java as programming language? The devfile should have\
      \ 3 commands. 1: id build, 2: id run, 3: id debug. The devfile should have 3 components. 1: name buildguidance and container image buildguidanceimage-placeholder,\
      \ 2: name tools and container image quay.io/eclipse/che-java11-maven:nightly, 3: name m2 and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: fbc-v4.12
        displayName: FBC v4.12
        description: File based catalog
        language: fbc
        provider: Red Hat
      components:
      - name: image-build
        image:
          imageName: ''
          dockerfile:
            uri: Dockerfile
            buildContext: ''
      - name: kubernetes
        kubernetes:
          inlined: placeholder
        attributes:
          deployment/container-port: 50051
          deployment/cpuRequest: 100m
          deployment/memoryRequest: 512Mi
          deployment/replicas: 1
          deployment/storageRequest: '0'
      commands:
      - id: build-image
        apply:
          component: image-build
    question: "Could you generate a devfile sample with name fbc-v4.12 and fbc as programming language? The devfile should have 1 commands. 1: id build-image.\
      \ The devfile should have 2 components. 1: name image-build and container image , 2: name kubernetes and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-quarkus
        version: 1.2.1
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        icon: https://design.jboss.org/quarkus/logo/final/SVG/quarkus_icon_rgb_default.svg
        website: https://quarkus.io
        displayName: Quarkus Java
        description: Quarkus with Java
        tags:
        - Java
        - Quarkus
        projectType: Quarkus
        language: Java
        attributes:
          alpha.dockerimage-port: 8081
      parent:
        id: java-quarkus
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: java-quarkus-image:latest
          dockerfile:
            uri: src/main/docker/Dockerfile.jvm.staged
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuRequest: 10m
          deployment/memoryRequest: 100Mi
          deployment/container-port: 8081
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name java-quarkus using Java, Quarkus and Java as programming language? The devfile should have\
      \ 3 commands. 1: id build-image, 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name image-build and container image , 2:\
      \ name kubernetes-deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: node-rebuild
        displayName: node Runtime
        description: Rebuilder for Stone Soup
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/golang.svg
        language: nodejs
        projectType: nodejs
        tags:
        - nodejs
        version: 1.0.0
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
        attributes:
          alpha.dockerimage-port: 8080
      components:
      - name: image-build
        image:
          imageName: rebuilder:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      commands:
      - id: build-image
        apply:
          component: image-build
      - id: deploy
        composite:
          commands:
          - build-image
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name node-rebuild using nodejs and nodejs as programming language? The devfile should have 2 commands.\
      \ 1: id build-image, 2: id deploy. The devfile should have 1 components. 1: name image-build and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        description: .Net TodoList
        displayName: todolist
        icon: https://github.com/dotnet/brand/raw/main/logo/dotnet-logo.png
        language: dotnet
        name: todolist
        projectType: dotnet
        tags:
        - dotnet
        version: 1.0.0
        generateName: todolist-devspace-
      projects:
      - name: todolist
        git:
          remotes:
            origin: https://github.com/jkeam/todolist.git
          checkoutFrom:
            revision: main
      commands:
      - id: restore
        exec:
          component: dotnet
          commandLine: dotnet restore
          workingDir: /projects/todolist
          label: Restore project
      - id: clean
        exec:
          component: dotnet
          commandLine: dotnet clean
          workingDir: /projects/todolist
          label: Clean project
      - id: build
        exec:
          component: dotnet
          commandLine: dotnet build
          workingDir: /projects/todolist
          label: Run build
          group:
            isDefault: true
            kind: build
      - id: test
        exec:
          component: dotnet
          commandLine: dotnet test
          workingDir: /projects/todolist
          label: Run tests
      - id: run
        exec:
          component: dotnet
          commandLine: dotnet watch run
          workingDir: /projects/todolist
          label: Start application in watch mode
          group:
            isDefault: true
            kind: run
      - id: migratedb
        exec:
          component: dotnet
          commandLine: MIGRATION=true dotnet run
          workingDir: /projects/todolist
          label: Migrate database
      components:
      - name: dotnet
        container:
          image: registry.redhat.io/devspaces/udi-rhel8@sha256:d55549aad15742f6f7310da0c7abc1e65dd5d3ad2e3efb8fbf414cf91b9efac7
          memoryLimit: 4Gi
          cpuLimit: 4000m
          mountSources: true
          command:
          - sleep
          - infinity
          endpoints:
          - name: web
            targetPort: 5212
            exposure: public
            protocol: http
            secure: false
          env:
          - name: DB_URL
            value: Data Source=.;Initial Catalog=TodoApp;User ID=sa;Password=Password_123
          - name: APP_NAME
            value: TodoList
      - name: adminer
        container:
          image: quay.io/official-images/adminer@sha256:44397ff6d1367c0bd1293206ad08f21d4146cca9e38698ea7c2fe0bedda9f25a
          memoryLimit: 1Gi
          env:
          - name: ADMINER_DEFAULT_SERVER
            value: localhost
          - name: ADMINER_DESIGN
            value: nette
          endpoints:
          - name: dbclient
            targetPort: 8080
            exposure: public
            protocol: http
            secure: false
      - name: mssql
        container:
          image: mcr.microsoft.com/mssql/server:2019-latest
          memoryLimit: 2Gi
          env:
          - name: ACCEPT_EULA
            value: Y
          - name: SA_PASSWORD
            value: Password_123
          - name: MSSQL_PID
            value: Express
          endpoints:
          - name: db
            targetPort: 1433
            exposure: none
            secure: false
          volumeMounts:
          - name: dbdata
            path: /var/opt/mssql
      - name: dbdata
        volume:
          size: 1Gi
    question: "Could you generate a devfile sample with name todolist using dotnet and dotnet as programming language? The devfile should have 6 commands.\
      \ 1: id restore, 2: id clean, 3: id build, 4: id test, 5: id run, 6: id migratedb. The devfile should have 4 components. 1: name dotnet and container\
      \ image registry.redhat.io/devspaces/udi-rhel8@sha256:d55549aad15742f6f7310da0c7abc1e65dd5d3ad2e3efb8fbf414cf91b9efac7, 2: name adminer and container\
      \ image quay.io/official-images/adminer@sha256:44397ff6d1367c0bd1293206ad08f21d4146cca9e38698ea7c2fe0bedda9f25a, 3: name mssql and container image\
      \ mcr.microsoft.com/mssql/server:2019-latest, 4: name dbdata and container image ."
  - answer: |
      metadata:
        description: "Spring Boot\xAE using Java"
        displayName: "Spring Boot\xAE"
        globalMemoryLimit: 2674Mi
        icon: https://www.eclipse.org/che/images/logo-eclipseche.svg
        language: java
        name: catalog-springboot
        projectType: spring
        tags:
        - Java
        - Spring
        version: 1.1.0
      schemaVersion: 2.2.0
      parent:
        id: java-springboot
        registryUrl: https://registry.devfile.io
      components:
      - name: outerloop-build
        image:
          imageName: java-springboot-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: outerloop-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 300Mi
          deployment/memoryRequest: 180Mi
          deployment/container-port: 9000
        kubernetes:
          uri: outerloop-deploy.yaml
    question: "Could you generate a devfile sample with name catalog-springboot using Java, Spring and java as programming language? The devfile should\
      \ have 2 components. 1: name outerloop-build and container image , 2: name outerloop-deploy and container image ."
  - answer: |
      commands:
      - exec:
          commandLine: yarn install --frozen-lockfile
          component: builder
          group:
            isDefault: true
            kind: build
          workingDir: /project
        id: install
      - exec:
          commandLine: yarn build && yarn install --production --ignore-scripts --prefer-offline
          component: builder
          group:
            isDefault: true
            kind: run
          workingDir: /project
        id: build
      components:
      - container:
          image: node:slim
          memoryLimit: 1024Mi
          mountSources: true
          sourceMapping: /project
          volumeMounts:
          - name: dist
            path: /project/dist
        name: builder
      - container:
          endpoints:
          - name: http
            targetPort: 8080
          image: nginxinc/nginx-unprivileged:alpine
          memoryLimit: 1024Mi
          mountSources: false
          volumeMounts:
          - name: dist
            path: /usr/share/nginx/html
        name: server
      - name: dist
        volume:
          size: 4Gi
      metadata:
        description: Stack with Node.js 14
        displayName: Node.js Runtime
        language: nodejs
        name: nodejs-vue
        projectType: nodejs
        tags:
        - NodeJS
        - Express
        - ubi8
        version: 1.0.1
      schemaVersion: 2.0.0
      starterProjects:
      - name: nodejs-vue-starter
        git:
          checkoutFrom:
            revision: main
          remotes:
            origin: https://github.com/schultzp2020/devfile-starter-projects.git
        subDir: nodejs-vue
    question: "Could you generate a devfile sample with name nodejs-vue using NodeJS, Express, ubi8 and nodejs as programming language? The devfile should\
      \ have 2 commands. 1: id install, 2: id build. The devfile should have 3 components. 1: name builder and container image node:slim, 2: name server\
      \ and container image nginxinc/nginx-unprivileged:alpine, 3: name dist and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: udi-tooling-test
        displayName: UDI tooling test
        description: UDI tooling test
        icon: https://raw.githubusercontent.com/devfile-samples/devfile-stack-icons/main/spring.svg
        tags:
        - Java
        - Spring
        projectType: springboot
        language: Java
        version: 2.0.0
        globalMemoryLimit: 2674Mi
      projects:
      - name: udi-tooling
        git:
          remotes:
            origin: https://github.com/AObuchow/udi-path-env.git
      components:
      - name: tools
        container:
          image: quay.io/devfile/universal-developer-image:ubi8-latest
          command:
          - tail
          - -f
          - /dev/null
          memoryLimit: 768Mi
          mountSources: true
          endpoints:
          - name: http-springboot
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
          env:
          - name: DEBUG_PORT
            value: '5858'
      - name: build
        image:
          imageName: java-springboot-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: deploy
        kubernetes:
          uri: kubernetes/deploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
      events:
        postStart:
        - load-environment
      commands:
      - id: test-binaries
        exec:
          component: tools
          commandLine: sdk > /projects/udi-tooling/sdk_out.txt ; jbang --help > ${PROJECT_SOURCE}/jbang_out.txt
            ; gopls --help > ${PROJECT_SOURCE}/gopls_out.txt ; kubectl krew > ${PROJECT_SOURCE}/krew_out.txt
          workingDir: ${PROJECT_SOURCE}
      - id: log-binaries
        exec:
          component: tools
          commandLine: compgen -c | xargs which --all --skip-functions | sort | uniq > ${PROJECT_SOURCE}/binaries.txt
            ;  git add ${PROJECT_SOURCE}/binaries.txt ; git commit -m "update binaries.txt"
            ; git push
          workingDir: ${PROJECT_SOURCE}
      - id: load-environment
        exec:
          component: tools
          commandLine: source /home/user/.bashrc
    question: "Could you generate a devfile sample with name udi-tooling-test using Java, Spring and Java as programming language? The devfile should have\
      \ 3 commands. 1: id test-binaries, 2: id log-binaries, 3: id load-environment. The devfile should have 3 components. 1: name tools and container image\
      \ quay.io/devfile/universal-developer-image:ubi8-latest, 2: name build and container image , 3: name deploy and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: java-springboot
        version: 1.2.1
        attributes:
          alpha.dockerimage-port: 8081
        displayName: "Spring Boot\xAE"
        description: "Spring Boot\xAE using Maven"
        icon: https://spring.io/images/projects/spring-edf462fec682b9d48cf628eaf9e19521.svg
        tags:
        - Java
        - Spring Boot
        projectType: springboot
        language: Java
        provider: Red Hat
        supportUrl: https://github.com/devfile-samples/devfile-support#support-information
      parent:
        id: java-springboot
        registryUrl: https://registry.devfile.io
      components:
      - name: image-build
        image:
          imageName: java-springboot-image:latest
          dockerfile:
            uri: docker/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-only-deploy
        attributes:
          deployment/replicas: 3
          deployment/route: route333
          deployment/cpuLimit: 133m
          deployment/cpuRequest: 13m
          deployment/memoryLimit: 333Mi
          deployment/memoryRequest: 133Mi
          deployment/storageLimit: 333Mi
          deployment/storageRequest: 133Mi
          deployment/container-port: 8381
        kubernetes:
          uri: onlydeploy.yaml
          endpoints:
          - name: http-8081
            targetPort: 8081
            path: /
    question: "Could you generate a devfile sample with name java-springboot using Java, Spring Boot and Java as programming language? The devfile should\
      \ have 2 components. 1: name image-build and container image , 2: name kubernetes-only-deploy and container image ."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: java-quarkus
        displayName: Quarkus Java
        description: Java application using Quarkus and OpenJDK 17
        icon: https://design.jboss.org/quarkus/logo/final/SVG/quarkus_icon_rgb_default.svg
        tags:
        - Java
        - Quarkus
        projectType: Quarkus
        language: Java
        version: 1.3.0
        website: https://quarkus.io
      starterProjects:
      - name: community
        zip:
          location: https://code.quarkus.io/d?e=io.quarkus%3Aquarkus-resteasy&e=io.quarkus%3Aquarkus-micrometer&e=io.quarkus%3Aquarkus-smallrye-health&e=io.quarkus%3Aquarkus-openshift&cn=devfile
      - name: redhat-product
        zip:
          location: https://code.quarkus.redhat.com/d?e=io.quarkus%3Aquarkus-resteasy&e=io.quarkus%3Aquarkus-smallrye-health&e=io.quarkus%3Aquarkus-openshift
      components:
      - name: tools
        container:
          image: registry.access.redhat.com/ubi8/openjdk-17:1.18-2
          args:
          - tail
          - -f
          - /dev/null
          memoryLimit: 1024Mi
          mountSources: true
          volumeMounts:
          - name: m2
            path: /home/user/.m2
          endpoints:
          - name: http-quarkus
            targetPort: 8080
          - exposure: none
            name: debug
            targetPort: 5858
          env:
          - name: DEBUG_PORT
            value: '5858'
      - name: m2
        volume:
          size: 3Gi
      commands:
      - id: init-compile
        exec:
          component: tools
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository compile
          workingDir: ${PROJECT_SOURCE}
      - id: dev-run
        exec:
          component: tools
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository quarkus:dev -Dquarkus.http.host=0.0.0.0
            -Djava.util.logging.manager=org.jboss.logmanager.LogManager
          hotReloadCapable: true
          group:
            kind: run
            isDefault: true
          workingDir: ${PROJECT_SOURCE}
      - id: dev-debug
        exec:
          component: tools
          commandLine: mvn -Dmaven.repo.local=/home/user/.m2/repository quarkus:dev -Dquarkus.http.host=0.0.0.0
            -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Ddebug=${DEBUG_PORT}
          hotReloadCapable: true
          group:
            kind: debug
            isDefault: true
          workingDir: ${PROJECT_SOURCE}
      events:
        postStart:
        - init-compile
    question: "Could you generate a devfile sample with name java-quarkus using Java, Quarkus and Java as programming language? The devfile should have\
      \ 3 commands. 1: id init-compile, 2: id dev-run, 3: id dev-debug. The devfile should have 2 components. 1: name tools and container image registry.access.redhat.com/ubi8/openjdk-17:1.18-2,\
      \ 2: name m2 and container image ."
  - answer: |
      schemaVersion: 2.2.0
      metadata:
        name: nodejs
        projectType: nodejs
        language: golang
        version: 1.0.0
        provider: Red Hat
      components:
      - name: outerloop-build
        image:
          imageName: fib-node:latest
          dockerfile:
            uri: fib-node/Dockerfile
            buildContext: .
            rootRequired: false
      - name: kubernetes-deploy
        attributes:
          deployment/replicas: 1
          deployment/cpuLimit: 100m
          deployment/cpuRequest: 10m
          deployment/memoryLimit: 100Mi
          deployment/memoryRequest: 50Mi
          deployment/container-port: 8080
        kubernetes:
          uri: deploy.yaml
          endpoints:
          - name: http-8080
            targetPort: 8080
            path: /
      commands:
      - id: build-image
        apply:
          component: outerloop-build
      - id: deployk8s
        apply:
          component: kubernetes-deploy
      - id: deploy
        composite:
          commands:
          - build-image
          - deployk8s
          group:
            kind: deploy
            isDefault: true
    question: "Could you generate a devfile sample with name nodejs and golang as programming language? The devfile should have 3 commands. 1: id build-image,\
      \ 2: id deployk8s, 3: id deploy. The devfile should have 2 components. 1: name outerloop-build and container image , 2: name kubernetes-deploy and\
      \ container image ."
  - answer: |
      schemaVersion: 2.1.0
      metadata:
        name: chapeaux-project
        displayName: Chapeaux Web Components
        language: javascript
      components:
      - name: deno-www
        container:
          image: quay.io/chapeaux/deno-che:latest
          env:
          - name: DENO_DIR
            value: .deno
          memoryLimit: 1G
          mountSources: true
          volumeMounts:
          - name: deno-cache
            path: .deno
          endpoints:
          - name: deno-svc
            protocol: https
            exposure: public
            targetPort: 8080
      - name: deno-cache
        volume:
          size: 1G
      commands:
      - exec:
          label: RUN the web server
          component: deno-www
          workingDir: ${PROJECTS_ROOT}/cpx-components
          commandLine: deno task serve
          group:
            kind: run
            isDefault: true
        id: serve-app
      - exec:
          label: TEST the components
          component: deno-www
          workingDir: ${PROJECTS_ROOT}/cpx-components
          commandLine: deno task test
          group:
            kind: test
        id: test-cpx
      - exec:
          label: TEST the components and WATCH for changes
          component: deno-www
          workingDir: ${PROJECTS_ROOT}/cpx-components
          commandLine: deno task test:watch
          hotReloadCapable: true
          group:
            kind: test
        id: test-watch
      - exec:
          label: BUILD changed component scripts
          component: deno-www
          workingDir: ${PROJECTS_ROOT}/cpx-components
          commandLine: deno task build
          group:
            kind: build
        id: build-scripts
      - exec:
          label: BUILD component scripts and WATCH for changes
          component: deno-www
          workingDir: ${PROJECTS_ROOT}/cpx-components
          commandLine: deno task build:watch
          hotReloadCapable: true
          group:
            kind: build
        id: build-watch
      - exec:
          label: FORMAT component scripts
          component: deno-www
          workingDir: ${PROJECTS_ROOT}/cpx-components
          commandLine: deno task format
          group:
            kind: build
        id: fmt-cpx
    question: "Could you generate a devfile sample with name chapeaux-project and javascript as programming language? The devfile should have 6 commands.\
      \ 1: id serve-app, 2: id test-cpx, 3: id test-watch, 4: id build-scripts, 5: id build-watch, 6: id fmt-cpx. The devfile should have 2 components.\
      \ 1: name deno-www and container image quay.io/chapeaux/deno-che:latest, 2: name deno-cache and container image ."
